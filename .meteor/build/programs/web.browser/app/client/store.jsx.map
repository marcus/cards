{"version":3,"sources":["meteor://ðŸ’»app/client/store.jsx"],"names":[],"mappings":";;;;;;;;aAA0D,KAAK;IAAvD,WAAW,UAAX,WAAW;IAAE,eAAe,UAAf,eAAe;IAAE,eAAe,UAAf,eAAe;qBAClB,aAAa;IAAxC,QAAQ,kBAAR,QAAQ;IAAE,YAAY,kBAAZ,YAAY;0BACe,kBAAkB;IAAvD,QAAQ,uBAAR,QAAQ;IAAE,UAAU,uBAAV,UAAU;IAAE,UAAU,uBAAV,UAAU;;;;;;;;;;;;;;;;;;;AAmBxC,IAAM,WAAW,GAAG,eAAe,CAAC;AAClC,eAAa,EAAE,QAAQ,CAAC,aAAa;AACrC,OAAK,EAAE,QAAQ,CAAC,KAAK;CACtB,CAAC,CAAC;;AAEH,IAAM,gBAAgB,GACpB,eAAe,CAAC,MAAM,CAAC,CACrB,QAAQ,EAAE,CACR,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CACrE,WAAW,CACZ,CACF,CACF,CAAC;;;;;;AAMJ,KAAK,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC,sC","file":"/client/store.jsx","sourcesContent":["const { createStore, combineReducers, applyMiddleware } = Redux;\nconst { devTools, persistState } = ReduxDevTools;\nconst { DevTools, DebugPanel, LogMonitor } = ReactReduxDevTools;\n\n// Redux has a single store. to reduce complexity it allows you to combine\n// several 'reducer' functions that share this single state object.\n// They are combined into one root reducer which is passed to the store\n//\n// the shape of root reducer will then look like:\n//    {\n//      userInterface: {\n//        selectedId: 'ds34sjsa34',\n//        selectedPlayerName: 'Bob Smith'\n//      },\n//      players: [\n//        { mongo doc },\n//        { mongo doc },\n//        { mongo doc }\n//      ]\n//    }\n\nconst rootReducer = combineReducers({\n  userInterface: Reducers.userInterface,\n  cards: Reducers.cards,\n});\n\nconst finalCreateStore =\n  applyMiddleware(logger)(\n    devTools()(\n      persistState(window.location.href.match(/[?&]debug_session=([^&]+)\\b/))(\n        createStore\n      )\n    )\n  );\n\n// applyMiddleware takes createStore() and returns a new wrapped createStore\n// note, this is an optional step to use middleware (we're auto console.log dispatches)\n// let createStoreWithMiddleware = applyMiddleware(logger)(createStore);\n// store = createStoreWithMiddleware(rootReducer);\nstore = finalCreateStore(rootReducer);\n"]}