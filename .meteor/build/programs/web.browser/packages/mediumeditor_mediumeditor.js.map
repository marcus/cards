{"version":3,"sources":["meteor://💻app/packages/mediumeditor_mediumeditor/packages/mediumeditor_mediumeditor.js"],"names":[],"mappingsfile":"/packages/mediumeditor_mediumeditor.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mediumeditor:mediumeditor/dist/js/medium-editor.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*global self, document, DOMException */                                                                               // 1\n                                                                                                                       // 2\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */                                    // 3\n                                                                                                                       // 4\n// Full polyfill for browsers with no classList support                                                                // 5\nif (!(\"classList\" in document.createElement(\"_\"))) {                                                                   // 6\n  (function (view) {                                                                                                   // 7\n                                                                                                                       // 8\n  \"use strict\";                                                                                                        // 9\n                                                                                                                       // 10\n  if (!('Element' in view)) return;                                                                                    // 11\n                                                                                                                       // 12\n  var                                                                                                                  // 13\n      classListProp = \"classList\"                                                                                      // 14\n    , protoProp = \"prototype\"                                                                                          // 15\n    , elemCtrProto = view.Element[protoProp]                                                                           // 16\n    , objCtr = Object                                                                                                  // 17\n    , strTrim = String[protoProp].trim || function () {                                                                // 18\n      return this.replace(/^\\s+|\\s+$/g, \"\");                                                                           // 19\n    }                                                                                                                  // 20\n    , arrIndexOf = Array[protoProp].indexOf || function (item) {                                                       // 21\n      var                                                                                                              // 22\n          i = 0                                                                                                        // 23\n        , len = this.length                                                                                            // 24\n      ;                                                                                                                // 25\n      for (; i < len; i++) {                                                                                           // 26\n        if (i in this && this[i] === item) {                                                                           // 27\n          return i;                                                                                                    // 28\n        }                                                                                                              // 29\n      }                                                                                                                // 30\n      return -1;                                                                                                       // 31\n    }                                                                                                                  // 32\n    // Vendors: please allow content code to instantiate DOMExceptions                                                 // 33\n    , DOMEx = function (type, message) {                                                                               // 34\n      this.name = type;                                                                                                // 35\n      this.code = DOMException[type];                                                                                  // 36\n      this.message = message;                                                                                          // 37\n    }                                                                                                                  // 38\n    , checkTokenAndGetIndex = function (classList, token) {                                                            // 39\n      if (token === \"\") {                                                                                              // 40\n        throw new DOMEx(                                                                                               // 41\n            \"SYNTAX_ERR\"                                                                                               // 42\n          , \"An invalid or illegal string was specified\"                                                               // 43\n        );                                                                                                             // 44\n      }                                                                                                                // 45\n      if (/\\s/.test(token)) {                                                                                          // 46\n        throw new DOMEx(                                                                                               // 47\n            \"INVALID_CHARACTER_ERR\"                                                                                    // 48\n          , \"String contains an invalid character\"                                                                     // 49\n        );                                                                                                             // 50\n      }                                                                                                                // 51\n      return arrIndexOf.call(classList, token);                                                                        // 52\n    }                                                                                                                  // 53\n    , ClassList = function (elem) {                                                                                    // 54\n      var                                                                                                              // 55\n          trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")                                              // 56\n        , classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []                                                  // 57\n        , i = 0                                                                                                        // 58\n        , len = classes.length                                                                                         // 59\n      ;                                                                                                                // 60\n      for (; i < len; i++) {                                                                                           // 61\n        this.push(classes[i]);                                                                                         // 62\n      }                                                                                                                // 63\n      this._updateClassName = function () {                                                                            // 64\n        elem.setAttribute(\"class\", this.toString());                                                                   // 65\n      };                                                                                                               // 66\n    }                                                                                                                  // 67\n    , classListProto = ClassList[protoProp] = []                                                                       // 68\n    , classListGetter = function () {                                                                                  // 69\n      return new ClassList(this);                                                                                      // 70\n    }                                                                                                                  // 71\n  ;                                                                                                                    // 72\n  // Most DOMException implementations don't allow calling DOMException's toString()                                   // 73\n  // on non-DOMExceptions. Error's toString() is sufficient here.                                                      // 74\n  DOMEx[protoProp] = Error[protoProp];                                                                                 // 75\n  classListProto.item = function (i) {                                                                                 // 76\n    return this[i] || null;                                                                                            // 77\n  };                                                                                                                   // 78\n  classListProto.contains = function (token) {                                                                         // 79\n    token += \"\";                                                                                                       // 80\n    return checkTokenAndGetIndex(this, token) !== -1;                                                                  // 81\n  };                                                                                                                   // 82\n  classListProto.add = function () {                                                                                   // 83\n    var                                                                                                                // 84\n        tokens = arguments                                                                                             // 85\n      , i = 0                                                                                                          // 86\n      , l = tokens.length                                                                                              // 87\n      , token                                                                                                          // 88\n      , updated = false                                                                                                // 89\n    ;                                                                                                                  // 90\n    do {                                                                                                               // 91\n      token = tokens[i] + \"\";                                                                                          // 92\n      if (checkTokenAndGetIndex(this, token) === -1) {                                                                 // 93\n        this.push(token);                                                                                              // 94\n        updated = true;                                                                                                // 95\n      }                                                                                                                // 96\n    }                                                                                                                  // 97\n    while (++i < l);                                                                                                   // 98\n                                                                                                                       // 99\n    if (updated) {                                                                                                     // 100\n      this._updateClassName();                                                                                         // 101\n    }                                                                                                                  // 102\n  };                                                                                                                   // 103\n  classListProto.remove = function () {                                                                                // 104\n    var                                                                                                                // 105\n        tokens = arguments                                                                                             // 106\n      , i = 0                                                                                                          // 107\n      , l = tokens.length                                                                                              // 108\n      , token                                                                                                          // 109\n      , updated = false                                                                                                // 110\n      , index                                                                                                          // 111\n    ;                                                                                                                  // 112\n    do {                                                                                                               // 113\n      token = tokens[i] + \"\";                                                                                          // 114\n      index = checkTokenAndGetIndex(this, token);                                                                      // 115\n      while (index !== -1) {                                                                                           // 116\n        this.splice(index, 1);                                                                                         // 117\n        updated = true;                                                                                                // 118\n        index = checkTokenAndGetIndex(this, token);                                                                    // 119\n      }                                                                                                                // 120\n    }                                                                                                                  // 121\n    while (++i < l);                                                                                                   // 122\n                                                                                                                       // 123\n    if (updated) {                                                                                                     // 124\n      this._updateClassName();                                                                                         // 125\n    }                                                                                                                  // 126\n  };                                                                                                                   // 127\n  classListProto.toggle = function (token, force) {                                                                    // 128\n    token += \"\";                                                                                                       // 129\n                                                                                                                       // 130\n    var                                                                                                                // 131\n        result = this.contains(token)                                                                                  // 132\n      , method = result ?                                                                                              // 133\n        force !== true && \"remove\"                                                                                     // 134\n      :                                                                                                                // 135\n        force !== false && \"add\"                                                                                       // 136\n    ;                                                                                                                  // 137\n                                                                                                                       // 138\n    if (method) {                                                                                                      // 139\n      this[method](token);                                                                                             // 140\n    }                                                                                                                  // 141\n                                                                                                                       // 142\n    if (force === true || force === false) {                                                                           // 143\n      return force;                                                                                                    // 144\n    } else {                                                                                                           // 145\n      return !result;                                                                                                  // 146\n    }                                                                                                                  // 147\n  };                                                                                                                   // 148\n  classListProto.toString = function () {                                                                              // 149\n    return this.join(\" \");                                                                                             // 150\n  };                                                                                                                   // 151\n                                                                                                                       // 152\n  if (objCtr.defineProperty) {                                                                                         // 153\n    var classListPropDesc = {                                                                                          // 154\n        get: classListGetter                                                                                           // 155\n      , enumerable: true                                                                                               // 156\n      , configurable: true                                                                                             // 157\n    };                                                                                                                 // 158\n    try {                                                                                                              // 159\n      objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                           // 160\n    } catch (ex) { // IE 8 doesn't support enumerable:true                                                             // 161\n      if (ex.number === -0x7FF5EC54) {                                                                                 // 162\n        classListPropDesc.enumerable = false;                                                                          // 163\n        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                         // 164\n      }                                                                                                                // 165\n    }                                                                                                                  // 166\n  } else if (objCtr[protoProp].__defineGetter__) {                                                                     // 167\n    elemCtrProto.__defineGetter__(classListProp, classListGetter);                                                     // 168\n  }                                                                                                                    // 169\n                                                                                                                       // 170\n  }(self));                                                                                                            // 171\n}                                                                                                                      // 172\n                                                                                                                       // 173\n/* Blob.js                                                                                                             // 174\n * A Blob implementation.                                                                                              // 175\n * 2014-07-24                                                                                                          // 176\n *                                                                                                                     // 177\n * By Eli Grey, http://eligrey.com                                                                                     // 178\n * By Devin Samarin, https://github.com/dsamarin                                                                       // 179\n * License: X11/MIT                                                                                                    // 180\n *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md                                                     // 181\n */                                                                                                                    // 182\n                                                                                                                       // 183\n/*global self, unescape */                                                                                             // 184\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,                             // 185\n  plusplus: true */                                                                                                    // 186\n                                                                                                                       // 187\n/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */                                              // 188\n                                                                                                                       // 189\n(function (view) {                                                                                                     // 190\n  \"use strict\";                                                                                                        // 191\n                                                                                                                       // 192\n  view.URL = view.URL || view.webkitURL;                                                                               // 193\n                                                                                                                       // 194\n  if (view.Blob && view.URL) {                                                                                         // 195\n    try {                                                                                                              // 196\n      new Blob;                                                                                                        // 197\n      return;                                                                                                          // 198\n    } catch (e) {}                                                                                                     // 199\n  }                                                                                                                    // 200\n                                                                                                                       // 201\n  // Internally we use a BlobBuilder implementation to base Blob off of                                                // 202\n  // in order to support older browsers that only have BlobBuilder                                                     // 203\n  var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {             // 204\n    var                                                                                                                // 205\n        get_class = function(object) {                                                                                 // 206\n        return Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1];                                  // 207\n      }                                                                                                                // 208\n      , FakeBlobBuilder = function BlobBuilder() {                                                                     // 209\n        this.data = [];                                                                                                // 210\n      }                                                                                                                // 211\n      , FakeBlob = function Blob(data, type, encoding) {                                                               // 212\n        this.data = data;                                                                                              // 213\n        this.size = data.length;                                                                                       // 214\n        this.type = type;                                                                                              // 215\n        this.encoding = encoding;                                                                                      // 216\n      }                                                                                                                // 217\n      , FBB_proto = FakeBlobBuilder.prototype                                                                          // 218\n      , FB_proto = FakeBlob.prototype                                                                                  // 219\n      , FileReaderSync = view.FileReaderSync                                                                           // 220\n      , FileException = function(type) {                                                                               // 221\n        this.code = this[this.name = type];                                                                            // 222\n      }                                                                                                                // 223\n      , file_ex_codes = (                                                                                              // 224\n          \"NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR \"                                        // 225\n        + \"NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR\"                                                   // 226\n      ).split(\" \")                                                                                                     // 227\n      , file_ex_code = file_ex_codes.length                                                                            // 228\n      , real_URL = view.URL || view.webkitURL || view                                                                  // 229\n      , real_create_object_URL = real_URL.createObjectURL                                                              // 230\n      , real_revoke_object_URL = real_URL.revokeObjectURL                                                              // 231\n      , URL = real_URL                                                                                                 // 232\n      , btoa = view.btoa                                                                                               // 233\n      , atob = view.atob                                                                                               // 234\n                                                                                                                       // 235\n      , ArrayBuffer = view.ArrayBuffer                                                                                 // 236\n      , Uint8Array = view.Uint8Array                                                                                   // 237\n                                                                                                                       // 238\n      , origin = /^[\\w-]+:\\/*\\[?[\\w\\.:-]+\\]?(?::[0-9]+)?/                                                              // 239\n    ;                                                                                                                  // 240\n    FakeBlob.fake = FB_proto.fake = true;                                                                              // 241\n    while (file_ex_code--) {                                                                                           // 242\n      FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;                                         // 243\n    }                                                                                                                  // 244\n    // Polyfill URL                                                                                                    // 245\n    if (!real_URL.createObjectURL) {                                                                                   // 246\n      URL = view.URL = function(uri) {                                                                                 // 247\n        var                                                                                                            // 248\n            uri_info = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")                                   // 249\n          , uri_origin                                                                                                 // 250\n        ;                                                                                                              // 251\n        uri_info.href = uri;                                                                                           // 252\n        if (!(\"origin\" in uri_info)) {                                                                                 // 253\n          if (uri_info.protocol.toLowerCase() === \"data:\") {                                                           // 254\n            uri_info.origin = null;                                                                                    // 255\n          } else {                                                                                                     // 256\n            uri_origin = uri.match(origin);                                                                            // 257\n            uri_info.origin = uri_origin && uri_origin[1];                                                             // 258\n          }                                                                                                            // 259\n        }                                                                                                              // 260\n        return uri_info;                                                                                               // 261\n      };                                                                                                               // 262\n    }                                                                                                                  // 263\n    URL.createObjectURL = function(blob) {                                                                             // 264\n      var                                                                                                              // 265\n          type = blob.type                                                                                             // 266\n        , data_URI_header                                                                                              // 267\n      ;                                                                                                                // 268\n      if (type === null) {                                                                                             // 269\n        type = \"application/octet-stream\";                                                                             // 270\n      }                                                                                                                // 271\n      if (blob instanceof FakeBlob) {                                                                                  // 272\n        data_URI_header = \"data:\" + type;                                                                              // 273\n        if (blob.encoding === \"base64\") {                                                                              // 274\n          return data_URI_header + \";base64,\" + blob.data;                                                             // 275\n        } else if (blob.encoding === \"URI\") {                                                                          // 276\n          return data_URI_header + \",\" + decodeURIComponent(blob.data);                                                // 277\n        } if (btoa) {                                                                                                  // 278\n          return data_URI_header + \";base64,\" + btoa(blob.data);                                                       // 279\n        } else {                                                                                                       // 280\n          return data_URI_header + \",\" + encodeURIComponent(blob.data);                                                // 281\n        }                                                                                                              // 282\n      } else if (real_create_object_URL) {                                                                             // 283\n        return real_create_object_URL.call(real_URL, blob);                                                            // 284\n      }                                                                                                                // 285\n    };                                                                                                                 // 286\n    URL.revokeObjectURL = function(object_URL) {                                                                       // 287\n      if (object_URL.substring(0, 5) !== \"data:\" && real_revoke_object_URL) {                                          // 288\n        real_revoke_object_URL.call(real_URL, object_URL);                                                             // 289\n      }                                                                                                                // 290\n    };                                                                                                                 // 291\n    FBB_proto.append = function(data/*, endings*/) {                                                                   // 292\n      var bb = this.data;                                                                                              // 293\n      // decode data to a binary string                                                                                // 294\n      if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {                                 // 295\n        var                                                                                                            // 296\n            str = \"\"                                                                                                   // 297\n          , buf = new Uint8Array(data)                                                                                 // 298\n          , i = 0                                                                                                      // 299\n          , buf_len = buf.length                                                                                       // 300\n        ;                                                                                                              // 301\n        for (; i < buf_len; i++) {                                                                                     // 302\n          str += String.fromCharCode(buf[i]);                                                                          // 303\n        }                                                                                                              // 304\n        bb.push(str);                                                                                                  // 305\n      } else if (get_class(data) === \"Blob\" || get_class(data) === \"File\") {                                           // 306\n        if (FileReaderSync) {                                                                                          // 307\n          var fr = new FileReaderSync;                                                                                 // 308\n          bb.push(fr.readAsBinaryString(data));                                                                        // 309\n        } else {                                                                                                       // 310\n          // async FileReader won't work as BlobBuilder is sync                                                        // 311\n          throw new FileException(\"NOT_READABLE_ERR\");                                                                 // 312\n        }                                                                                                              // 313\n      } else if (data instanceof FakeBlob) {                                                                           // 314\n        if (data.encoding === \"base64\" && atob) {                                                                      // 315\n          bb.push(atob(data.data));                                                                                    // 316\n        } else if (data.encoding === \"URI\") {                                                                          // 317\n          bb.push(decodeURIComponent(data.data));                                                                      // 318\n        } else if (data.encoding === \"raw\") {                                                                          // 319\n          bb.push(data.data);                                                                                          // 320\n        }                                                                                                              // 321\n      } else {                                                                                                         // 322\n        if (typeof data !== \"string\") {                                                                                // 323\n          data += \"\"; // convert unsupported types to strings                                                          // 324\n        }                                                                                                              // 325\n        // decode UTF-16 to binary string                                                                              // 326\n        bb.push(unescape(encodeURIComponent(data)));                                                                   // 327\n      }                                                                                                                // 328\n    };                                                                                                                 // 329\n    FBB_proto.getBlob = function(type) {                                                                               // 330\n      if (!arguments.length) {                                                                                         // 331\n        type = null;                                                                                                   // 332\n      }                                                                                                                // 333\n      return new FakeBlob(this.data.join(\"\"), type, \"raw\");                                                            // 334\n    };                                                                                                                 // 335\n    FBB_proto.toString = function() {                                                                                  // 336\n      return \"[object BlobBuilder]\";                                                                                   // 337\n    };                                                                                                                 // 338\n    FB_proto.slice = function(start, end, type) {                                                                      // 339\n      var args = arguments.length;                                                                                     // 340\n      if (args < 3) {                                                                                                  // 341\n        type = null;                                                                                                   // 342\n      }                                                                                                                // 343\n      return new FakeBlob(                                                                                             // 344\n          this.data.slice(start, args > 1 ? end : this.data.length)                                                    // 345\n        , type                                                                                                         // 346\n        , this.encoding                                                                                                // 347\n      );                                                                                                               // 348\n    };                                                                                                                 // 349\n    FB_proto.toString = function() {                                                                                   // 350\n      return \"[object Blob]\";                                                                                          // 351\n    };                                                                                                                 // 352\n    FB_proto.close = function() {                                                                                      // 353\n      this.size = 0;                                                                                                   // 354\n      delete this.data;                                                                                                // 355\n    };                                                                                                                 // 356\n    return FakeBlobBuilder;                                                                                            // 357\n  }(view));                                                                                                            // 358\n                                                                                                                       // 359\n  view.Blob = function(blobParts, options) {                                                                           // 360\n    var type = options ? (options.type || \"\") : \"\";                                                                    // 361\n    var builder = new BlobBuilder();                                                                                   // 362\n    if (blobParts) {                                                                                                   // 363\n      for (var i = 0, len = blobParts.length; i < len; i++) {                                                          // 364\n        if (Uint8Array && blobParts[i] instanceof Uint8Array) {                                                        // 365\n          builder.append(blobParts[i].buffer);                                                                         // 366\n        }                                                                                                              // 367\n        else {                                                                                                         // 368\n          builder.append(blobParts[i]);                                                                                // 369\n        }                                                                                                              // 370\n      }                                                                                                                // 371\n    }                                                                                                                  // 372\n    var blob = builder.getBlob(type);                                                                                  // 373\n    if (!blob.slice && blob.webkitSlice) {                                                                             // 374\n      blob.slice = blob.webkitSlice;                                                                                   // 375\n    }                                                                                                                  // 376\n    return blob;                                                                                                       // 377\n  };                                                                                                                   // 378\n                                                                                                                       // 379\n  var getPrototypeOf = Object.getPrototypeOf || function(object) {                                                     // 380\n    return object.__proto__;                                                                                           // 381\n  };                                                                                                                   // 382\n  view.Blob.prototype = getPrototypeOf(new view.Blob());                                                               // 383\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this));            // 384\n                                                                                                                       // 385\n(function (root, factory) {                                                                                            // 386\n    'use strict';                                                                                                      // 387\n    if (typeof module === 'object') {                                                                                  // 388\n        module.exports = factory;                                                                                      // 389\n    } else if (typeof define === 'function' && define.amd) {                                                           // 390\n        define(function () {                                                                                           // 391\n            return factory;                                                                                            // 392\n        });                                                                                                            // 393\n    } else {                                                                                                           // 394\n        root.MediumEditor = factory;                                                                                   // 395\n    }                                                                                                                  // 396\n}(this, function () {                                                                                                  // 397\n                                                                                                                       // 398\n    'use strict';                                                                                                      // 399\n                                                                                                                       // 400\nvar Util;                                                                                                              // 401\n                                                                                                                       // 402\n(function (window) {                                                                                                   // 403\n    'use strict';                                                                                                      // 404\n                                                                                                                       // 405\n    function copyInto(overwrite, dest) {                                                                               // 406\n        var prop,                                                                                                      // 407\n            sources = Array.prototype.slice.call(arguments, 2);                                                        // 408\n        dest = dest || {};                                                                                             // 409\n        for (var i = 0; i < sources.length; i++) {                                                                     // 410\n            var source = sources[i];                                                                                   // 411\n            if (source) {                                                                                              // 412\n                for (prop in source) {                                                                                 // 413\n                    if (source.hasOwnProperty(prop) &&                                                                 // 414\n                        typeof source[prop] !== 'undefined' &&                                                         // 415\n                        (overwrite || dest.hasOwnProperty(prop) === false)) {                                          // 416\n                        dest[prop] = source[prop];                                                                     // 417\n                    }                                                                                                  // 418\n                }                                                                                                      // 419\n            }                                                                                                          // 420\n        }                                                                                                              // 421\n        return dest;                                                                                                   // 422\n    }                                                                                                                  // 423\n                                                                                                                       // 424\n    Util = {                                                                                                           // 425\n                                                                                                                       // 426\n        // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562                     // 427\n        // by rg89                                                                                                     // 428\n        isIE: ((navigator.appName === 'Microsoft Internet Explorer') || ((navigator.appName === 'Netscape') && (new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})').exec(navigator.userAgent) !== null))),\n                                                                                                                       // 430\n        // http://stackoverflow.com/a/11752084/569101                                                                  // 431\n        isMac: (window.navigator.platform.toUpperCase().indexOf('MAC') >= 0),                                          // 432\n                                                                                                                       // 433\n        // https://github.com/jashkenas/underscore                                                                     // 434\n        keyCode: {                                                                                                     // 435\n            BACKSPACE: 8,                                                                                              // 436\n            TAB: 9,                                                                                                    // 437\n            ENTER: 13,                                                                                                 // 438\n            ESCAPE: 27,                                                                                                // 439\n            SPACE: 32,                                                                                                 // 440\n            DELETE: 46,                                                                                                // 441\n            K: 75 // K keycode, and not k                                                                              // 442\n        },                                                                                                             // 443\n                                                                                                                       // 444\n        /**                                                                                                            // 445\n         * Returns true if it's metaKey on Mac, or ctrlKey on non-Mac.                                                 // 446\n         * See #591                                                                                                    // 447\n         */                                                                                                            // 448\n        isMetaCtrlKey: function (event) {                                                                              // 449\n            if ((this.isMac && event.metaKey) || (!this.isMac && event.ctrlKey)) {                                     // 450\n                return true;                                                                                           // 451\n            }                                                                                                          // 452\n                                                                                                                       // 453\n            return false;                                                                                              // 454\n        },                                                                                                             // 455\n                                                                                                                       // 456\n        /**                                                                                                            // 457\n         * Returns true if the key associated to the event is inside keys array                                        // 458\n         *                                                                                                             // 459\n         * @see : https://github.com/jquery/jquery/blob/0705be475092aede1eddae01319ec931fb9c65fc/src/event.js#L473-L484\n         * @see : http://stackoverflow.com/q/4471582/569101                                                            // 461\n         */                                                                                                            // 462\n        isKey: function (event, keys) {                                                                                // 463\n            var keyCode = this.getKeyCode(event);                                                                      // 464\n                                                                                                                       // 465\n            // it's not an array let's just compare strings!                                                           // 466\n            if (false === Array.isArray(keys)) {                                                                       // 467\n                return keyCode === keys;                                                                               // 468\n            }                                                                                                          // 469\n                                                                                                                       // 470\n            if (-1 === keys.indexOf(keyCode)) {                                                                        // 471\n                return false;                                                                                          // 472\n            }                                                                                                          // 473\n                                                                                                                       // 474\n            return true;                                                                                               // 475\n        },                                                                                                             // 476\n                                                                                                                       // 477\n        getKeyCode: function (event) {                                                                                 // 478\n            var keyCode = event.which;                                                                                 // 479\n                                                                                                                       // 480\n            // getting the key code from event                                                                         // 481\n            if (null === keyCode) {                                                                                    // 482\n                keyCode = event.charCode !== null ? event.charCode : event.keyCode;                                    // 483\n            }                                                                                                          // 484\n                                                                                                                       // 485\n            return keyCode;                                                                                            // 486\n        },                                                                                                             // 487\n                                                                                                                       // 488\n        blockContainerElementNames: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre'],                    // 489\n        emptyElementNames: ['br', 'col', 'colgroup', 'hr', 'img', 'input', 'source', 'wbr'],                           // 490\n                                                                                                                       // 491\n        extend: function extend(/* dest, source1, source2, ...*/) {                                                    // 492\n            var args = [true].concat(Array.prototype.slice.call(arguments));                                           // 493\n            return copyInto.apply(this, args);                                                                         // 494\n        },                                                                                                             // 495\n                                                                                                                       // 496\n        defaults: function defaults(/*dest, source1, source2, ...*/) {                                                 // 497\n            var args = [false].concat(Array.prototype.slice.call(arguments));                                          // 498\n            return copyInto.apply(this, args);                                                                         // 499\n        },                                                                                                             // 500\n                                                                                                                       // 501\n        /*                                                                                                             // 502\n         * Create a link around the provided text nodes which must be adjacent to each other and all be                // 503\n         * descendants of the same closest block container. If the preconditions are not met, unexpected               // 504\n         * behavior will result.                                                                                       // 505\n         */                                                                                                            // 506\n        createLink: function (document, textNodes, href) {                                                             // 507\n            var anchor = document.createElement('a');                                                                  // 508\n            Util.moveTextRangeIntoElement(textNodes[0], textNodes[textNodes.length - 1], anchor);                      // 509\n            anchor.setAttribute('href', href);                                                                         // 510\n            return anchor;                                                                                             // 511\n        },                                                                                                             // 512\n                                                                                                                       // 513\n        /*                                                                                                             // 514\n         * Given the provided match in the format {start: 1, end: 2} where start and end are indices into the          // 515\n         * textContent of the provided element argument, modify the DOM inside element to ensure that the text         // 516\n         * identified by the provided match can be returned as text nodes that contain exactly that text, without      // 517\n         * any additional text at the beginning or end of the returned array of adjacent text nodes.                   // 518\n         *                                                                                                             // 519\n         * The only DOM manipulation performed by this function is splitting the text nodes, non-text nodes are        // 520\n         * not affected in any way.                                                                                    // 521\n         */                                                                                                            // 522\n        findOrCreateMatchingTextNodes: function (document, element, match) {                                           // 523\n            var treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null, false),                    // 524\n                matchedNodes = [],                                                                                     // 525\n                currentTextIndex = 0,                                                                                  // 526\n                startReached = false,                                                                                  // 527\n                currentNode = null,                                                                                    // 528\n                newNode = null;                                                                                        // 529\n                                                                                                                       // 530\n            while ((currentNode = treeWalker.nextNode()) !== null) {                                                   // 531\n                if (!startReached && match.start < (currentTextIndex + currentNode.nodeValue.length)) {                // 532\n                    startReached = true;                                                                               // 533\n                    newNode = Util.splitStartNodeIfNeeded(currentNode, match.start, currentTextIndex);                 // 534\n                }                                                                                                      // 535\n                if (startReached) {                                                                                    // 536\n                    Util.splitEndNodeIfNeeded(currentNode, newNode, match.end, currentTextIndex);                      // 537\n                }                                                                                                      // 538\n                if (startReached && currentTextIndex === match.end) {                                                  // 539\n                    break; // Found the node(s) corresponding to the link. Break out and move on to the next.          // 540\n                } else if (startReached && currentTextIndex > (match.end + 1)) {                                       // 541\n                    throw new Error('PerformLinking overshot the target!'); // should never happen...                  // 542\n                }                                                                                                      // 543\n                                                                                                                       // 544\n                if (startReached) {                                                                                    // 545\n                    matchedNodes.push(newNode || currentNode);                                                         // 546\n                }                                                                                                      // 547\n                                                                                                                       // 548\n                currentTextIndex += currentNode.nodeValue.length;                                                      // 549\n                if (newNode !== null) {                                                                                // 550\n                    currentTextIndex += newNode.nodeValue.length;                                                      // 551\n                    // Skip the newNode as we'll already have pushed it to the matches                                 // 552\n                    treeWalker.nextNode();                                                                             // 553\n                }                                                                                                      // 554\n                newNode = null;                                                                                        // 555\n            }                                                                                                          // 556\n            return matchedNodes;                                                                                       // 557\n        },                                                                                                             // 558\n                                                                                                                       // 559\n        /*                                                                                                             // 560\n         * Given the provided text node and text coordinates, split the text node if needed to make it align           // 561\n         * precisely with the coordinates.                                                                             // 562\n         *                                                                                                             // 563\n         * This function is intended to be called from Util.findOrCreateMatchingTextNodes.                             // 564\n         */                                                                                                            // 565\n        splitStartNodeIfNeeded: function (currentNode, matchStartIndex, currentTextIndex) {                            // 566\n            if (matchStartIndex !== currentTextIndex) {                                                                // 567\n                return currentNode.splitText(matchStartIndex - currentTextIndex);                                      // 568\n            }                                                                                                          // 569\n            return null;                                                                                               // 570\n        },                                                                                                             // 571\n                                                                                                                       // 572\n        /*                                                                                                             // 573\n         * Given the provided text node and text coordinates, split the text node if needed to make it align           // 574\n         * precisely with the coordinates. The newNode argument should from the result of Util.splitStartNodeIfNeeded, // 575\n         * if that function has been called on the same currentNode.                                                   // 576\n         *                                                                                                             // 577\n         * This function is intended to be called from Util.findOrCreateMatchingTextNodes.                             // 578\n         */                                                                                                            // 579\n        splitEndNodeIfNeeded: function (currentNode, newNode, matchEndIndex, currentTextIndex) {                       // 580\n            var textIndexOfEndOfFarthestNode,                                                                          // 581\n                endSplitPoint;                                                                                         // 582\n            textIndexOfEndOfFarthestNode = currentTextIndex + (newNode || currentNode).nodeValue.length +              // 583\n                    (newNode ? currentNode.nodeValue.length : 0) -                                                     // 584\n                    1;                                                                                                 // 585\n            endSplitPoint = (newNode || currentNode).nodeValue.length -                                                // 586\n                    (textIndexOfEndOfFarthestNode + 1 - matchEndIndex);                                                // 587\n            if (textIndexOfEndOfFarthestNode >= matchEndIndex &&                                                       // 588\n                    currentTextIndex !== textIndexOfEndOfFarthestNode &&                                               // 589\n                    endSplitPoint !== 0) {                                                                             // 590\n                (newNode || currentNode).splitText(endSplitPoint);                                                     // 591\n            }                                                                                                          // 592\n        },                                                                                                             // 593\n                                                                                                                       // 594\n        // Find the next node in the DOM tree that represents any text that is being                                   // 595\n        // displayed directly next to the targetNode (passed as an argument)                                           // 596\n        // Text that appears directly next to the current node can be:                                                 // 597\n        //  - A sibling text node                                                                                      // 598\n        //  - A descendant of a sibling element                                                                        // 599\n        //  - A sibling text node of an ancestor                                                                       // 600\n        //  - A descendant of a sibling element of an ancestor                                                         // 601\n        findAdjacentTextNodeWithContent: function findAdjacentTextNodeWithContent(rootNode, targetNode, ownerDocument) {\n            var pastTarget = false,                                                                                    // 603\n                nextNode,                                                                                              // 604\n                nodeIterator = ownerDocument.createNodeIterator(rootNode, NodeFilter.SHOW_TEXT, null, false);          // 605\n                                                                                                                       // 606\n            // Use a native NodeIterator to iterate over all the text nodes that are descendants                       // 607\n            // of the rootNode.  Once past the targetNode, choose the first non-empty text node                        // 608\n            nextNode = nodeIterator.nextNode();                                                                        // 609\n            while (nextNode) {                                                                                         // 610\n                if (nextNode === targetNode) {                                                                         // 611\n                    pastTarget = true;                                                                                 // 612\n                } else if (pastTarget) {                                                                               // 613\n                    if (nextNode.nodeType === 3 && nextNode.nodeValue && nextNode.nodeValue.trim().length > 0) {       // 614\n                        break;                                                                                         // 615\n                    }                                                                                                  // 616\n                }                                                                                                      // 617\n                nextNode = nodeIterator.nextNode();                                                                    // 618\n            }                                                                                                          // 619\n                                                                                                                       // 620\n            return nextNode;                                                                                           // 621\n        },                                                                                                             // 622\n                                                                                                                       // 623\n        isDescendant: function isDescendant(parent, child, checkEquality) {                                            // 624\n            if (!parent || !child) {                                                                                   // 625\n                return false;                                                                                          // 626\n            }                                                                                                          // 627\n            if (checkEquality && parent === child) {                                                                   // 628\n                return true;                                                                                           // 629\n            }                                                                                                          // 630\n            var node = child.parentNode;                                                                               // 631\n            while (node !== null) {                                                                                    // 632\n                if (node === parent) {                                                                                 // 633\n                    return true;                                                                                       // 634\n                }                                                                                                      // 635\n                node = node.parentNode;                                                                                // 636\n            }                                                                                                          // 637\n            return false;                                                                                              // 638\n        },                                                                                                             // 639\n                                                                                                                       // 640\n        // https://github.com/jashkenas/underscore                                                                     // 641\n        isElement: function isElement(obj) {                                                                           // 642\n            return !!(obj && obj.nodeType === 1);                                                                      // 643\n        },                                                                                                             // 644\n                                                                                                                       // 645\n        // https://github.com/jashkenas/underscore                                                                     // 646\n        throttle: function (func, wait) {                                                                              // 647\n            var THROTTLE_INTERVAL = 50,                                                                                // 648\n                context,                                                                                               // 649\n                args,                                                                                                  // 650\n                result,                                                                                                // 651\n                timeout = null,                                                                                        // 652\n                previous = 0,                                                                                          // 653\n                later = function () {                                                                                  // 654\n                    previous = Date.now();                                                                             // 655\n                    timeout = null;                                                                                    // 656\n                    result = func.apply(context, args);                                                                // 657\n                    if (!timeout) {                                                                                    // 658\n                        context = args = null;                                                                         // 659\n                    }                                                                                                  // 660\n                };                                                                                                     // 661\n                                                                                                                       // 662\n            if (!wait && wait !== 0) {                                                                                 // 663\n                wait = THROTTLE_INTERVAL;                                                                              // 664\n            }                                                                                                          // 665\n                                                                                                                       // 666\n            return function () {                                                                                       // 667\n                var now = Date.now(),                                                                                  // 668\n                    remaining = wait - (now - previous);                                                               // 669\n                                                                                                                       // 670\n                context = this;                                                                                        // 671\n                args = arguments;                                                                                      // 672\n                if (remaining <= 0 || remaining > wait) {                                                              // 673\n                    if (timeout) {                                                                                     // 674\n                        clearTimeout(timeout);                                                                         // 675\n                        timeout = null;                                                                                // 676\n                    }                                                                                                  // 677\n                    previous = now;                                                                                    // 678\n                    result = func.apply(context, args);                                                                // 679\n                    if (!timeout) {                                                                                    // 680\n                        context = args = null;                                                                         // 681\n                    }                                                                                                  // 682\n                } else if (!timeout) {                                                                                 // 683\n                    timeout = setTimeout(later, remaining);                                                            // 684\n                }                                                                                                      // 685\n                return result;                                                                                         // 686\n            };                                                                                                         // 687\n        },                                                                                                             // 688\n                                                                                                                       // 689\n        traverseUp: function (current, testElementFunction) {                                                          // 690\n            if (!current) {                                                                                            // 691\n                return false;                                                                                          // 692\n            }                                                                                                          // 693\n                                                                                                                       // 694\n            do {                                                                                                       // 695\n                if (current.nodeType === 1) {                                                                          // 696\n                    if (testElementFunction(current)) {                                                                // 697\n                        return current;                                                                                // 698\n                    }                                                                                                  // 699\n                    // do not traverse upwards past the nearest containing editor                                      // 700\n                    if (Util.isMediumEditorElement(current)) {                                                         // 701\n                        return false;                                                                                  // 702\n                    }                                                                                                  // 703\n                }                                                                                                      // 704\n                                                                                                                       // 705\n                current = current.parentNode;                                                                          // 706\n            } while (current);                                                                                         // 707\n                                                                                                                       // 708\n            return false;                                                                                              // 709\n        },                                                                                                             // 710\n                                                                                                                       // 711\n        htmlEntities: function (str) {                                                                                 // 712\n            // converts special characters (like <) into their escaped/encoded values (like &lt;).                     // 713\n            // This allows you to show to display the string without the browser reading it as HTML.                   // 714\n            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n        },                                                                                                             // 716\n                                                                                                                       // 717\n        // http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div                    // 718\n        insertHTMLCommand: function (doc, html) {                                                                      // 719\n            var selection, range, el, fragment, node, lastNode, toReplace;                                             // 720\n                                                                                                                       // 721\n            if (doc.queryCommandSupported('insertHTML')) {                                                             // 722\n                try {                                                                                                  // 723\n                    return doc.execCommand('insertHTML', false, html);                                                 // 724\n                } catch (ignore) {}                                                                                    // 725\n            }                                                                                                          // 726\n                                                                                                                       // 727\n            selection = doc.defaultView.getSelection();                                                                // 728\n            if (selection.getRangeAt && selection.rangeCount) {                                                        // 729\n                range = selection.getRangeAt(0);                                                                       // 730\n                toReplace = range.commonAncestorContainer;                                                             // 731\n                // Ensure range covers maximum amount of nodes as possible                                             // 732\n                // By moving up the DOM and selecting ancestors whose only child is the range                          // 733\n                if ((toReplace.nodeType === 3 && toReplace.nodeValue === range.toString()) ||                          // 734\n                        (toReplace.nodeType !== 3 && toReplace.innerHTML === range.toString())) {                      // 735\n                    while (toReplace.parentNode &&                                                                     // 736\n                            toReplace.parentNode.childNodes.length === 1 &&                                            // 737\n                            !Util.isMediumEditorElement(toReplace.parentNode)) {                                       // 738\n                        toReplace = toReplace.parentNode;                                                              // 739\n                    }                                                                                                  // 740\n                    range.selectNode(toReplace);                                                                       // 741\n                }                                                                                                      // 742\n                range.deleteContents();                                                                                // 743\n                                                                                                                       // 744\n                el = doc.createElement('div');                                                                         // 745\n                el.innerHTML = html;                                                                                   // 746\n                fragment = doc.createDocumentFragment();                                                               // 747\n                while (el.firstChild) {                                                                                // 748\n                    node = el.firstChild;                                                                              // 749\n                    lastNode = fragment.appendChild(node);                                                             // 750\n                }                                                                                                      // 751\n                range.insertNode(fragment);                                                                            // 752\n                                                                                                                       // 753\n                // Preserve the selection:                                                                             // 754\n                if (lastNode) {                                                                                        // 755\n                    range = range.cloneRange();                                                                        // 756\n                    range.setStartAfter(lastNode);                                                                     // 757\n                    range.collapse(true);                                                                              // 758\n                    selection.removeAllRanges();                                                                       // 759\n                    selection.addRange(range);                                                                         // 760\n                }                                                                                                      // 761\n            }                                                                                                          // 762\n        },                                                                                                             // 763\n                                                                                                                       // 764\n        execFormatBlock: function (doc, tagName) {                                                                     // 765\n            // Get the top level block element that contains the selection                                             // 766\n            var blockContainer = Util.getTopBlockContainer(Selection.getSelectionStart(doc));                          // 767\n                                                                                                                       // 768\n            // Special handling for blockquote                                                                         // 769\n            if (tagName === 'blockquote') {                                                                            // 770\n                if (blockContainer) {                                                                                  // 771\n                    var childNodes = Array.prototype.slice.call(blockContainer.childNodes);                            // 772\n                    // Check if the blockquote has a block element as a child (nested blocks)                          // 773\n                    if (childNodes.some(function (childNode) {                                                         // 774\n                        return Util.isBlockContainer(childNode);                                                       // 775\n                    })) {                                                                                              // 776\n                        // FF handles blockquote differently on formatBlock                                            // 777\n                        // allowing nesting, we need to use outdent                                                    // 778\n                        // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla                       // 779\n                        return doc.execCommand('outdent', false, null);                                                // 780\n                    }                                                                                                  // 781\n                }                                                                                                      // 782\n                                                                                                                       // 783\n                // When IE blockquote needs to be called as indent                                                     // 784\n                // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n                if (this.isIE) {                                                                                       // 786\n                    return doc.execCommand('indent', false, tagName);                                                  // 787\n                }                                                                                                      // 788\n            }                                                                                                          // 789\n                                                                                                                       // 790\n            // If the blockContainer is already the element type being passed in                                       // 791\n            // treat it as 'undo' formatting and just convert it to a <p>                                              // 792\n            if (blockContainer && tagName === blockContainer.nodeName.toLowerCase()) {                                 // 793\n                tagName = 'p';                                                                                         // 794\n            }                                                                                                          // 795\n                                                                                                                       // 796\n            // When IE we need to add <> to heading elements                                                           // 797\n            // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie                      // 798\n            if (this.isIE) {                                                                                           // 799\n                tagName = '<' + tagName + '>';                                                                         // 800\n            }                                                                                                          // 801\n            return doc.execCommand('formatBlock', false, tagName);                                                     // 802\n        },                                                                                                             // 803\n                                                                                                                       // 804\n        /**                                                                                                            // 805\n         * Set target to blank on the given el element                                                                 // 806\n         *                                                                                                             // 807\n         * TODO: not sure if this should be here                                                                       // 808\n         *                                                                                                             // 809\n         * When creating a link (using core -> createLink) the selection returned by Firefox will be the parent of the created link\n         * instead of the created link itself (as it is for Chrome for example), so we retrieve all \"a\" children to grab the good one by\n         * using `anchorUrl` to ensure that we are adding target=\"_blank\" on the good one.                             // 812\n         * This isn't a bulletproof solution anyway ..                                                                 // 813\n         */                                                                                                            // 814\n        setTargetBlank: function (el, anchorUrl) {                                                                     // 815\n            var i, url = anchorUrl || false;                                                                           // 816\n            if (el.nodeName.toLowerCase() === 'a') {                                                                   // 817\n                el.target = '_blank';                                                                                  // 818\n            } else {                                                                                                   // 819\n                el = el.getElementsByTagName('a');                                                                     // 820\n                                                                                                                       // 821\n                for (i = 0; i < el.length; i += 1) {                                                                   // 822\n                    if (false === url || url === el[i].attributes.href.value) {                                        // 823\n                        el[i].target = '_blank';                                                                       // 824\n                    }                                                                                                  // 825\n                }                                                                                                      // 826\n            }                                                                                                          // 827\n        },                                                                                                             // 828\n                                                                                                                       // 829\n        addClassToAnchors: function (el, buttonClass) {                                                                // 830\n            var classes = buttonClass.split(' '),                                                                      // 831\n                i,                                                                                                     // 832\n                j;                                                                                                     // 833\n            if (el.nodeName.toLowerCase() === 'a') {                                                                   // 834\n                for (j = 0; j < classes.length; j += 1) {                                                              // 835\n                    el.classList.add(classes[j]);                                                                      // 836\n                }                                                                                                      // 837\n            } else {                                                                                                   // 838\n                el = el.getElementsByTagName('a');                                                                     // 839\n                for (i = 0; i < el.length; i += 1) {                                                                   // 840\n                    for (j = 0; j < classes.length; j += 1) {                                                          // 841\n                        el[i].classList.add(classes[j]);                                                               // 842\n                    }                                                                                                  // 843\n                }                                                                                                      // 844\n            }                                                                                                          // 845\n        },                                                                                                             // 846\n                                                                                                                       // 847\n        isListItem: function (node) {                                                                                  // 848\n            if (!node) {                                                                                               // 849\n                return false;                                                                                          // 850\n            }                                                                                                          // 851\n            if (node.nodeName.toLowerCase() === 'li') {                                                                // 852\n                return true;                                                                                           // 853\n            }                                                                                                          // 854\n                                                                                                                       // 855\n            var parentNode = node.parentNode,                                                                          // 856\n                tagName = parentNode.nodeName.toLowerCase();                                                           // 857\n            while (!this.isBlockContainer(parentNode) && tagName !== 'div') {                                          // 858\n                if (tagName === 'li') {                                                                                // 859\n                    return true;                                                                                       // 860\n                }                                                                                                      // 861\n                parentNode = parentNode.parentNode;                                                                    // 862\n                if (parentNode) {                                                                                      // 863\n                    tagName = parentNode.nodeName.toLowerCase();                                                       // 864\n                } else {                                                                                               // 865\n                    return false;                                                                                      // 866\n                }                                                                                                      // 867\n            }                                                                                                          // 868\n            return false;                                                                                              // 869\n        },                                                                                                             // 870\n                                                                                                                       // 871\n        cleanListDOM: function (ownerDocument, element) {                                                              // 872\n            if (element.nodeName.toLowerCase() !== 'li') {                                                             // 873\n                return;                                                                                                // 874\n            }                                                                                                          // 875\n                                                                                                                       // 876\n            var list = element.parentElement;                                                                          // 877\n                                                                                                                       // 878\n            if (list.parentElement.nodeName.toLowerCase() === 'p') { // yes we need to clean up                        // 879\n                this.unwrap(list.parentElement, ownerDocument);                                                        // 880\n                                                                                                                       // 881\n                // move cursor at the end of the text inside the list                                                  // 882\n                // for some unknown reason, the cursor is moved to end of the \"visual\" line                            // 883\n                Selection.moveCursor(ownerDocument, element.firstChild, element.firstChild.textContent.length);        // 884\n            }                                                                                                          // 885\n        },                                                                                                             // 886\n                                                                                                                       // 887\n        /* splitDOMTree                                                                                                // 888\n         *                                                                                                             // 889\n         * Given a root element some descendant element, split the root element                                        // 890\n         * into its own element containing the descendant element and all elements                                     // 891\n         * on the left or right side of the descendant ('right' is default)                                            // 892\n         *                                                                                                             // 893\n         * example:                                                                                                    // 894\n         *                                                                                                             // 895\n         *         <div>                                                                                               // 896\n         *      /    |   \\\n         *  <span> <span> <span>                                                                                       // 898\n         *   / \\    / \\    / \\\n         *  1   2  3   4  5   6                                                                                        // 900\n         *                                                                                                             // 901\n         *  If I wanted to split this tree given the <div> as the root and \"4\" as the leaf                             // 902\n         *  the result would be (the prime ' marks indicates nodes that are created as clones):                        // 903\n         *                                                                                                             // 904\n         *   SPLITTING OFF 'RIGHT' TREE       SPLITTING OFF 'LEFT' TREE                                                // 905\n         *                                                                                                             // 906\n         *     <div>            <div>'              <div>'      <div>                                                  // 907\n         *      / \\              / \\                 / \\          |                                                    // 908\n         * <span> <span>   <span>' <span>       <span> <span>   <span>                                                 // 909\n         *   / \\    |        |      / \\           /\\     /\\       /\\\n         *  1   2   3        4     5   6         1  2   3  4     5  6                                                  // 911\n         *                                                                                                             // 912\n         *  The above example represents splitting off the 'right' or 'left' part of a tree, where                     // 913\n         *  the <div>' would be returned as an element not appended to the DOM, and the <div>                          // 914\n         *  would remain in place where it was                                                                         // 915\n         *                                                                                                             // 916\n        */                                                                                                             // 917\n        splitOffDOMTree: function (rootNode, leafNode, splitLeft) {                                                    // 918\n            var splitOnNode = leafNode,                                                                                // 919\n                createdNode = null,                                                                                    // 920\n                splitRight = !splitLeft;                                                                               // 921\n                                                                                                                       // 922\n            // loop until we hit the root                                                                              // 923\n            while (splitOnNode !== rootNode) {                                                                         // 924\n                var currParent = splitOnNode.parentNode,                                                               // 925\n                    newParent = currParent.cloneNode(false),                                                           // 926\n                    targetNode = (splitRight ? splitOnNode : currParent.firstChild),                                   // 927\n                    appendLast;                                                                                        // 928\n                                                                                                                       // 929\n                // Create a new parent element which is a clone of the current parent                                  // 930\n                if (createdNode) {                                                                                     // 931\n                    if (splitRight) {                                                                                  // 932\n                        // If we're splitting right, add previous created element before siblings                      // 933\n                        newParent.appendChild(createdNode);                                                            // 934\n                    } else {                                                                                           // 935\n                        // If we're splitting left, add previous created element last                                  // 936\n                        appendLast = createdNode;                                                                      // 937\n                    }                                                                                                  // 938\n                }                                                                                                      // 939\n                createdNode = newParent;                                                                               // 940\n                                                                                                                       // 941\n                while (targetNode) {                                                                                   // 942\n                    var sibling = targetNode.nextSibling;                                                              // 943\n                    // Special handling for the 'splitNode'                                                            // 944\n                    if (targetNode === splitOnNode) {                                                                  // 945\n                        if (!targetNode.hasChildNodes()) {                                                             // 946\n                            targetNode.parentNode.removeChild(targetNode);                                             // 947\n                        } else {                                                                                       // 948\n                            // For the node we're splitting on, if it has children, we need to clone it                // 949\n                            // and not just move it                                                                    // 950\n                            targetNode = targetNode.cloneNode(false);                                                  // 951\n                        }                                                                                              // 952\n                        // If the resulting split node has content, add it                                             // 953\n                        if (targetNode.textContent) {                                                                  // 954\n                            createdNode.appendChild(targetNode);                                                       // 955\n                        }                                                                                              // 956\n                                                                                                                       // 957\n                        targetNode = (splitRight ? sibling : null);                                                    // 958\n                    } else {                                                                                           // 959\n                        // For general case, just remove the element and only                                          // 960\n                        // add it to the split tree if it contains something                                           // 961\n                        targetNode.parentNode.removeChild(targetNode);                                                 // 962\n                        if (targetNode.hasChildNodes() || targetNode.textContent) {                                    // 963\n                            createdNode.appendChild(targetNode);                                                       // 964\n                        }                                                                                              // 965\n                                                                                                                       // 966\n                        targetNode = sibling;                                                                          // 967\n                    }                                                                                                  // 968\n                }                                                                                                      // 969\n                                                                                                                       // 970\n                // If we had an element we wanted to append at the end, do that now                                    // 971\n                if (appendLast) {                                                                                      // 972\n                    createdNode.appendChild(appendLast);                                                               // 973\n                }                                                                                                      // 974\n                                                                                                                       // 975\n                splitOnNode = currParent;                                                                              // 976\n            }                                                                                                          // 977\n                                                                                                                       // 978\n            return createdNode;                                                                                        // 979\n        },                                                                                                             // 980\n                                                                                                                       // 981\n        moveTextRangeIntoElement: function (startNode, endNode, newElement) {                                          // 982\n            if (!startNode || !endNode) {                                                                              // 983\n                return false;                                                                                          // 984\n            }                                                                                                          // 985\n                                                                                                                       // 986\n            var rootNode = this.findCommonRoot(startNode, endNode);                                                    // 987\n            if (!rootNode) {                                                                                           // 988\n                return false;                                                                                          // 989\n            }                                                                                                          // 990\n                                                                                                                       // 991\n            if (endNode === startNode) {                                                                               // 992\n                var temp = startNode.parentNode,                                                                       // 993\n                    sibling = startNode.nextSibling;                                                                   // 994\n                temp.removeChild(startNode);                                                                           // 995\n                newElement.appendChild(startNode);                                                                     // 996\n                if (sibling) {                                                                                         // 997\n                    temp.insertBefore(newElement, sibling);                                                            // 998\n                } else {                                                                                               // 999\n                    temp.appendChild(newElement);                                                                      // 1000\n                }                                                                                                      // 1001\n                return newElement.hasChildNodes();                                                                     // 1002\n            }                                                                                                          // 1003\n                                                                                                                       // 1004\n            // create rootChildren array which includes all the children                                               // 1005\n            // we care about                                                                                           // 1006\n            var rootChildren = [],                                                                                     // 1007\n                firstChild,                                                                                            // 1008\n                lastChild,                                                                                             // 1009\n                nextNode;                                                                                              // 1010\n            for (var i = 0; i < rootNode.childNodes.length; i++) {                                                     // 1011\n                nextNode = rootNode.childNodes[i];                                                                     // 1012\n                if (!firstChild) {                                                                                     // 1013\n                    if (this.isDescendant(nextNode, startNode, true)) {                                                // 1014\n                        firstChild = nextNode;                                                                         // 1015\n                    }                                                                                                  // 1016\n                } else {                                                                                               // 1017\n                    if (this.isDescendant(nextNode, endNode, true)) {                                                  // 1018\n                        lastChild = nextNode;                                                                          // 1019\n                        break;                                                                                         // 1020\n                    } else {                                                                                           // 1021\n                        rootChildren.push(nextNode);                                                                   // 1022\n                    }                                                                                                  // 1023\n                }                                                                                                      // 1024\n            }                                                                                                          // 1025\n                                                                                                                       // 1026\n            var afterLast = lastChild.nextSibling,                                                                     // 1027\n                fragment = rootNode.ownerDocument.createDocumentFragment();                                            // 1028\n                                                                                                                       // 1029\n            // build up fragment on startNode side of tree                                                             // 1030\n            if (firstChild === startNode) {                                                                            // 1031\n                firstChild.parentNode.removeChild(firstChild);                                                         // 1032\n                fragment.appendChild(firstChild);                                                                      // 1033\n            } else {                                                                                                   // 1034\n                fragment.appendChild(this.splitOffDOMTree(firstChild, startNode));                                     // 1035\n            }                                                                                                          // 1036\n                                                                                                                       // 1037\n            // add any elements between firstChild & lastChild                                                         // 1038\n            rootChildren.forEach(function (element) {                                                                  // 1039\n                element.parentNode.removeChild(element);                                                               // 1040\n                fragment.appendChild(element);                                                                         // 1041\n            });                                                                                                        // 1042\n                                                                                                                       // 1043\n            // build up fragment on endNode side of the tree                                                           // 1044\n            if (lastChild === endNode) {                                                                               // 1045\n                lastChild.parentNode.removeChild(lastChild);                                                           // 1046\n                fragment.appendChild(lastChild);                                                                       // 1047\n            } else {                                                                                                   // 1048\n                fragment.appendChild(this.splitOffDOMTree(lastChild, endNode, true));                                  // 1049\n            }                                                                                                          // 1050\n                                                                                                                       // 1051\n            // Add fragment into passed in element                                                                     // 1052\n            newElement.appendChild(fragment);                                                                          // 1053\n                                                                                                                       // 1054\n            if (lastChild.parentNode === rootNode) {                                                                   // 1055\n                // If last child is in the root, insert newElement in front of it                                      // 1056\n                rootNode.insertBefore(newElement, lastChild);                                                          // 1057\n            } else if (afterLast) {                                                                                    // 1058\n                // If last child was removed, but it had a sibling, insert in front of it                              // 1059\n                rootNode.insertBefore(newElement, afterLast);                                                          // 1060\n            } else {                                                                                                   // 1061\n                // lastChild was removed and was the last actual element just append                                   // 1062\n                rootNode.appendChild(newElement);                                                                      // 1063\n            }                                                                                                          // 1064\n                                                                                                                       // 1065\n            return newElement.hasChildNodes();                                                                         // 1066\n        },                                                                                                             // 1067\n                                                                                                                       // 1068\n        /* based on http://stackoverflow.com/a/6183069 */                                                              // 1069\n        depthOfNode: function (inNode) {                                                                               // 1070\n            var theDepth = 0,                                                                                          // 1071\n                node = inNode;                                                                                         // 1072\n            while (node.parentNode !== null) {                                                                         // 1073\n                node = node.parentNode;                                                                                // 1074\n                theDepth++;                                                                                            // 1075\n            }                                                                                                          // 1076\n            return theDepth;                                                                                           // 1077\n        },                                                                                                             // 1078\n                                                                                                                       // 1079\n        findCommonRoot: function (inNode1, inNode2) {                                                                  // 1080\n            var depth1 = this.depthOfNode(inNode1),                                                                    // 1081\n                depth2 = this.depthOfNode(inNode2),                                                                    // 1082\n                node1 = inNode1,                                                                                       // 1083\n                node2 = inNode2;                                                                                       // 1084\n                                                                                                                       // 1085\n            while (depth1 !== depth2) {                                                                                // 1086\n                if (depth1 > depth2) {                                                                                 // 1087\n                    node1 = node1.parentNode;                                                                          // 1088\n                    depth1 -= 1;                                                                                       // 1089\n                } else {                                                                                               // 1090\n                    node2 = node2.parentNode;                                                                          // 1091\n                    depth2 -= 1;                                                                                       // 1092\n                }                                                                                                      // 1093\n            }                                                                                                          // 1094\n                                                                                                                       // 1095\n            while (node1 !== node2) {                                                                                  // 1096\n                node1 = node1.parentNode;                                                                              // 1097\n                node2 = node2.parentNode;                                                                              // 1098\n            }                                                                                                          // 1099\n                                                                                                                       // 1100\n            return node1;                                                                                              // 1101\n        },                                                                                                             // 1102\n        /* END - based on http://stackoverflow.com/a/6183069 */                                                        // 1103\n                                                                                                                       // 1104\n        isElementAtBeginningOfBlock: function (node) {                                                                 // 1105\n            var textVal,                                                                                               // 1106\n                sibling;                                                                                               // 1107\n            while (!this.isBlockContainer(node) && !this.isMediumEditorElement(node)) {                                // 1108\n                sibling = node;                                                                                        // 1109\n                while (sibling = sibling.previousSibling) {                                                            // 1110\n                    textVal = sibling.nodeType === 3 ? sibling.nodeValue : sibling.textContent;                        // 1111\n                    if (textVal.length > 0) {                                                                          // 1112\n                        return false;                                                                                  // 1113\n                    }                                                                                                  // 1114\n                }                                                                                                      // 1115\n                node = node.parentNode;                                                                                // 1116\n            }                                                                                                          // 1117\n            return true;                                                                                               // 1118\n        },                                                                                                             // 1119\n                                                                                                                       // 1120\n        isMediumEditorElement: function (element) {                                                                    // 1121\n            return element && element.getAttribute && !!element.getAttribute('data-medium-editor-element');            // 1122\n        },                                                                                                             // 1123\n                                                                                                                       // 1124\n        isBlockContainer: function (element) {                                                                         // 1125\n            return element && element.nodeType !== 3 && this.blockContainerElementNames.indexOf(element.nodeName.toLowerCase()) !== -1;\n        },                                                                                                             // 1127\n                                                                                                                       // 1128\n        getClosestBlockContainer: function (node) {                                                                    // 1129\n            return Util.traverseUp(node, function (node) {                                                             // 1130\n                return Util.isBlockContainer(node);                                                                    // 1131\n            });                                                                                                        // 1132\n        },                                                                                                             // 1133\n                                                                                                                       // 1134\n        getTopBlockContainer: function (element) {                                                                     // 1135\n            var topBlock = element;                                                                                    // 1136\n            this.traverseUp(element, function (el) {                                                                   // 1137\n                if (Util.isBlockContainer(el)) {                                                                       // 1138\n                    topBlock = el;                                                                                     // 1139\n                }                                                                                                      // 1140\n                return false;                                                                                          // 1141\n            });                                                                                                        // 1142\n            return topBlock;                                                                                           // 1143\n        },                                                                                                             // 1144\n                                                                                                                       // 1145\n        getFirstSelectableLeafNode: function (element) {                                                               // 1146\n            while (element && element.firstChild) {                                                                    // 1147\n                element = element.firstChild;                                                                          // 1148\n            }                                                                                                          // 1149\n                                                                                                                       // 1150\n            // We don't want to set the selection to an element that can't have children, this messes up Gecko.        // 1151\n            element = this.traverseUp(element, function (el) {                                                         // 1152\n                return Util.emptyElementNames.indexOf(el.nodeName.toLowerCase()) === -1;                               // 1153\n            });                                                                                                        // 1154\n            // Selecting at the beginning of a table doesn't work in PhantomJS.                                        // 1155\n            if (element.nodeName.toLowerCase() === 'table') {                                                          // 1156\n                var firstCell = element.querySelector('th, td');                                                       // 1157\n                if (firstCell) {                                                                                       // 1158\n                    element = firstCell;                                                                               // 1159\n                }                                                                                                      // 1160\n            }                                                                                                          // 1161\n            return element;                                                                                            // 1162\n        },                                                                                                             // 1163\n                                                                                                                       // 1164\n        getFirstTextNode: function (element) {                                                                         // 1165\n            if (element.nodeType === 3) {                                                                              // 1166\n                return element;                                                                                        // 1167\n            }                                                                                                          // 1168\n                                                                                                                       // 1169\n            for (var i = 0; i < element.childNodes.length; i++) {                                                      // 1170\n                var textNode = this.getFirstTextNode(element.childNodes[i]);                                           // 1171\n                if (textNode !== null) {                                                                               // 1172\n                    return textNode;                                                                                   // 1173\n                }                                                                                                      // 1174\n            }                                                                                                          // 1175\n            return null;                                                                                               // 1176\n        },                                                                                                             // 1177\n                                                                                                                       // 1178\n        ensureUrlHasProtocol: function (url) {                                                                         // 1179\n            if (url.indexOf('://') === -1) {                                                                           // 1180\n                return 'http://' + url;                                                                                // 1181\n            }                                                                                                          // 1182\n            return url;                                                                                                // 1183\n        },                                                                                                             // 1184\n                                                                                                                       // 1185\n        warn: function () {                                                                                            // 1186\n            if (window.console !== undefined && typeof window.console.warn === 'function') {                           // 1187\n                window.console.warn.apply(window.console, arguments);                                                  // 1188\n            }                                                                                                          // 1189\n        },                                                                                                             // 1190\n                                                                                                                       // 1191\n        deprecated: function (oldName, newName, version) {                                                             // 1192\n            // simple deprecation warning mechanism.                                                                   // 1193\n            var m = oldName + ' is deprecated, please use ' + newName + ' instead.';                                   // 1194\n            if (version) {                                                                                             // 1195\n                m += ' Will be removed in ' + version;                                                                 // 1196\n            }                                                                                                          // 1197\n            Util.warn(m);                                                                                              // 1198\n        },                                                                                                             // 1199\n                                                                                                                       // 1200\n        deprecatedMethod: function (oldName, newName, args, version) {                                                 // 1201\n            // run the replacement and warn when someone calls a deprecated method                                     // 1202\n            Util.deprecated(oldName, newName, version);                                                                // 1203\n            if (typeof this[newName] === 'function') {                                                                 // 1204\n                this[newName].apply(this, args);                                                                       // 1205\n            }                                                                                                          // 1206\n        },                                                                                                             // 1207\n                                                                                                                       // 1208\n        cleanupAttrs: function (el, attrs) {                                                                           // 1209\n            attrs.forEach(function (attr) {                                                                            // 1210\n                el.removeAttribute(attr);                                                                              // 1211\n            });                                                                                                        // 1212\n        },                                                                                                             // 1213\n                                                                                                                       // 1214\n        cleanupTags: function (el, tags) {                                                                             // 1215\n            tags.forEach(function (tag) {                                                                              // 1216\n                if (el.nodeName.toLowerCase() === tag) {                                                               // 1217\n                    el.parentNode.removeChild(el);                                                                     // 1218\n                }                                                                                                      // 1219\n            }, this);                                                                                                  // 1220\n        },                                                                                                             // 1221\n                                                                                                                       // 1222\n        // get the closest parent                                                                                      // 1223\n        getClosestTag: function (el, tag) {                                                                            // 1224\n            return this.traverseUp(el, function (element) {                                                            // 1225\n                return element.nodeName.toLowerCase() === tag.toLowerCase();                                           // 1226\n            });                                                                                                        // 1227\n        },                                                                                                             // 1228\n                                                                                                                       // 1229\n        unwrap: function (el, doc) {                                                                                   // 1230\n            var fragment = doc.createDocumentFragment(),                                                               // 1231\n                nodes = Array.prototype.slice.call(el.childNodes);                                                     // 1232\n                                                                                                                       // 1233\n            // cast nodeList to array since appending child                                                            // 1234\n            // to a different node will alter length of el.childNodes                                                  // 1235\n            for (var i = 0; i < nodes.length; i++) {                                                                   // 1236\n                fragment.appendChild(nodes[i]);                                                                        // 1237\n            }                                                                                                          // 1238\n                                                                                                                       // 1239\n            if (fragment.childNodes.length) {                                                                          // 1240\n                el.parentNode.replaceChild(fragment, el);                                                              // 1241\n            } else {                                                                                                   // 1242\n                el.parentNode.removeChild(el);                                                                         // 1243\n            }                                                                                                          // 1244\n        }                                                                                                              // 1245\n    };                                                                                                                 // 1246\n}(window));                                                                                                            // 1247\n                                                                                                                       // 1248\nvar buttonDefaults;                                                                                                    // 1249\n(function () {                                                                                                         // 1250\n    'use strict';                                                                                                      // 1251\n                                                                                                                       // 1252\n    buttonDefaults = {                                                                                                 // 1253\n        'bold': {                                                                                                      // 1254\n            name: 'bold',                                                                                              // 1255\n            action: 'bold',                                                                                            // 1256\n            aria: 'bold',                                                                                              // 1257\n            tagNames: ['b', 'strong'],                                                                                 // 1258\n            style: {                                                                                                   // 1259\n                prop: 'font-weight',                                                                                   // 1260\n                value: '700|bold'                                                                                      // 1261\n            },                                                                                                         // 1262\n            useQueryState: true,                                                                                       // 1263\n            contentDefault: '<b>B</b>',                                                                                // 1264\n            contentFA: '<i class=\"fa fa-bold\"></i>'                                                                    // 1265\n        },                                                                                                             // 1266\n        'italic': {                                                                                                    // 1267\n            name: 'italic',                                                                                            // 1268\n            action: 'italic',                                                                                          // 1269\n            aria: 'italic',                                                                                            // 1270\n            tagNames: ['i', 'em'],                                                                                     // 1271\n            style: {                                                                                                   // 1272\n                prop: 'font-style',                                                                                    // 1273\n                value: 'italic'                                                                                        // 1274\n            },                                                                                                         // 1275\n            useQueryState: true,                                                                                       // 1276\n            contentDefault: '<b><i>I</i></b>',                                                                         // 1277\n            contentFA: '<i class=\"fa fa-italic\"></i>'                                                                  // 1278\n        },                                                                                                             // 1279\n        'underline': {                                                                                                 // 1280\n            name: 'underline',                                                                                         // 1281\n            action: 'underline',                                                                                       // 1282\n            aria: 'underline',                                                                                         // 1283\n            tagNames: ['u'],                                                                                           // 1284\n            style: {                                                                                                   // 1285\n                prop: 'text-decoration',                                                                               // 1286\n                value: 'underline'                                                                                     // 1287\n            },                                                                                                         // 1288\n            useQueryState: true,                                                                                       // 1289\n            contentDefault: '<b><u>U</u></b>',                                                                         // 1290\n            contentFA: '<i class=\"fa fa-underline\"></i>'                                                               // 1291\n        },                                                                                                             // 1292\n        'strikethrough': {                                                                                             // 1293\n            name: 'strikethrough',                                                                                     // 1294\n            action: 'strikethrough',                                                                                   // 1295\n            aria: 'strike through',                                                                                    // 1296\n            tagNames: ['strike'],                                                                                      // 1297\n            style: {                                                                                                   // 1298\n                prop: 'text-decoration',                                                                               // 1299\n                value: 'line-through'                                                                                  // 1300\n            },                                                                                                         // 1301\n            useQueryState: true,                                                                                       // 1302\n            contentDefault: '<s>A</s>',                                                                                // 1303\n            contentFA: '<i class=\"fa fa-strikethrough\"></i>'                                                           // 1304\n        },                                                                                                             // 1305\n        'superscript': {                                                                                               // 1306\n            name: 'superscript',                                                                                       // 1307\n            action: 'superscript',                                                                                     // 1308\n            aria: 'superscript',                                                                                       // 1309\n            tagNames: ['sup'],                                                                                         // 1310\n            /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for superscript         // 1311\n               https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */   // 1312\n            // useQueryState: true                                                                                     // 1313\n            contentDefault: '<b>x<sup>1</sup></b>',                                                                    // 1314\n            contentFA: '<i class=\"fa fa-superscript\"></i>'                                                             // 1315\n        },                                                                                                             // 1316\n        'subscript': {                                                                                                 // 1317\n            name: 'subscript',                                                                                         // 1318\n            action: 'subscript',                                                                                       // 1319\n            aria: 'subscript',                                                                                         // 1320\n            tagNames: ['sub'],                                                                                         // 1321\n            /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for subscript           // 1322\n               https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */   // 1323\n            // useQueryState: true                                                                                     // 1324\n            contentDefault: '<b>x<sub>1</sub></b>',                                                                    // 1325\n            contentFA: '<i class=\"fa fa-subscript\"></i>'                                                               // 1326\n        },                                                                                                             // 1327\n        'image': {                                                                                                     // 1328\n            name: 'image',                                                                                             // 1329\n            action: 'image',                                                                                           // 1330\n            aria: 'image',                                                                                             // 1331\n            tagNames: ['img'],                                                                                         // 1332\n            contentDefault: '<b>image</b>',                                                                            // 1333\n            contentFA: '<i class=\"fa fa-picture-o\"></i>'                                                               // 1334\n        },                                                                                                             // 1335\n        'orderedlist': {                                                                                               // 1336\n            name: 'orderedlist',                                                                                       // 1337\n            action: 'insertorderedlist',                                                                               // 1338\n            aria: 'ordered list',                                                                                      // 1339\n            tagNames: ['ol'],                                                                                          // 1340\n            useQueryState: true,                                                                                       // 1341\n            contentDefault: '<b>1.</b>',                                                                               // 1342\n            contentFA: '<i class=\"fa fa-list-ol\"></i>'                                                                 // 1343\n        },                                                                                                             // 1344\n        'unorderedlist': {                                                                                             // 1345\n            name: 'unorderedlist',                                                                                     // 1346\n            action: 'insertunorderedlist',                                                                             // 1347\n            aria: 'unordered list',                                                                                    // 1348\n            tagNames: ['ul'],                                                                                          // 1349\n            useQueryState: true,                                                                                       // 1350\n            contentDefault: '<b>&bull;</b>',                                                                           // 1351\n            contentFA: '<i class=\"fa fa-list-ul\"></i>'                                                                 // 1352\n        },                                                                                                             // 1353\n        'indent': {                                                                                                    // 1354\n            name: 'indent',                                                                                            // 1355\n            action: 'indent',                                                                                          // 1356\n            aria: 'indent',                                                                                            // 1357\n            tagNames: [],                                                                                              // 1358\n            contentDefault: '<b>&rarr;</b>',                                                                           // 1359\n            contentFA: '<i class=\"fa fa-indent\"></i>'                                                                  // 1360\n        },                                                                                                             // 1361\n        'outdent': {                                                                                                   // 1362\n            name: 'outdent',                                                                                           // 1363\n            action: 'outdent',                                                                                         // 1364\n            aria: 'outdent',                                                                                           // 1365\n            tagNames: [],                                                                                              // 1366\n            contentDefault: '<b>&larr;</b>',                                                                           // 1367\n            contentFA: '<i class=\"fa fa-outdent\"></i>'                                                                 // 1368\n        },                                                                                                             // 1369\n        'justifyCenter': {                                                                                             // 1370\n            name: 'justifyCenter',                                                                                     // 1371\n            action: 'justifyCenter',                                                                                   // 1372\n            aria: 'center justify',                                                                                    // 1373\n            tagNames: [],                                                                                              // 1374\n            style: {                                                                                                   // 1375\n                prop: 'text-align',                                                                                    // 1376\n                value: 'center'                                                                                        // 1377\n            },                                                                                                         // 1378\n            contentDefault: '<b>C</b>',                                                                                // 1379\n            contentFA: '<i class=\"fa fa-align-center\"></i>'                                                            // 1380\n        },                                                                                                             // 1381\n        'justifyFull': {                                                                                               // 1382\n            name: 'justifyFull',                                                                                       // 1383\n            action: 'justifyFull',                                                                                     // 1384\n            aria: 'full justify',                                                                                      // 1385\n            tagNames: [],                                                                                              // 1386\n            style: {                                                                                                   // 1387\n                prop: 'text-align',                                                                                    // 1388\n                value: 'justify'                                                                                       // 1389\n            },                                                                                                         // 1390\n            contentDefault: '<b>J</b>',                                                                                // 1391\n            contentFA: '<i class=\"fa fa-align-justify\"></i>'                                                           // 1392\n        },                                                                                                             // 1393\n        'justifyLeft': {                                                                                               // 1394\n            name: 'justifyLeft',                                                                                       // 1395\n            action: 'justifyLeft',                                                                                     // 1396\n            aria: 'left justify',                                                                                      // 1397\n            tagNames: [],                                                                                              // 1398\n            style: {                                                                                                   // 1399\n                prop: 'text-align',                                                                                    // 1400\n                value: 'left'                                                                                          // 1401\n            },                                                                                                         // 1402\n            contentDefault: '<b>L</b>',                                                                                // 1403\n            contentFA: '<i class=\"fa fa-align-left\"></i>'                                                              // 1404\n        },                                                                                                             // 1405\n        'justifyRight': {                                                                                              // 1406\n            name: 'justifyRight',                                                                                      // 1407\n            action: 'justifyRight',                                                                                    // 1408\n            aria: 'right justify',                                                                                     // 1409\n            tagNames: [],                                                                                              // 1410\n            style: {                                                                                                   // 1411\n                prop: 'text-align',                                                                                    // 1412\n                value: 'right'                                                                                         // 1413\n            },                                                                                                         // 1414\n            contentDefault: '<b>R</b>',                                                                                // 1415\n            contentFA: '<i class=\"fa fa-align-right\"></i>'                                                             // 1416\n        },                                                                                                             // 1417\n        // Known inline elements that are not removed, or not removed consistantly across browsers:                    // 1418\n        // <span>, <label>, <br>                                                                                       // 1419\n        'removeFormat': {                                                                                              // 1420\n            name: 'removeFormat',                                                                                      // 1421\n            aria: 'remove formatting',                                                                                 // 1422\n            action: 'removeFormat',                                                                                    // 1423\n            contentDefault: '<b>X</b>',                                                                                // 1424\n            contentFA: '<i class=\"fa fa-eraser\"></i>'                                                                  // 1425\n        },                                                                                                             // 1426\n                                                                                                                       // 1427\n        /***** Buttons for appending block elements (append-<element> action) *****/                                   // 1428\n                                                                                                                       // 1429\n        'quote': {                                                                                                     // 1430\n            name: 'quote',                                                                                             // 1431\n            action: 'append-blockquote',                                                                               // 1432\n            aria: 'blockquote',                                                                                        // 1433\n            tagNames: ['blockquote'],                                                                                  // 1434\n            contentDefault: '<b>&ldquo;</b>',                                                                          // 1435\n            contentFA: '<i class=\"fa fa-quote-right\"></i>'                                                             // 1436\n        },                                                                                                             // 1437\n        'pre': {                                                                                                       // 1438\n            name: 'pre',                                                                                               // 1439\n            action: 'append-pre',                                                                                      // 1440\n            aria: 'preformatted text',                                                                                 // 1441\n            tagNames: ['pre'],                                                                                         // 1442\n            contentDefault: '<b>0101</b>',                                                                             // 1443\n            contentFA: '<i class=\"fa fa-code fa-lg\"></i>'                                                              // 1444\n        },                                                                                                             // 1445\n        'h1': {                                                                                                        // 1446\n            name: 'h1',                                                                                                // 1447\n            action: 'append-h1',                                                                                       // 1448\n            aria: 'header type one',                                                                                   // 1449\n            tagNames: ['h1'],                                                                                          // 1450\n            contentDefault: '<b>H1</b>',                                                                               // 1451\n            contentFA: '<i class=\"fa fa-header\"><sup>1</sup>'                                                          // 1452\n        },                                                                                                             // 1453\n        'h2': {                                                                                                        // 1454\n            name: 'h2',                                                                                                // 1455\n            action: 'append-h2',                                                                                       // 1456\n            aria: 'header type two',                                                                                   // 1457\n            tagNames: ['h2'],                                                                                          // 1458\n            contentDefault: '<b>H2</b>',                                                                               // 1459\n            contentFA: '<i class=\"fa fa-header\"><sup>2</sup>'                                                          // 1460\n        },                                                                                                             // 1461\n        'h3': {                                                                                                        // 1462\n            name: 'h3',                                                                                                // 1463\n            action: 'append-h3',                                                                                       // 1464\n            aria: 'header type three',                                                                                 // 1465\n            tagNames: ['h3'],                                                                                          // 1466\n            contentDefault: '<b>H3</b>',                                                                               // 1467\n            contentFA: '<i class=\"fa fa-header\"><sup>3</sup>'                                                          // 1468\n        },                                                                                                             // 1469\n        'h4': {                                                                                                        // 1470\n            name: 'h4',                                                                                                // 1471\n            action: 'append-h4',                                                                                       // 1472\n            aria: 'header type four',                                                                                  // 1473\n            tagNames: ['h4'],                                                                                          // 1474\n            contentDefault: '<b>H4</b>',                                                                               // 1475\n            contentFA: '<i class=\"fa fa-header\"><sup>4</sup>'                                                          // 1476\n        },                                                                                                             // 1477\n        'h5': {                                                                                                        // 1478\n            name: 'h5',                                                                                                // 1479\n            action: 'append-h5',                                                                                       // 1480\n            aria: 'header type five',                                                                                  // 1481\n            tagNames: ['h5'],                                                                                          // 1482\n            contentDefault: '<b>H5</b>',                                                                               // 1483\n            contentFA: '<i class=\"fa fa-header\"><sup>5</sup>'                                                          // 1484\n        },                                                                                                             // 1485\n        'h6': {                                                                                                        // 1486\n            name: 'h6',                                                                                                // 1487\n            action: 'append-h6',                                                                                       // 1488\n            aria: 'header type six',                                                                                   // 1489\n            tagNames: ['h6'],                                                                                          // 1490\n            contentDefault: '<b>H6</b>',                                                                               // 1491\n            contentFA: '<i class=\"fa fa-header\"><sup>6</sup>'                                                          // 1492\n        }                                                                                                              // 1493\n    };                                                                                                                 // 1494\n                                                                                                                       // 1495\n})();                                                                                                                  // 1496\nvar editorDefaults;                                                                                                    // 1497\n(function () {                                                                                                         // 1498\n    // summary: The default options hash used by the Editor                                                            // 1499\n                                                                                                                       // 1500\n    editorDefaults = {                                                                                                 // 1501\n        activeButtonClass: 'medium-editor-button-active',                                                              // 1502\n        buttonLabels: false,                                                                                           // 1503\n        delay: 0,                                                                                                      // 1504\n        disableReturn: false,                                                                                          // 1505\n        disableDoubleReturn: false,                                                                                    // 1506\n        disableEditing: false,                                                                                         // 1507\n        autoLink: false,                                                                                               // 1508\n        elementsContainer: false,                                                                                      // 1509\n        contentWindow: window,                                                                                         // 1510\n        ownerDocument: document,                                                                                       // 1511\n        targetBlank: false,                                                                                            // 1512\n        extensions: {},                                                                                                // 1513\n        spellcheck: true                                                                                               // 1514\n    };                                                                                                                 // 1515\n})();                                                                                                                  // 1516\n                                                                                                                       // 1517\nvar Extension;                                                                                                         // 1518\n(function () {                                                                                                         // 1519\n    'use strict';                                                                                                      // 1520\n                                                                                                                       // 1521\n    /* global Util */                                                                                                  // 1522\n                                                                                                                       // 1523\n    Extension = function (options) {                                                                                   // 1524\n        Util.extend(this, options);                                                                                    // 1525\n    };                                                                                                                 // 1526\n                                                                                                                       // 1527\n    Extension.extend = function (protoProps) {                                                                         // 1528\n        // magic extender thinger. mostly borrowed from backbone/goog.inherits                                         // 1529\n        // place this function on some thing you want extend-able.                                                     // 1530\n        //                                                                                                             // 1531\n        // example:                                                                                                    // 1532\n        //                                                                                                             // 1533\n        //      function Thing(args){                                                                                  // 1534\n        //          this.options = args;                                                                               // 1535\n        //      }                                                                                                      // 1536\n        //                                                                                                             // 1537\n        //      Thing.prototype = { foo: \"bar\" };                                                                      // 1538\n        //      Thing.extend = extenderify;                                                                            // 1539\n        //                                                                                                             // 1540\n        //      var ThingTwo = Thing.extend({ foo: \"baz\" });                                                           // 1541\n        //                                                                                                             // 1542\n        //      var thingOne = new Thing(); // foo === \"bar\"                                                           // 1543\n        //      var thingTwo = new ThingTwo(); // foo === \"baz\"                                                        // 1544\n        //                                                                                                             // 1545\n        //      which seems like some simply shallow copy nonsense                                                     // 1546\n        //      at first, but a lot more is going on there.                                                            // 1547\n        //                                                                                                             // 1548\n        //      passing a `constructor` to the extend props                                                            // 1549\n        //      will cause the instance to instantiate through that                                                    // 1550\n        //      instead of the parent's constructor.                                                                   // 1551\n                                                                                                                       // 1552\n        var parent = this,                                                                                             // 1553\n            child;                                                                                                     // 1554\n                                                                                                                       // 1555\n        // The constructor function for the new subclass is either defined by you                                      // 1556\n        // (the \"constructor\" property in your `extend` definition), or defaulted                                      // 1557\n        // by us to simply call the parent's constructor.                                                              // 1558\n                                                                                                                       // 1559\n        if (protoProps && protoProps.hasOwnProperty('constructor')) {                                                  // 1560\n            child = protoProps.constructor;                                                                            // 1561\n        } else {                                                                                                       // 1562\n            child = function () {                                                                                      // 1563\n                return parent.apply(this, arguments);                                                                  // 1564\n            };                                                                                                         // 1565\n        }                                                                                                              // 1566\n                                                                                                                       // 1567\n        // das statics (.extend comes over, so your subclass can have subclasses too)                                  // 1568\n        Util.extend(child, parent);                                                                                    // 1569\n                                                                                                                       // 1570\n        // Set the prototype chain to inherit from `parent`, without calling                                           // 1571\n        // `parent`'s constructor function.                                                                            // 1572\n        var Surrogate = function () {                                                                                  // 1573\n            this.constructor = child;                                                                                  // 1574\n        };                                                                                                             // 1575\n        Surrogate.prototype = parent.prototype;                                                                        // 1576\n        child.prototype = new Surrogate();                                                                             // 1577\n                                                                                                                       // 1578\n        if (protoProps) {                                                                                              // 1579\n            Util.extend(child.prototype, protoProps);                                                                  // 1580\n        }                                                                                                              // 1581\n                                                                                                                       // 1582\n        // todo: $super?                                                                                               // 1583\n                                                                                                                       // 1584\n        return child;                                                                                                  // 1585\n    };                                                                                                                 // 1586\n                                                                                                                       // 1587\n    Extension.prototype = {                                                                                            // 1588\n        /* init: [function]                                                                                            // 1589\n         *                                                                                                             // 1590\n         * Called by MediumEditor during initialization.                                                               // 1591\n         * The .base property will already have been set to                                                            // 1592\n         * current instance of MediumEditor when this is called.                                                       // 1593\n         * All helper methods will exist as well                                                                       // 1594\n         */                                                                                                            // 1595\n        init: function () {},                                                                                          // 1596\n                                                                                                                       // 1597\n        /* base: [MediumEditor instance]                                                                               // 1598\n         *                                                                                                             // 1599\n         * If not overriden, this will be set to the current instance                                                  // 1600\n         * of MediumEditor, before the init method is called                                                           // 1601\n         */                                                                                                            // 1602\n        base: undefined,                                                                                               // 1603\n                                                                                                                       // 1604\n        /* name: [string]                                                                                              // 1605\n         *                                                                                                             // 1606\n         * 'name' of the extension, used for retrieving the extension.                                                 // 1607\n         * If not set, MediumEditor will set this to be the key                                                        // 1608\n         * used when passing the extension into MediumEditor via the                                                   // 1609\n         * 'extensions' option                                                                                         // 1610\n         */                                                                                                            // 1611\n        name: undefined,                                                                                               // 1612\n                                                                                                                       // 1613\n        /* checkState: [function (node)]                                                                               // 1614\n         *                                                                                                             // 1615\n         * If implemented, this function will be called one or more times                                              // 1616\n         * the state of the editor & toolbar are updated.                                                              // 1617\n         * When the state is updated, the editor does the following:                                                   // 1618\n         *                                                                                                             // 1619\n         * 1) Find the parent node containing the current selection                                                    // 1620\n         * 2) Call checkState on the extension, passing the node as an argument                                        // 1621\n         * 3) Get the parent node of the previous node                                                                 // 1622\n         * 4) Repeat steps #2 and #3 until we move outside the parent contenteditable                                  // 1623\n         */                                                                                                            // 1624\n        checkState: undefined,                                                                                         // 1625\n                                                                                                                       // 1626\n        /* destroy: [function ()]                                                                                      // 1627\n         *                                                                                                             // 1628\n         * This method should remove any created html, custom event handlers                                           // 1629\n         * or any other cleanup tasks that should be performed.                                                        // 1630\n         * If implemented, this function will be called when MediumEditor's                                            // 1631\n         * destroy method has been called.                                                                             // 1632\n         */                                                                                                            // 1633\n        destroy: undefined,                                                                                            // 1634\n                                                                                                                       // 1635\n        /* As alternatives to checkState, these functions provide a more structured                                    // 1636\n         * path to updating the state of an extension (usually a button) whenever                                      // 1637\n         * the state of the editor & toolbar are updated.                                                              // 1638\n         */                                                                                                            // 1639\n                                                                                                                       // 1640\n        /* queryCommandState: [function ()]                                                                            // 1641\n         *                                                                                                             // 1642\n         * If implemented, this function will be called once on each extension                                         // 1643\n         * when the state of the editor/toolbar is being updated.                                                      // 1644\n         *                                                                                                             // 1645\n         * If this function returns a non-null value, the extension will                                               // 1646\n         * be ignored as the code climbs the dom tree.                                                                 // 1647\n         *                                                                                                             // 1648\n         * If this function returns true, and the setActive() function is defined                                      // 1649\n         * setActive() will be called                                                                                  // 1650\n         */                                                                                                            // 1651\n        queryCommandState: undefined,                                                                                  // 1652\n                                                                                                                       // 1653\n        /* isActive: [function ()]                                                                                     // 1654\n         *                                                                                                             // 1655\n         * If implemented, this function will be called when MediumEditor                                              // 1656\n         * has determined that this extension is 'active' for the current selection.                                   // 1657\n         * This may be called when the editor & toolbar are being updated,                                             // 1658\n         * but only if queryCommandState() or isAlreadyApplied() functions                                             // 1659\n         * are implemented, and when called, return true.                                                              // 1660\n         */                                                                                                            // 1661\n        isActive: undefined,                                                                                           // 1662\n                                                                                                                       // 1663\n        /* isAlreadyApplied: [function (node)]                                                                         // 1664\n         *                                                                                                             // 1665\n         * If implemented, this function is similar to checkState() in                                                 // 1666\n         * that it will be called repeatedly as MediumEditor moves up                                                  // 1667\n         * the DOM to update the editor & toolbar after a state change.                                                // 1668\n         *                                                                                                             // 1669\n         * NOTE: This function will NOT be called if checkState() has                                                  // 1670\n         * been implemented. This function will NOT be called if                                                       // 1671\n         * queryCommandState() is implemented and returns a non-null                                                   // 1672\n         * value when called                                                                                           // 1673\n         */                                                                                                            // 1674\n        isAlreadyApplied: undefined,                                                                                   // 1675\n                                                                                                                       // 1676\n        /* setActive: [function ()]                                                                                    // 1677\n         *                                                                                                             // 1678\n         * If implemented, this function is called when MediumEditor knows                                             // 1679\n         * that this extension is currently enabled.  Currently, this                                                  // 1680\n         * function is called when updating the editor & toolbar, and                                                  // 1681\n         * only if queryCommandState() or isAlreadyApplied(node) return                                                // 1682\n         * true when called                                                                                            // 1683\n         */                                                                                                            // 1684\n        setActive: undefined,                                                                                          // 1685\n                                                                                                                       // 1686\n        /* setInactive: [function ()]                                                                                  // 1687\n         *                                                                                                             // 1688\n         * If implemented, this function is called when MediumEditor knows                                             // 1689\n         * that this extension is currently disabled.  Curently, this                                                  // 1690\n         * is called at the beginning of each state change for                                                         // 1691\n         * the editor & toolbar. After calling this, MediumEditor                                                      // 1692\n         * will attempt to update the extension, either via checkState()                                               // 1693\n         * or the combination of queryCommandState(), isAlreadyApplied(node),                                          // 1694\n         * isActive(), and setActive()                                                                                 // 1695\n         */                                                                                                            // 1696\n        setInactive: undefined,                                                                                        // 1697\n                                                                                                                       // 1698\n        /************************ Helpers ************************                                                     // 1699\n         * The following are helpers that are either set by MediumEditor                                               // 1700\n         * during initialization, or are helper methods which either                                                   // 1701\n         * route calls to the MediumEditor instance or provide common                                                  // 1702\n         * functionality for all extensions                                                                            // 1703\n         *********************************************************/                                                    // 1704\n                                                                                                                       // 1705\n        /* window: [Window]                                                                                            // 1706\n         *                                                                                                             // 1707\n         * If not overriden, this will be set to the window object                                                     // 1708\n         * to be used by MediumEditor and its extensions.  This is                                                     // 1709\n         * passed via the 'contentWindow' option to MediumEditor                                                       // 1710\n         * and is the global 'window' object by default                                                                // 1711\n         */                                                                                                            // 1712\n        'window': undefined,                                                                                           // 1713\n                                                                                                                       // 1714\n        /* document: [Document]                                                                                        // 1715\n         *                                                                                                             // 1716\n         * If not overriden, this will be set to the document object                                                   // 1717\n         * to be used by MediumEditor and its extensions. This is                                                      // 1718\n         * passed via the 'ownerDocument' optin to MediumEditor                                                        // 1719\n         * and is the global 'document' object by default                                                              // 1720\n         */                                                                                                            // 1721\n        'document': undefined,                                                                                         // 1722\n                                                                                                                       // 1723\n        /* getEditorElements: [function ()]                                                                            // 1724\n         *                                                                                                             // 1725\n         * Helper function which returns an array containing                                                           // 1726\n         * all the contenteditable elements for this instance                                                          // 1727\n         * of MediumEditor                                                                                             // 1728\n         */                                                                                                            // 1729\n        getEditorElements: function () {                                                                               // 1730\n            return this.base.elements;                                                                                 // 1731\n        },                                                                                                             // 1732\n                                                                                                                       // 1733\n        /* getEditorId: [function ()]                                                                                  // 1734\n         *                                                                                                             // 1735\n         * Helper function which returns a unique identifier                                                           // 1736\n         * for this instance of MediumEditor                                                                           // 1737\n         */                                                                                                            // 1738\n        getEditorId: function () {                                                                                     // 1739\n            return this.base.id;                                                                                       // 1740\n        },                                                                                                             // 1741\n                                                                                                                       // 1742\n        /* getEditorOptions: [function (option)]                                                                       // 1743\n         *                                                                                                             // 1744\n         * Helper function which returns the value of an option                                                        // 1745\n         * used to initialize this instance of MediumEditor                                                            // 1746\n         */                                                                                                            // 1747\n        getEditorOption: function (option) {                                                                           // 1748\n            return this.base.options[option];                                                                          // 1749\n        }                                                                                                              // 1750\n    };                                                                                                                 // 1751\n                                                                                                                       // 1752\n    /* List of method names to add to the prototype of Extension                                                       // 1753\n     * Each of these methods will be defined as helpers that                                                           // 1754\n     * just call directly into the MediumEditor instance.                                                              // 1755\n     *                                                                                                                 // 1756\n     * example for 'on' method:                                                                                        // 1757\n     * Extension.prototype.on = function () {                                                                          // 1758\n     *     return this.base.on.apply(this.base, arguments);                                                            // 1759\n     * }                                                                                                               // 1760\n     */                                                                                                                // 1761\n    [                                                                                                                  // 1762\n        // general helpers                                                                                             // 1763\n        'execAction',                                                                                                  // 1764\n                                                                                                                       // 1765\n        // event handling                                                                                              // 1766\n        'on',                                                                                                          // 1767\n        'off',                                                                                                         // 1768\n        'subscribe',                                                                                                   // 1769\n        'trigger'                                                                                                      // 1770\n                                                                                                                       // 1771\n    ].forEach(function (helper) {                                                                                      // 1772\n        Extension.prototype[helper] = function () {                                                                    // 1773\n            return this.base[helper].apply(this.base, arguments);                                                      // 1774\n        };                                                                                                             // 1775\n    });                                                                                                                // 1776\n})();                                                                                                                  // 1777\n                                                                                                                       // 1778\nvar Selection;                                                                                                         // 1779\n                                                                                                                       // 1780\n(function () {                                                                                                         // 1781\n    'use strict';                                                                                                      // 1782\n                                                                                                                       // 1783\n    function filterOnlyParentElements(node) {                                                                          // 1784\n        if (Util.isBlockContainer(node)) {                                                                             // 1785\n            return NodeFilter.FILTER_ACCEPT;                                                                           // 1786\n        } else {                                                                                                       // 1787\n            return NodeFilter.FILTER_SKIP;                                                                             // 1788\n        }                                                                                                              // 1789\n    }                                                                                                                  // 1790\n                                                                                                                       // 1791\n    Selection = {                                                                                                      // 1792\n        findMatchingSelectionParent: function (testElementFunction, contentWindow) {                                   // 1793\n            var selection = contentWindow.getSelection(),                                                              // 1794\n                range,                                                                                                 // 1795\n                current;                                                                                               // 1796\n                                                                                                                       // 1797\n            if (selection.rangeCount === 0) {                                                                          // 1798\n                return false;                                                                                          // 1799\n            }                                                                                                          // 1800\n                                                                                                                       // 1801\n            range = selection.getRangeAt(0);                                                                           // 1802\n            current = range.commonAncestorContainer;                                                                   // 1803\n                                                                                                                       // 1804\n            return Util.traverseUp(current, testElementFunction);                                                      // 1805\n        },                                                                                                             // 1806\n                                                                                                                       // 1807\n        getSelectionElement: function (contentWindow) {                                                                // 1808\n            return this.findMatchingSelectionParent(function (el) {                                                    // 1809\n                return Util.isMediumEditorElement(el);                                                                 // 1810\n            }, contentWindow);                                                                                         // 1811\n        },                                                                                                             // 1812\n                                                                                                                       // 1813\n        // Utility method called from importSelection only                                                             // 1814\n        importSelectionMoveCursorPastAnchor: function (selectionState, range) {                                        // 1815\n            var nodeInsideAnchorTagFunction = function (node) {                                                        // 1816\n                return node.nodeName.toLowerCase() === 'a';                                                            // 1817\n            };                                                                                                         // 1818\n            if (selectionState.start === selectionState.end &&                                                         // 1819\n                    range.startContainer.nodeType === 3 &&                                                             // 1820\n                    range.startOffset === range.startContainer.nodeValue.length &&                                     // 1821\n                    Util.traverseUp(range.startContainer, nodeInsideAnchorTagFunction)) {                              // 1822\n                var prevNode = range.startContainer,                                                                   // 1823\n                    currentNode = range.startContainer.parentNode;                                                     // 1824\n                while (currentNode !== null && currentNode.nodeName.toLowerCase() !== 'a') {                           // 1825\n                    if (currentNode.childNodes[currentNode.childNodes.length - 1] !== prevNode) {                      // 1826\n                        currentNode = null;                                                                            // 1827\n                    } else {                                                                                           // 1828\n                        prevNode = currentNode;                                                                        // 1829\n                        currentNode = currentNode.parentNode;                                                          // 1830\n                    }                                                                                                  // 1831\n                }                                                                                                      // 1832\n                if (currentNode !== null && currentNode.nodeName.toLowerCase() === 'a') {                              // 1833\n                    var currentNodeIndex = null;                                                                       // 1834\n                    for (var i = 0; currentNodeIndex === null && i < currentNode.parentNode.childNodes.length; i++) {  // 1835\n                        if (currentNode.parentNode.childNodes[i] === currentNode) {                                    // 1836\n                            currentNodeIndex = i;                                                                      // 1837\n                        }                                                                                              // 1838\n                    }                                                                                                  // 1839\n                    range.setStart(currentNode.parentNode, currentNodeIndex + 1);                                      // 1840\n                    range.collapse(true);                                                                              // 1841\n                }                                                                                                      // 1842\n            }                                                                                                          // 1843\n            return range;                                                                                              // 1844\n        },                                                                                                             // 1845\n                                                                                                                       // 1846\n        // Returns 0 unless the cursor is within or preceded by empty paragraphs/blocks,                               // 1847\n        // in which case it returns the count of such preceding paragraphs, including                                  // 1848\n        // the empty paragraph in which the cursor itself may be embedded.                                             // 1849\n        getIndexRelativeToAdjacentEmptyBlocks: function (doc, root, cursorContainer, cursorOffset) {                   // 1850\n            // If there is text in front of the cursor, that means there isn't only empty blocks before it             // 1851\n            if (cursorContainer.nodeType === 3 && cursorOffset > 0) {                                                  // 1852\n                return 0;                                                                                              // 1853\n            }                                                                                                          // 1854\n                                                                                                                       // 1855\n            // Check if the block that contains the cursor has any other text in front of the cursor                   // 1856\n            var node = cursorContainer;                                                                                // 1857\n            if (node.nodeType !== 3) {                                                                                 // 1858\n                //node = cursorContainer.childNodes.length === cursorOffset ? null : cursorContainer.childNodes[cursorOffset];\n                node = cursorContainer.childNodes[cursorOffset];                                                       // 1860\n            }                                                                                                          // 1861\n            if (node && !Util.isElementAtBeginningOfBlock(node)) {                                                     // 1862\n                return 0;                                                                                              // 1863\n            }                                                                                                          // 1864\n                                                                                                                       // 1865\n            // Walk over block elements, counting number of empty blocks between last piece of text                    // 1866\n            // and the block the cursor is in                                                                          // 1867\n            var treeWalker = doc.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, filterOnlyParentElements, false),     // 1868\n                emptyBlocksCount = 0;                                                                                  // 1869\n            while (treeWalker.nextNode()) {                                                                            // 1870\n                var blockIsEmpty = treeWalker.currentNode.textContent === '';                                          // 1871\n                if (blockIsEmpty || emptyBlocksCount > 0) {                                                            // 1872\n                    emptyBlocksCount += 1;                                                                             // 1873\n                }                                                                                                      // 1874\n                if (Util.isDescendant(treeWalker.currentNode, cursorContainer, true)) {                                // 1875\n                    return emptyBlocksCount;                                                                           // 1876\n                }                                                                                                      // 1877\n                if (!blockIsEmpty) {                                                                                   // 1878\n                    emptyBlocksCount = 0;                                                                              // 1879\n                }                                                                                                      // 1880\n            }                                                                                                          // 1881\n                                                                                                                       // 1882\n            return emptyBlocksCount;                                                                                   // 1883\n        },                                                                                                             // 1884\n                                                                                                                       // 1885\n        selectionInContentEditableFalse: function (contentWindow) {                                                    // 1886\n            // determine if the current selection is exclusively inside                                                // 1887\n            // a contenteditable=\"false\", though treat the case of an                                                  // 1888\n            // explicit contenteditable=\"true\" inside a \"false\" as false.                                              // 1889\n            var sawtrue,                                                                                               // 1890\n                sawfalse = this.findMatchingSelectionParent(function (el) {                                            // 1891\n                    var ce = el && el.getAttribute('contenteditable');                                                 // 1892\n                    if (ce === 'true') {                                                                               // 1893\n                        sawtrue = true;                                                                                // 1894\n                    }                                                                                                  // 1895\n                    return el.nodeName !== '#text' && ce === 'false';                                                  // 1896\n                }, contentWindow);                                                                                     // 1897\n                                                                                                                       // 1898\n            return !sawtrue && sawfalse;                                                                               // 1899\n        },                                                                                                             // 1900\n                                                                                                                       // 1901\n        // http://stackoverflow.com/questions/4176923/html-of-selected-text                                            // 1902\n        // by Tim Down                                                                                                 // 1903\n        getSelectionHtml: function getSelectionHtml(doc) {                                                             // 1904\n            var i,                                                                                                     // 1905\n                html = '',                                                                                             // 1906\n                sel = doc.getSelection(),                                                                              // 1907\n                len,                                                                                                   // 1908\n                container;                                                                                             // 1909\n            if (sel.rangeCount) {                                                                                      // 1910\n                container = doc.createElement('div');                                                                  // 1911\n                for (i = 0, len = sel.rangeCount; i < len; i += 1) {                                                   // 1912\n                    container.appendChild(sel.getRangeAt(i).cloneContents());                                          // 1913\n                }                                                                                                      // 1914\n                html = container.innerHTML;                                                                            // 1915\n            }                                                                                                          // 1916\n            return html;                                                                                               // 1917\n        },                                                                                                             // 1918\n                                                                                                                       // 1919\n        /**                                                                                                            // 1920\n         *  Find the caret position within an element irrespective of any inline tags it may contain.                  // 1921\n         *                                                                                                             // 1922\n         *  @param {DOMElement} An element containing the cursor to find offsets relative to.                          // 1923\n         *  @param {Range} A Range representing cursor position. Will window.getSelection if none is passed.           // 1924\n         *  @return {Object} 'left' and 'right' attributes contain offsets from begining and end of Element            // 1925\n         */                                                                                                            // 1926\n        getCaretOffsets: function getCaretOffsets(element, range) {                                                    // 1927\n            var preCaretRange, postCaretRange;                                                                         // 1928\n                                                                                                                       // 1929\n            if (!range) {                                                                                              // 1930\n                range = window.getSelection().getRangeAt(0);                                                           // 1931\n            }                                                                                                          // 1932\n                                                                                                                       // 1933\n            preCaretRange = range.cloneRange();                                                                        // 1934\n            postCaretRange = range.cloneRange();                                                                       // 1935\n                                                                                                                       // 1936\n            preCaretRange.selectNodeContents(element);                                                                 // 1937\n            preCaretRange.setEnd(range.endContainer, range.endOffset);                                                 // 1938\n                                                                                                                       // 1939\n            postCaretRange.selectNodeContents(element);                                                                // 1940\n            postCaretRange.setStart(range.endContainer, range.endOffset);                                              // 1941\n                                                                                                                       // 1942\n            return {                                                                                                   // 1943\n                left: preCaretRange.toString().length,                                                                 // 1944\n                right: postCaretRange.toString().length                                                                // 1945\n            };                                                                                                         // 1946\n        },                                                                                                             // 1947\n                                                                                                                       // 1948\n        // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox        // 1949\n        rangeSelectsSingleNode: function (range) {                                                                     // 1950\n            var startNode = range.startContainer;                                                                      // 1951\n            return startNode === range.endContainer &&                                                                 // 1952\n                startNode.hasChildNodes() &&                                                                           // 1953\n                range.endOffset === range.startOffset + 1;                                                             // 1954\n        },                                                                                                             // 1955\n                                                                                                                       // 1956\n        getSelectedParentElement: function (range) {                                                                   // 1957\n            if (!range) {                                                                                              // 1958\n                return null;                                                                                           // 1959\n            }                                                                                                          // 1960\n                                                                                                                       // 1961\n            // Selection encompasses a single element                                                                  // 1962\n            if (this.rangeSelectsSingleNode(range) && range.startContainer.childNodes[range.startOffset].nodeType !== 3) {\n                return range.startContainer.childNodes[range.startOffset];                                             // 1964\n            }                                                                                                          // 1965\n                                                                                                                       // 1966\n            // Selection range starts inside a text node, so get its parent                                            // 1967\n            if (range.startContainer.nodeType === 3) {                                                                 // 1968\n                return range.startContainer.parentNode;                                                                // 1969\n            }                                                                                                          // 1970\n                                                                                                                       // 1971\n            // Selection starts inside an element                                                                      // 1972\n            return range.startContainer;                                                                               // 1973\n        },                                                                                                             // 1974\n                                                                                                                       // 1975\n        getSelectedElements: function (doc) {                                                                          // 1976\n            var selection = doc.getSelection(),                                                                        // 1977\n                range,                                                                                                 // 1978\n                toRet,                                                                                                 // 1979\n                currNode;                                                                                              // 1980\n                                                                                                                       // 1981\n            if (!selection.rangeCount || selection.isCollapsed || !selection.getRangeAt(0).commonAncestorContainer) {  // 1982\n                return [];                                                                                             // 1983\n            }                                                                                                          // 1984\n                                                                                                                       // 1985\n            range = selection.getRangeAt(0);                                                                           // 1986\n                                                                                                                       // 1987\n            if (range.commonAncestorContainer.nodeType === 3) {                                                        // 1988\n                toRet = [];                                                                                            // 1989\n                currNode = range.commonAncestorContainer;                                                              // 1990\n                while (currNode.parentNode && currNode.parentNode.childNodes.length === 1) {                           // 1991\n                    toRet.push(currNode.parentNode);                                                                   // 1992\n                    currNode = currNode.parentNode;                                                                    // 1993\n                }                                                                                                      // 1994\n                                                                                                                       // 1995\n                return toRet;                                                                                          // 1996\n            }                                                                                                          // 1997\n                                                                                                                       // 1998\n            return [].filter.call(range.commonAncestorContainer.getElementsByTagName('*'), function (el) {             // 1999\n                return (typeof selection.containsNode === 'function') ? selection.containsNode(el, true) : true;       // 2000\n            });                                                                                                        // 2001\n        },                                                                                                             // 2002\n                                                                                                                       // 2003\n        selectNode: function (node, doc) {                                                                             // 2004\n            var range = doc.createRange(),                                                                             // 2005\n                sel = doc.getSelection();                                                                              // 2006\n                                                                                                                       // 2007\n            range.selectNodeContents(node);                                                                            // 2008\n            sel.removeAllRanges();                                                                                     // 2009\n            sel.addRange(range);                                                                                       // 2010\n        },                                                                                                             // 2011\n                                                                                                                       // 2012\n        select: function (doc, startNode, startOffset, endNode, endOffset) {                                           // 2013\n            doc.getSelection().removeAllRanges();                                                                      // 2014\n            var range = doc.createRange();                                                                             // 2015\n            range.setStart(startNode, startOffset);                                                                    // 2016\n            if (endNode) {                                                                                             // 2017\n                range.setEnd(endNode, endOffset);                                                                      // 2018\n            } else {                                                                                                   // 2019\n                range.collapse(true);                                                                                  // 2020\n            }                                                                                                          // 2021\n            doc.getSelection().addRange(range);                                                                        // 2022\n            return range;                                                                                              // 2023\n        },                                                                                                             // 2024\n                                                                                                                       // 2025\n        /**                                                                                                            // 2026\n         * Move cursor to the given node with the given offset.                                                        // 2027\n         *                                                                                                             // 2028\n         * @param  {DomDocument} doc     Current document                                                              // 2029\n         * @param  {DomElement}  node    Element where to jump                                                         // 2030\n         * @param  {integer}     offset  Where in the element should we jump, 0 by default                             // 2031\n         */                                                                                                            // 2032\n        moveCursor: function (doc, node, offset) {                                                                     // 2033\n            this.select(doc, node, offset);                                                                            // 2034\n        },                                                                                                             // 2035\n                                                                                                                       // 2036\n        getSelectionRange: function (ownerDocument) {                                                                  // 2037\n            var selection = ownerDocument.getSelection();                                                              // 2038\n            if (selection.rangeCount === 0) {                                                                          // 2039\n                return null;                                                                                           // 2040\n            }                                                                                                          // 2041\n            return selection.getRangeAt(0);                                                                            // 2042\n        },                                                                                                             // 2043\n                                                                                                                       // 2044\n        // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n        // by You                                                                                                      // 2046\n        getSelectionStart: function (ownerDocument) {                                                                  // 2047\n            var node = ownerDocument.getSelection().anchorNode,                                                        // 2048\n                startNode = (node && node.nodeType === 3 ? node.parentNode : node);                                    // 2049\n                                                                                                                       // 2050\n            return startNode;                                                                                          // 2051\n        }                                                                                                              // 2052\n    };                                                                                                                 // 2053\n}());                                                                                                                  // 2054\n                                                                                                                       // 2055\nvar Events;                                                                                                            // 2056\n                                                                                                                       // 2057\n(function () {                                                                                                         // 2058\n    'use strict';                                                                                                      // 2059\n                                                                                                                       // 2060\n    Events = function (instance) {                                                                                     // 2061\n        this.base = instance;                                                                                          // 2062\n        this.options = this.base.options;                                                                              // 2063\n        this.events = [];                                                                                              // 2064\n        this.customEvents = {};                                                                                        // 2065\n        this.listeners = {};                                                                                           // 2066\n    };                                                                                                                 // 2067\n                                                                                                                       // 2068\n    Events.prototype = {                                                                                               // 2069\n        InputEventOnContenteditableSupported: !Util.isIE,                                                              // 2070\n                                                                                                                       // 2071\n        // Helpers for event handling                                                                                  // 2072\n                                                                                                                       // 2073\n        attachDOMEvent: function (target, event, listener, useCapture) {                                               // 2074\n            target.addEventListener(event, listener, useCapture);                                                      // 2075\n            this.events.push([target, event, listener, useCapture]);                                                   // 2076\n        },                                                                                                             // 2077\n                                                                                                                       // 2078\n        detachDOMEvent: function (target, event, listener, useCapture) {                                               // 2079\n            var index = this.indexOfListener(target, event, listener, useCapture),                                     // 2080\n                e;                                                                                                     // 2081\n            if (index !== -1) {                                                                                        // 2082\n                e = this.events.splice(index, 1)[0];                                                                   // 2083\n                e[0].removeEventListener(e[1], e[2], e[3]);                                                            // 2084\n            }                                                                                                          // 2085\n        },                                                                                                             // 2086\n                                                                                                                       // 2087\n        indexOfListener: function (target, event, listener, useCapture) {                                              // 2088\n            var i, n, item;                                                                                            // 2089\n            for (i = 0, n = this.events.length; i < n; i = i + 1) {                                                    // 2090\n                item = this.events[i];                                                                                 // 2091\n                if (item[0] === target && item[1] === event && item[2] === listener && item[3] === useCapture) {       // 2092\n                    return i;                                                                                          // 2093\n                }                                                                                                      // 2094\n            }                                                                                                          // 2095\n            return -1;                                                                                                 // 2096\n        },                                                                                                             // 2097\n                                                                                                                       // 2098\n        detachAllDOMEvents: function () {                                                                              // 2099\n            var e = this.events.pop();                                                                                 // 2100\n            while (e) {                                                                                                // 2101\n                e[0].removeEventListener(e[1], e[2], e[3]);                                                            // 2102\n                e = this.events.pop();                                                                                 // 2103\n            }                                                                                                          // 2104\n        },                                                                                                             // 2105\n                                                                                                                       // 2106\n        // custom events                                                                                               // 2107\n        attachCustomEvent: function (event, listener) {                                                                // 2108\n            this.setupListener(event);                                                                                 // 2109\n            if (!this.customEvents[event]) {                                                                           // 2110\n                this.customEvents[event] = [];                                                                         // 2111\n            }                                                                                                          // 2112\n            this.customEvents[event].push(listener);                                                                   // 2113\n        },                                                                                                             // 2114\n                                                                                                                       // 2115\n        detachCustomEvent: function (event, listener) {                                                                // 2116\n            var index = this.indexOfCustomListener(event, listener);                                                   // 2117\n            if (index !== -1) {                                                                                        // 2118\n                this.customEvents[event].splice(index, 1);                                                             // 2119\n                // TODO: If array is empty, should detach internal listeners via destroyListener()                     // 2120\n            }                                                                                                          // 2121\n        },                                                                                                             // 2122\n                                                                                                                       // 2123\n        indexOfCustomListener: function (event, listener) {                                                            // 2124\n            if (!this.customEvents[event] || !this.customEvents[event].length) {                                       // 2125\n                return -1;                                                                                             // 2126\n            }                                                                                                          // 2127\n                                                                                                                       // 2128\n            return this.customEvents[event].indexOf(listener);                                                         // 2129\n        },                                                                                                             // 2130\n                                                                                                                       // 2131\n        detachAllCustomEvents: function () {                                                                           // 2132\n            this.customEvents = {};                                                                                    // 2133\n            // TODO: Should detach internal listeners here via destroyListener()                                       // 2134\n        },                                                                                                             // 2135\n                                                                                                                       // 2136\n        triggerCustomEvent: function (name, data, editable) {                                                          // 2137\n            if (this.customEvents[name]) {                                                                             // 2138\n                this.customEvents[name].forEach(function (listener) {                                                  // 2139\n                    listener(data, editable);                                                                          // 2140\n                });                                                                                                    // 2141\n            }                                                                                                          // 2142\n        },                                                                                                             // 2143\n                                                                                                                       // 2144\n        // Cleaning up                                                                                                 // 2145\n                                                                                                                       // 2146\n        destroy: function () {                                                                                         // 2147\n            this.detachAllDOMEvents();                                                                                 // 2148\n            this.detachAllCustomEvents();                                                                              // 2149\n            this.detachExecCommand();                                                                                  // 2150\n                                                                                                                       // 2151\n            if (this.base.elements) {                                                                                  // 2152\n                this.base.elements.forEach(function (element) {                                                        // 2153\n                    element.removeAttribute('data-medium-focused');                                                    // 2154\n                });                                                                                                    // 2155\n            }                                                                                                          // 2156\n        },                                                                                                             // 2157\n                                                                                                                       // 2158\n        // Listening to calls to document.execCommand                                                                  // 2159\n                                                                                                                       // 2160\n        // Attach a listener to be notified when document.execCommand is called                                        // 2161\n        attachToExecCommand: function () {                                                                             // 2162\n            if (this.execCommandListener) {                                                                            // 2163\n                return;                                                                                                // 2164\n            }                                                                                                          // 2165\n                                                                                                                       // 2166\n            // Store an instance of the listener so:                                                                   // 2167\n            // 1) We only attach to execCommand once                                                                   // 2168\n            // 2) We can remove the listener later                                                                     // 2169\n            this.execCommandListener = function (execInfo) {                                                           // 2170\n                this.handleDocumentExecCommand(execInfo);                                                              // 2171\n            }.bind(this);                                                                                              // 2172\n                                                                                                                       // 2173\n            // Ensure that execCommand has been wrapped correctly                                                      // 2174\n            this.wrapExecCommand();                                                                                    // 2175\n                                                                                                                       // 2176\n            // Add listener to list of execCommand listeners                                                           // 2177\n            this.options.ownerDocument.execCommand.listeners.push(this.execCommandListener);                           // 2178\n        },                                                                                                             // 2179\n                                                                                                                       // 2180\n        // Remove our listener for calls to document.execCommand                                                       // 2181\n        detachExecCommand: function () {                                                                               // 2182\n            var doc = this.options.ownerDocument;                                                                      // 2183\n            if (!this.execCommandListener || !doc.execCommand.listeners) {                                             // 2184\n                return;                                                                                                // 2185\n            }                                                                                                          // 2186\n                                                                                                                       // 2187\n            // Find the index of this listener in the array of listeners so it can be removed                          // 2188\n            var index = doc.execCommand.listeners.indexOf(this.execCommandListener);                                   // 2189\n            if (index !== -1) {                                                                                        // 2190\n                doc.execCommand.listeners.splice(index, 1);                                                            // 2191\n            }                                                                                                          // 2192\n                                                                                                                       // 2193\n            // If the list of listeners is now empty, put execCommand back to its original state                       // 2194\n            if (!doc.execCommand.listeners.length) {                                                                   // 2195\n                this.unwrapExecCommand();                                                                              // 2196\n            }                                                                                                          // 2197\n        },                                                                                                             // 2198\n                                                                                                                       // 2199\n        // Wrap document.execCommand in a custom method so we can listen to calls to it                                // 2200\n        wrapExecCommand: function () {                                                                                 // 2201\n            var doc = this.options.ownerDocument;                                                                      // 2202\n                                                                                                                       // 2203\n            // Ensure all instance of MediumEditor only wrap execCommand once                                          // 2204\n            if (doc.execCommand.listeners) {                                                                           // 2205\n                return;                                                                                                // 2206\n            }                                                                                                          // 2207\n                                                                                                                       // 2208\n            // Create a wrapper method for execCommand which will:                                                     // 2209\n            // 1) Call document.execCommand with the correct arguments                                                 // 2210\n            // 2) Loop through any listeners and notify them that execCommand was called                               // 2211\n            //    passing extra info on the call                                                                       // 2212\n            // 3) Return the result                                                                                    // 2213\n            var wrapper = function (aCommandName, aShowDefaultUI, aValueArgument) {                                    // 2214\n                var result = doc.execCommand.orig.apply(this, arguments);                                              // 2215\n                                                                                                                       // 2216\n                if (!doc.execCommand.listeners) {                                                                      // 2217\n                    return result;                                                                                     // 2218\n                }                                                                                                      // 2219\n                                                                                                                       // 2220\n                var args = Array.prototype.slice.call(arguments);                                                      // 2221\n                doc.execCommand.listeners.forEach(function (listener) {                                                // 2222\n                    listener({                                                                                         // 2223\n                        command: aCommandName,                                                                         // 2224\n                        value: aValueArgument,                                                                         // 2225\n                        args: args,                                                                                    // 2226\n                        result: result                                                                                 // 2227\n                    });                                                                                                // 2228\n                });                                                                                                    // 2229\n                                                                                                                       // 2230\n                return result;                                                                                         // 2231\n            };                                                                                                         // 2232\n                                                                                                                       // 2233\n            // Store a reference to the original execCommand                                                           // 2234\n            wrapper.orig = doc.execCommand;                                                                            // 2235\n                                                                                                                       // 2236\n            // Attach an array for storing listeners                                                                   // 2237\n            wrapper.listeners = [];                                                                                    // 2238\n                                                                                                                       // 2239\n            // Overwrite execCommand                                                                                   // 2240\n            doc.execCommand = wrapper;                                                                                 // 2241\n        },                                                                                                             // 2242\n                                                                                                                       // 2243\n        // Revert document.execCommand back to its original self                                                       // 2244\n        unwrapExecCommand: function () {                                                                               // 2245\n            var doc = this.options.ownerDocument;                                                                      // 2246\n            if (!doc.execCommand.orig) {                                                                               // 2247\n                return;                                                                                                // 2248\n            }                                                                                                          // 2249\n                                                                                                                       // 2250\n            // Use the reference to the original execCommand to revert back                                            // 2251\n            doc.execCommand = doc.execCommand.orig;                                                                    // 2252\n        },                                                                                                             // 2253\n                                                                                                                       // 2254\n        // Listening to browser events to emit events medium-editor cares about                                        // 2255\n        setupListener: function (name) {                                                                               // 2256\n            if (this.listeners[name]) {                                                                                // 2257\n                return;                                                                                                // 2258\n            }                                                                                                          // 2259\n                                                                                                                       // 2260\n            switch (name) {                                                                                            // 2261\n                case 'externalInteraction':                                                                            // 2262\n                    // Detecting when user has interacted with elements outside of MediumEditor                        // 2263\n                    this.attachDOMEvent(this.options.ownerDocument.body, 'mousedown', this.handleBodyMousedown.bind(this), true);\n                    this.attachDOMEvent(this.options.ownerDocument.body, 'click', this.handleBodyClick.bind(this), true);\n                    this.attachDOMEvent(this.options.ownerDocument.body, 'focus', this.handleBodyFocus.bind(this), true);\n                    break;                                                                                             // 2267\n                case 'blur':                                                                                           // 2268\n                    // Detecting when focus is lost                                                                    // 2269\n                    this.setupListener('externalInteraction');                                                         // 2270\n                    break;                                                                                             // 2271\n                case 'focus':                                                                                          // 2272\n                    // Detecting when focus moves into some part of MediumEditor                                       // 2273\n                    this.setupListener('externalInteraction');                                                         // 2274\n                    break;                                                                                             // 2275\n                case 'editableInput':                                                                                  // 2276\n                    // setup cache for knowing when the content has changed                                            // 2277\n                    this.contentCache = [];                                                                            // 2278\n                    this.base.elements.forEach(function (element) {                                                    // 2279\n                        this.contentCache[element.getAttribute('medium-editor-index')] = element.innerHTML;            // 2280\n                                                                                                                       // 2281\n                        // Attach to the 'oninput' event, handled correctly by most browsers                           // 2282\n                        if (this.InputEventOnContenteditableSupported) {                                               // 2283\n                            this.attachDOMEvent(element, 'input', this.handleInput.bind(this));                        // 2284\n                        }                                                                                              // 2285\n                    }.bind(this));                                                                                     // 2286\n                                                                                                                       // 2287\n                    // For browsers which don't support the input event on contenteditable (IE)                        // 2288\n                    // we'll attach to 'selectionchange' on the document and 'keypress' on the editables               // 2289\n                    if (!this.InputEventOnContenteditableSupported) {                                                  // 2290\n                        this.setupListener('editableKeypress');                                                        // 2291\n                        this.keypressUpdateInput = true;                                                               // 2292\n                        this.attachDOMEvent(document, 'selectionchange', this.handleDocumentSelectionChange.bind(this));\n                        // Listen to calls to execCommand                                                              // 2294\n                        this.attachToExecCommand();                                                                    // 2295\n                    }                                                                                                  // 2296\n                    break;                                                                                             // 2297\n                case 'editableClick':                                                                                  // 2298\n                    // Detecting click in the contenteditables                                                         // 2299\n                    this.attachToEachElement('click', this.handleClick);                                               // 2300\n                    break;                                                                                             // 2301\n                case 'editableBlur':                                                                                   // 2302\n                    // Detecting blur in the contenteditables                                                          // 2303\n                    this.attachToEachElement('blur', this.handleBlur);                                                 // 2304\n                    break;                                                                                             // 2305\n                case 'editableKeypress':                                                                               // 2306\n                    // Detecting keypress in the contenteditables                                                      // 2307\n                    this.attachToEachElement('keypress', this.handleKeypress);                                         // 2308\n                    break;                                                                                             // 2309\n                case 'editableKeyup':                                                                                  // 2310\n                    // Detecting keyup in the contenteditables                                                         // 2311\n                    this.attachToEachElement('keyup', this.handleKeyup);                                               // 2312\n                    break;                                                                                             // 2313\n                case 'editableKeydown':                                                                                // 2314\n                    // Detecting keydown on the contenteditables                                                       // 2315\n                    this.attachToEachElement('keydown', this.handleKeydown);                                           // 2316\n                    break;                                                                                             // 2317\n                case 'editableKeydownEnter':                                                                           // 2318\n                    // Detecting keydown for ENTER on the contenteditables                                             // 2319\n                    this.setupListener('editableKeydown');                                                             // 2320\n                    break;                                                                                             // 2321\n                case 'editableKeydownTab':                                                                             // 2322\n                    // Detecting keydown for TAB on the contenteditable                                                // 2323\n                    this.setupListener('editableKeydown');                                                             // 2324\n                    break;                                                                                             // 2325\n                case 'editableKeydownDelete':                                                                          // 2326\n                    // Detecting keydown for DELETE/BACKSPACE on the contenteditables                                  // 2327\n                    this.setupListener('editableKeydown');                                                             // 2328\n                    break;                                                                                             // 2329\n                case 'editableMouseover':                                                                              // 2330\n                    // Detecting mouseover on the contenteditables                                                     // 2331\n                    this.attachToEachElement('mouseover', this.handleMouseover);                                       // 2332\n                    break;                                                                                             // 2333\n                case 'editableDrag':                                                                                   // 2334\n                    // Detecting dragover and dragleave on the contenteditables                                        // 2335\n                    this.attachToEachElement('dragover', this.handleDragging);                                         // 2336\n                    this.attachToEachElement('dragleave', this.handleDragging);                                        // 2337\n                    break;                                                                                             // 2338\n                case 'editableDrop':                                                                                   // 2339\n                    // Detecting drop on the contenteditables                                                          // 2340\n                    this.attachToEachElement('drop', this.handleDrop);                                                 // 2341\n                    break;                                                                                             // 2342\n                case 'editablePaste':                                                                                  // 2343\n                    // Detecting paste on the contenteditables                                                         // 2344\n                    this.attachToEachElement('paste', this.handlePaste);                                               // 2345\n                    break;                                                                                             // 2346\n            }                                                                                                          // 2347\n            this.listeners[name] = true;                                                                               // 2348\n        },                                                                                                             // 2349\n                                                                                                                       // 2350\n        attachToEachElement: function (name, handler) {                                                                // 2351\n            this.base.elements.forEach(function (element) {                                                            // 2352\n                this.attachDOMEvent(element, name, handler.bind(this));                                                // 2353\n            }, this);                                                                                                  // 2354\n        },                                                                                                             // 2355\n                                                                                                                       // 2356\n        focusElement: function (element) {                                                                             // 2357\n            element.focus();                                                                                           // 2358\n            this.updateFocus(element, { target: element, type: 'focus' });                                             // 2359\n        },                                                                                                             // 2360\n                                                                                                                       // 2361\n        updateFocus: function (target, eventObj) {                                                                     // 2362\n            var toolbar = this.base.getExtensionByName('toolbar'),                                                     // 2363\n                toolbarEl = toolbar ? toolbar.getToolbarElement() : null,                                              // 2364\n                anchorPreview = this.base.getExtensionByName('anchor-preview'),                                        // 2365\n                previewEl = (anchorPreview && anchorPreview.getPreviewElement) ? anchorPreview.getPreviewElement() : null,\n                hadFocus = this.base.getFocusedElement(),                                                              // 2367\n                toFocus;                                                                                               // 2368\n                                                                                                                       // 2369\n            // For clicks, we need to know if the mousedown that caused the click happened inside the existing focused element.\n            // If so, we don't want to focus another element                                                           // 2371\n            if (hadFocus &&                                                                                            // 2372\n                    eventObj.type === 'click' &&                                                                       // 2373\n                    this.lastMousedownTarget &&                                                                        // 2374\n                    (Util.isDescendant(hadFocus, this.lastMousedownTarget, true) ||                                    // 2375\n                     Util.isDescendant(toolbarEl, this.lastMousedownTarget, true) ||                                   // 2376\n                     Util.isDescendant(previewEl, this.lastMousedownTarget, true))) {                                  // 2377\n                toFocus = hadFocus;                                                                                    // 2378\n            }                                                                                                          // 2379\n                                                                                                                       // 2380\n            if (!toFocus) {                                                                                            // 2381\n                this.base.elements.some(function (element) {                                                           // 2382\n                    // If the target is part of an editor element, this is the element getting focus                   // 2383\n                    if (!toFocus && (Util.isDescendant(element, target, true))) {                                      // 2384\n                        toFocus = element;                                                                             // 2385\n                    }                                                                                                  // 2386\n                                                                                                                       // 2387\n                    // bail if we found an element that's getting focus                                                // 2388\n                    return !!toFocus;                                                                                  // 2389\n                }, this);                                                                                              // 2390\n            }                                                                                                          // 2391\n                                                                                                                       // 2392\n            // Check if the target is external (not part of the editor, toolbar, or anchorpreview)                     // 2393\n            var externalEvent = !Util.isDescendant(hadFocus, target, true) &&                                          // 2394\n                                !Util.isDescendant(toolbarEl, target, true) &&                                         // 2395\n                                !Util.isDescendant(previewEl, target, true);                                           // 2396\n                                                                                                                       // 2397\n            if (toFocus !== hadFocus) {                                                                                // 2398\n                // If element has focus, and focus is going outside of editor                                          // 2399\n                // Don't blur focused element if clicking on editor, toolbar, or anchorpreview                         // 2400\n                if (hadFocus && externalEvent) {                                                                       // 2401\n                    // Trigger blur on the editable that has lost focus                                                // 2402\n                    hadFocus.removeAttribute('data-medium-focused');                                                   // 2403\n                    this.triggerCustomEvent('blur', eventObj, hadFocus);                                               // 2404\n                }                                                                                                      // 2405\n                                                                                                                       // 2406\n                // If focus is going into an editor element                                                            // 2407\n                if (toFocus) {                                                                                         // 2408\n                    // Trigger focus on the editable that now has focus                                                // 2409\n                    toFocus.setAttribute('data-medium-focused', true);                                                 // 2410\n                    this.triggerCustomEvent('focus', eventObj, toFocus);                                               // 2411\n                }                                                                                                      // 2412\n            }                                                                                                          // 2413\n                                                                                                                       // 2414\n            if (externalEvent) {                                                                                       // 2415\n                this.triggerCustomEvent('externalInteraction', eventObj);                                              // 2416\n            }                                                                                                          // 2417\n        },                                                                                                             // 2418\n                                                                                                                       // 2419\n        updateInput: function (target, eventObj) {                                                                     // 2420\n            // An event triggered which signifies that the user may have changed someting                              // 2421\n            // Look in our cache of input for the contenteditables to see if something changed                         // 2422\n            var index = target.getAttribute('medium-editor-index');                                                    // 2423\n            if (target.innerHTML !== this.contentCache[index]) {                                                       // 2424\n                // The content has changed since the last time we checked, fire the event                              // 2425\n                this.triggerCustomEvent('editableInput', eventObj, target);                                            // 2426\n            }                                                                                                          // 2427\n            this.contentCache[index] = target.innerHTML;                                                               // 2428\n        },                                                                                                             // 2429\n                                                                                                                       // 2430\n        handleDocumentSelectionChange: function (event) {                                                              // 2431\n            // When selectionchange fires, target and current target are set                                           // 2432\n            // to document, since this is where the event is handled                                                   // 2433\n            // However, currentTarget will have an 'activeElement' property                                            // 2434\n            // which will point to whatever element has focus.                                                         // 2435\n            if (event.currentTarget && event.currentTarget.activeElement) {                                            // 2436\n                var activeElement = event.currentTarget.activeElement,                                                 // 2437\n                    currentTarget;                                                                                     // 2438\n                // We can look at the 'activeElement' to determine if the selectionchange has                          // 2439\n                // happened within a contenteditable owned by this instance of MediumEditor                            // 2440\n                this.base.elements.some(function (element) {                                                           // 2441\n                    if (Util.isDescendant(element, activeElement, true)) {                                             // 2442\n                        currentTarget = element;                                                                       // 2443\n                        return true;                                                                                   // 2444\n                    }                                                                                                  // 2445\n                    return false;                                                                                      // 2446\n                }, this);                                                                                              // 2447\n                                                                                                                       // 2448\n                // We know selectionchange fired within one of our contenteditables                                    // 2449\n                if (currentTarget) {                                                                                   // 2450\n                    this.updateInput(currentTarget, { target: activeElement, currentTarget: currentTarget });          // 2451\n                }                                                                                                      // 2452\n            }                                                                                                          // 2453\n        },                                                                                                             // 2454\n                                                                                                                       // 2455\n        handleDocumentExecCommand: function () {                                                                       // 2456\n            // document.execCommand has been called                                                                    // 2457\n            // If one of our contenteditables currently has focus, we should                                           // 2458\n            // attempt to trigger the 'editableInput' event                                                            // 2459\n            var target = this.base.getFocusedElement();                                                                // 2460\n            if (target) {                                                                                              // 2461\n                this.updateInput(target, { target: target, currentTarget: target });                                   // 2462\n            }                                                                                                          // 2463\n        },                                                                                                             // 2464\n                                                                                                                       // 2465\n        handleBodyClick: function (event) {                                                                            // 2466\n            this.updateFocus(event.target, event);                                                                     // 2467\n        },                                                                                                             // 2468\n                                                                                                                       // 2469\n        handleBodyFocus: function (event) {                                                                            // 2470\n            this.updateFocus(event.target, event);                                                                     // 2471\n        },                                                                                                             // 2472\n                                                                                                                       // 2473\n        handleBodyMousedown: function (event) {                                                                        // 2474\n            this.lastMousedownTarget = event.target;                                                                   // 2475\n        },                                                                                                             // 2476\n                                                                                                                       // 2477\n        handleInput: function (event) {                                                                                // 2478\n            this.updateInput(event.currentTarget, event);                                                              // 2479\n        },                                                                                                             // 2480\n                                                                                                                       // 2481\n        handleClick: function (event) {                                                                                // 2482\n            this.triggerCustomEvent('editableClick', event, event.currentTarget);                                      // 2483\n        },                                                                                                             // 2484\n                                                                                                                       // 2485\n        handleBlur: function (event) {                                                                                 // 2486\n            this.triggerCustomEvent('editableBlur', event, event.currentTarget);                                       // 2487\n        },                                                                                                             // 2488\n                                                                                                                       // 2489\n        handleKeypress: function (event) {                                                                             // 2490\n            this.triggerCustomEvent('editableKeypress', event, event.currentTarget);                                   // 2491\n                                                                                                                       // 2492\n            // If we're doing manual detection of the editableInput event we need                                      // 2493\n            // to check for input changes during 'keypress'                                                            // 2494\n            if (this.keypressUpdateInput) {                                                                            // 2495\n                var eventObj = { target: event.target, currentTarget: event.currentTarget };                           // 2496\n                                                                                                                       // 2497\n                // In IE, we need to let the rest of the event stack complete before we detect                         // 2498\n                // changes to input, so using setTimeout here                                                          // 2499\n                setTimeout(function () {                                                                               // 2500\n                    this.updateInput(eventObj.currentTarget, eventObj);                                                // 2501\n                }.bind(this), 0);                                                                                      // 2502\n            }                                                                                                          // 2503\n        },                                                                                                             // 2504\n                                                                                                                       // 2505\n        handleKeyup: function (event) {                                                                                // 2506\n            this.triggerCustomEvent('editableKeyup', event, event.currentTarget);                                      // 2507\n        },                                                                                                             // 2508\n                                                                                                                       // 2509\n        handleMouseover: function (event) {                                                                            // 2510\n            this.triggerCustomEvent('editableMouseover', event, event.currentTarget);                                  // 2511\n        },                                                                                                             // 2512\n                                                                                                                       // 2513\n        handleDragging: function (event) {                                                                             // 2514\n            this.triggerCustomEvent('editableDrag', event, event.currentTarget);                                       // 2515\n        },                                                                                                             // 2516\n                                                                                                                       // 2517\n        handleDrop: function (event) {                                                                                 // 2518\n            this.triggerCustomEvent('editableDrop', event, event.currentTarget);                                       // 2519\n        },                                                                                                             // 2520\n                                                                                                                       // 2521\n        handlePaste: function (event) {                                                                                // 2522\n            this.triggerCustomEvent('editablePaste', event, event.currentTarget);                                      // 2523\n        },                                                                                                             // 2524\n                                                                                                                       // 2525\n        handleKeydown: function (event) {                                                                              // 2526\n            this.triggerCustomEvent('editableKeydown', event, event.currentTarget);                                    // 2527\n                                                                                                                       // 2528\n            if (Util.isKey(event, Util.keyCode.ENTER)) {                                                               // 2529\n                return this.triggerCustomEvent('editableKeydownEnter', event, event.currentTarget);                    // 2530\n            }                                                                                                          // 2531\n                                                                                                                       // 2532\n            if (Util.isKey(event, Util.keyCode.TAB)) {                                                                 // 2533\n                return this.triggerCustomEvent('editableKeydownTab', event, event.currentTarget);                      // 2534\n            }                                                                                                          // 2535\n                                                                                                                       // 2536\n            if (Util.isKey(event, [Util.keyCode.DELETE, Util.keyCode.BACKSPACE])) {                                    // 2537\n                return this.triggerCustomEvent('editableKeydownDelete', event, event.currentTarget);                   // 2538\n            }                                                                                                          // 2539\n        }                                                                                                              // 2540\n    };                                                                                                                 // 2541\n}());                                                                                                                  // 2542\n                                                                                                                       // 2543\nvar Button;                                                                                                            // 2544\n(function () {                                                                                                         // 2545\n    'use strict';                                                                                                      // 2546\n                                                                                                                       // 2547\n    /*global Extension, buttonDefaults */                                                                              // 2548\n                                                                                                                       // 2549\n    Button = Extension.extend({                                                                                        // 2550\n                                                                                                                       // 2551\n        /* Button Options */                                                                                           // 2552\n                                                                                                                       // 2553\n        /* action: [string]                                                                                            // 2554\n         * The action argument to pass to MediumEditor.execAction()                                                    // 2555\n         * when the button is clicked                                                                                  // 2556\n         */                                                                                                            // 2557\n        action: undefined,                                                                                             // 2558\n                                                                                                                       // 2559\n        /* aria: [string]                                                                                              // 2560\n         * The value to add as the aria-label attribute of the button                                                  // 2561\n         * element displayed in the toolbar.                                                                           // 2562\n         * This is also used as the tooltip for the button                                                             // 2563\n         */                                                                                                            // 2564\n        aria: undefined,                                                                                               // 2565\n                                                                                                                       // 2566\n        /* tagNames: [Array]                                                                                           // 2567\n         * NOTE: This is not used if useQueryState is set to true.                                                     // 2568\n         *                                                                                                             // 2569\n         * Array of element tag names that would indicate that this                                                    // 2570\n         * button has already been applied. If this action has already                                                 // 2571\n         * been applied, the button will be displayed as 'active' in the toolbar                                       // 2572\n         *                                                                                                             // 2573\n         * Example:                                                                                                    // 2574\n         * For 'bold', if the text is ever within a <b> or <strong>                                                    // 2575\n         * tag that indicates the text is already bold. So the array                                                   // 2576\n         * of tagNames for bold would be: ['b', 'strong']                                                              // 2577\n         */                                                                                                            // 2578\n        tagNames: undefined,                                                                                           // 2579\n                                                                                                                       // 2580\n        /* style: [Object]                                                                                             // 2581\n         * NOTE: This is not used if useQueryState is set to true.                                                     // 2582\n         *                                                                                                             // 2583\n         * A pair of css property & value(s) that indicate that this                                                   // 2584\n         * button has already been applied. If this action has already                                                 // 2585\n         * been applied, the button will be displayed as 'active' in the toolbar                                       // 2586\n         * Properties of the object:                                                                                   // 2587\n         *   prop [String]: name of the css property                                                                   // 2588\n         *   value [String]: value(s) of the css property                                                              // 2589\n         *                   multiple values can be separated by a '|'                                                 // 2590\n         *                                                                                                             // 2591\n         * Example:                                                                                                    // 2592\n         * For 'bold', if the text is ever within an element with a 'font-weight'                                      // 2593\n         * style property set to '700' or 'bold', that indicates the text                                              // 2594\n         * is already bold.  So the style object for bold would be:                                                    // 2595\n         * { prop: 'font-weight', value: '700|bold' }                                                                  // 2596\n         */                                                                                                            // 2597\n        style: undefined,                                                                                              // 2598\n                                                                                                                       // 2599\n        /* useQueryState: [boolean]                                                                                    // 2600\n         * Enables/disables whether this button should use the built-in                                                // 2601\n         * document.queryCommandState() method to determine whether                                                    // 2602\n         * the action has already been applied.  If the action has already                                             // 2603\n         * been applied, the button will be displayed as 'active' in the toolbar                                       // 2604\n         *                                                                                                             // 2605\n         * Example:                                                                                                    // 2606\n         * For 'bold', if this is set to true, the code will call:                                                     // 2607\n         * document.queryCommandState('bold') which will return true if the                                            // 2608\n         * browser thinks the text is already bold, and false otherwise                                                // 2609\n         */                                                                                                            // 2610\n        useQueryState: undefined,                                                                                      // 2611\n                                                                                                                       // 2612\n        /* contentDefault: [string]                                                                                    // 2613\n         * Default innerHTML to put inside the button                                                                  // 2614\n         */                                                                                                            // 2615\n        contentDefault: undefined,                                                                                     // 2616\n                                                                                                                       // 2617\n        /* contentFA: [string]                                                                                         // 2618\n         * The innerHTML to use for the content of the button                                                          // 2619\n         * if the `buttonLabels` option for MediumEditor is set to 'fontawesome'                                       // 2620\n         */                                                                                                            // 2621\n        contentFA: undefined,                                                                                          // 2622\n                                                                                                                       // 2623\n        /* classList: [Array]                                                                                          // 2624\n         * An array of classNames (strings) to be added to the button                                                  // 2625\n         */                                                                                                            // 2626\n        classList: undefined,                                                                                          // 2627\n                                                                                                                       // 2628\n        /* attrs: [object]                                                                                             // 2629\n         * A set of key-value pairs to add to the button as custom attributes                                          // 2630\n         */                                                                                                            // 2631\n        attrs: undefined,                                                                                              // 2632\n                                                                                                                       // 2633\n        /* buttonDefaults: [Object]                                                                                    // 2634\n         * Set of default config options for all of the built-in MediumEditor buttons                                  // 2635\n         */                                                                                                            // 2636\n        defaults: buttonDefaults,                                                                                      // 2637\n                                                                                                                       // 2638\n        // The button constructor can optionally accept the name of a built-in button                                  // 2639\n        // (ie 'bold', 'italic', etc.)                                                                                 // 2640\n        // When the name of a button is passed, it will initialize itself with the                                     // 2641\n        // configuration for that button                                                                               // 2642\n        constructor: function (options) {                                                                              // 2643\n            if (Button.isBuiltInButton(options)) {                                                                     // 2644\n                Extension.call(this, this.defaults[options]);                                                          // 2645\n            } else {                                                                                                   // 2646\n                Extension.call(this, options);                                                                         // 2647\n            }                                                                                                          // 2648\n        },                                                                                                             // 2649\n                                                                                                                       // 2650\n        init: function () {                                                                                            // 2651\n            Extension.prototype.init.apply(this, arguments);                                                           // 2652\n                                                                                                                       // 2653\n            this.button = this.createButton();                                                                         // 2654\n            this.on(this.button, 'click', this.handleClick.bind(this));                                                // 2655\n        },                                                                                                             // 2656\n                                                                                                                       // 2657\n        /* getButton: [function ()]                                                                                    // 2658\n         *                                                                                                             // 2659\n         * If implemented, this function will be called when                                                           // 2660\n         * the toolbar is being created.  The DOM Element returned                                                     // 2661\n         * by this function will be appended to the toolbar along                                                      // 2662\n         * with any other buttons.                                                                                     // 2663\n         */                                                                                                            // 2664\n        getButton: function () {                                                                                       // 2665\n            return this.button;                                                                                        // 2666\n        },                                                                                                             // 2667\n                                                                                                                       // 2668\n        getAction: function () {                                                                                       // 2669\n            return (typeof this.action === 'function') ? this.action(this.base.options) : this.action;                 // 2670\n        },                                                                                                             // 2671\n                                                                                                                       // 2672\n        getAria: function () {                                                                                         // 2673\n            return (typeof this.aria === 'function') ? this.aria(this.base.options) : this.aria;                       // 2674\n        },                                                                                                             // 2675\n                                                                                                                       // 2676\n        getTagNames: function () {                                                                                     // 2677\n            return (typeof this.tagNames === 'function') ? this.tagNames(this.base.options) : this.tagNames;           // 2678\n        },                                                                                                             // 2679\n                                                                                                                       // 2680\n        createButton: function () {                                                                                    // 2681\n            var button = this.document.createElement('button'),                                                        // 2682\n                content = this.contentDefault,                                                                         // 2683\n                ariaLabel = this.getAria(),                                                                            // 2684\n                buttonLabels = this.getEditorOption('buttonLabels');                                                   // 2685\n            // Add class names                                                                                         // 2686\n            button.classList.add('medium-editor-action');                                                              // 2687\n            button.classList.add('medium-editor-action-' + this.name);                                                 // 2688\n            if (this.classList) {                                                                                      // 2689\n                this.classList.forEach(function (className) {                                                          // 2690\n                    button.classList.add(className);                                                                   // 2691\n                });                                                                                                    // 2692\n            }                                                                                                          // 2693\n                                                                                                                       // 2694\n            // Add attributes                                                                                          // 2695\n            button.setAttribute('data-action', this.getAction());                                                      // 2696\n            if (ariaLabel) {                                                                                           // 2697\n                button.setAttribute('title', ariaLabel);                                                               // 2698\n                button.setAttribute('aria-label', ariaLabel);                                                          // 2699\n            }                                                                                                          // 2700\n            if (this.attrs) {                                                                                          // 2701\n                Object.keys(this.attrs).forEach(function (attr) {                                                      // 2702\n                    button.setAttribute(attr, this.attrs[attr]);                                                       // 2703\n                }, this);                                                                                              // 2704\n            }                                                                                                          // 2705\n                                                                                                                       // 2706\n            if (buttonLabels === 'fontawesome' && this.contentFA) {                                                    // 2707\n                content = this.contentFA;                                                                              // 2708\n            }                                                                                                          // 2709\n            button.innerHTML = content;                                                                                // 2710\n            return button;                                                                                             // 2711\n        },                                                                                                             // 2712\n                                                                                                                       // 2713\n        handleClick: function (event) {                                                                                // 2714\n            event.preventDefault();                                                                                    // 2715\n            event.stopPropagation();                                                                                   // 2716\n                                                                                                                       // 2717\n            var action = this.getAction();                                                                             // 2718\n                                                                                                                       // 2719\n            if (action) {                                                                                              // 2720\n                this.execAction(action);                                                                               // 2721\n            }                                                                                                          // 2722\n        },                                                                                                             // 2723\n                                                                                                                       // 2724\n        isActive: function () {                                                                                        // 2725\n            return this.button.classList.contains(this.getEditorOption('activeButtonClass'));                          // 2726\n        },                                                                                                             // 2727\n                                                                                                                       // 2728\n        setInactive: function () {                                                                                     // 2729\n            this.button.classList.remove(this.getEditorOption('activeButtonClass'));                                   // 2730\n            delete this.knownState;                                                                                    // 2731\n        },                                                                                                             // 2732\n                                                                                                                       // 2733\n        setActive: function () {                                                                                       // 2734\n            this.button.classList.add(this.getEditorOption('activeButtonClass'));                                      // 2735\n            delete this.knownState;                                                                                    // 2736\n        },                                                                                                             // 2737\n                                                                                                                       // 2738\n        queryCommandState: function () {                                                                               // 2739\n            var queryState = null;                                                                                     // 2740\n            if (this.useQueryState) {                                                                                  // 2741\n                queryState = this.base.queryCommandState(this.getAction());                                            // 2742\n            }                                                                                                          // 2743\n            return queryState;                                                                                         // 2744\n        },                                                                                                             // 2745\n                                                                                                                       // 2746\n        isAlreadyApplied: function (node) {                                                                            // 2747\n            var isMatch = false,                                                                                       // 2748\n                tagNames = this.getTagNames(),                                                                         // 2749\n                styleVals,                                                                                             // 2750\n                computedStyle;                                                                                         // 2751\n                                                                                                                       // 2752\n            if (this.knownState === false || this.knownState === true) {                                               // 2753\n                return this.knownState;                                                                                // 2754\n            }                                                                                                          // 2755\n                                                                                                                       // 2756\n            if (tagNames && tagNames.length > 0) {                                                                     // 2757\n                isMatch = tagNames.indexOf(node.nodeName.toLowerCase()) !== -1;                                        // 2758\n            }                                                                                                          // 2759\n                                                                                                                       // 2760\n            if (!isMatch && this.style) {                                                                              // 2761\n                styleVals = this.style.value.split('|');                                                               // 2762\n                computedStyle = this.window.getComputedStyle(node, null).getPropertyValue(this.style.prop);            // 2763\n                styleVals.forEach(function (val) {                                                                     // 2764\n                    if (!this.knownState) {                                                                            // 2765\n                        isMatch = (computedStyle.indexOf(val) !== -1);                                                 // 2766\n                        // text-decoration is not inherited by default                                                 // 2767\n                        // so if the computed style for text-decoration doesn't match                                  // 2768\n                        // don't write to knownState so we can fallback to other checks                                // 2769\n                        if (isMatch || this.style.prop !== 'text-decoration') {                                        // 2770\n                            this.knownState = isMatch;                                                                 // 2771\n                        }                                                                                              // 2772\n                    }                                                                                                  // 2773\n                }, this);                                                                                              // 2774\n            }                                                                                                          // 2775\n                                                                                                                       // 2776\n            return isMatch;                                                                                            // 2777\n        }                                                                                                              // 2778\n    });                                                                                                                // 2779\n                                                                                                                       // 2780\n    Button.isBuiltInButton = function (name) {                                                                         // 2781\n        return (typeof name === 'string') && Button.prototype.defaults.hasOwnProperty(name);                           // 2782\n    };                                                                                                                 // 2783\n}());                                                                                                                  // 2784\n                                                                                                                       // 2785\nvar FormExtension;                                                                                                     // 2786\n(function () {                                                                                                         // 2787\n    'use strict';                                                                                                      // 2788\n                                                                                                                       // 2789\n    /* global Button */                                                                                                // 2790\n                                                                                                                       // 2791\n    var noop = function () {};                                                                                         // 2792\n                                                                                                                       // 2793\n    /* Base functionality for an extension whcih will display                                                          // 2794\n     * a 'form' inside the toolbar                                                                                     // 2795\n     */                                                                                                                // 2796\n    FormExtension = Button.extend({                                                                                    // 2797\n                                                                                                                       // 2798\n        init: function () {                                                                                            // 2799\n            Button.prototype.init.apply(this, arguments);                                                              // 2800\n        },                                                                                                             // 2801\n                                                                                                                       // 2802\n        // default labels for the form buttons                                                                         // 2803\n        formSaveLabel: '&#10003;',                                                                                     // 2804\n        formCloseLabel: '&times;',                                                                                     // 2805\n                                                                                                                       // 2806\n        /* hasForm: [boolean]                                                                                          // 2807\n         *                                                                                                             // 2808\n         * Setting this to true will cause getForm() to be called                                                      // 2809\n         * when the toolbar is created, so the form can be appended                                                    // 2810\n         * inside the toolbar container                                                                                // 2811\n         */                                                                                                            // 2812\n        hasForm: true,                                                                                                 // 2813\n                                                                                                                       // 2814\n        /* getForm: [function ()]                                                                                      // 2815\n         *                                                                                                             // 2816\n         * When hasForm is true, this function must be implemented                                                     // 2817\n         * and return a DOM Element which will be appended to                                                          // 2818\n         * the toolbar container. The form should start hidden, and                                                    // 2819\n         * the extension can choose when to hide/show it                                                               // 2820\n         */                                                                                                            // 2821\n        getForm: noop,                                                                                                 // 2822\n                                                                                                                       // 2823\n        /* isDisplayed: [function ()]                                                                                  // 2824\n         *                                                                                                             // 2825\n         * This function should return true/false reflecting                                                           // 2826\n         * whether the form is currently displayed                                                                     // 2827\n         */                                                                                                            // 2828\n        isDisplayed: noop,                                                                                             // 2829\n                                                                                                                       // 2830\n        /* hideForm: [function ()]                                                                                     // 2831\n         *                                                                                                             // 2832\n         * This function should hide the form element inside                                                           // 2833\n         * the toolbar container                                                                                       // 2834\n         */                                                                                                            // 2835\n        hideForm: noop,                                                                                                // 2836\n                                                                                                                       // 2837\n        /************************ Helpers ************************                                                     // 2838\n         * The following are helpers that are either set by MediumEditor                                               // 2839\n         * during initialization, or are helper methods which either                                                   // 2840\n         * route calls to the MediumEditor instance or provide common                                                  // 2841\n         * functionality for all form extensions                                                                       // 2842\n         *********************************************************/                                                    // 2843\n                                                                                                                       // 2844\n        /* showToolbarDefaultActions: [function ()]                                                                    // 2845\n         *                                                                                                             // 2846\n         * Helper method which will turn back the toolbar after canceling                                              // 2847\n         * the customized form                                                                                         // 2848\n         */                                                                                                            // 2849\n        showToolbarDefaultActions: function () {                                                                       // 2850\n            var toolbar = this.base.getExtensionByName('toolbar');                                                     // 2851\n            if (toolbar) {                                                                                             // 2852\n                toolbar.showToolbarDefaultActions();                                                                   // 2853\n            }                                                                                                          // 2854\n        },                                                                                                             // 2855\n                                                                                                                       // 2856\n        /* hideToolbarDefaultActions: [function ()]                                                                    // 2857\n         *                                                                                                             // 2858\n         * Helper function which will hide the default contents of the                                                 // 2859\n         * toolbar, but leave the toolbar container in the same state                                                  // 2860\n         * to allow a form to display its custom contents inside the toolbar                                           // 2861\n         */                                                                                                            // 2862\n        hideToolbarDefaultActions: function () {                                                                       // 2863\n            var toolbar = this.base.getExtensionByName('toolbar');                                                     // 2864\n            if (toolbar) {                                                                                             // 2865\n                toolbar.hideToolbarDefaultActions();                                                                   // 2866\n            }                                                                                                          // 2867\n        },                                                                                                             // 2868\n                                                                                                                       // 2869\n        /* setToolbarPosition: [function ()]                                                                           // 2870\n         *                                                                                                             // 2871\n         * Helper function which will update the size and position                                                     // 2872\n         * of the toolbar based on the toolbar content and the current                                                 // 2873\n         * position of the user's selection                                                                            // 2874\n         */                                                                                                            // 2875\n        setToolbarPosition: function () {                                                                              // 2876\n            var toolbar = this.base.getExtensionByName('toolbar');                                                     // 2877\n            if (toolbar) {                                                                                             // 2878\n                toolbar.setToolbarPosition();                                                                          // 2879\n            }                                                                                                          // 2880\n        }                                                                                                              // 2881\n    });                                                                                                                // 2882\n})();                                                                                                                  // 2883\nvar AnchorForm;                                                                                                        // 2884\n(function () {                                                                                                         // 2885\n    'use strict';                                                                                                      // 2886\n                                                                                                                       // 2887\n    /*global Util, Selection, FormExtension */                                                                         // 2888\n                                                                                                                       // 2889\n    AnchorForm = FormExtension.extend({                                                                                // 2890\n        /* Anchor Form Options */                                                                                      // 2891\n                                                                                                                       // 2892\n        /* customClassOption: [string]  (previously options.anchorButton + options.anchorButtonClass)                  // 2893\n         * Custom class name the user can optionally have added to their created links (ie 'button').                  // 2894\n         * If passed as a non-empty string, a checkbox will be displayed allowing the user to choose                   // 2895\n         * whether to have the class added to the created link or not.                                                 // 2896\n         */                                                                                                            // 2897\n        customClassOption: null,                                                                                       // 2898\n                                                                                                                       // 2899\n        /* customClassOptionText: [string]                                                                             // 2900\n         * text to be shown in the checkbox when the __customClassOption__ is being used.                              // 2901\n         */                                                                                                            // 2902\n        customClassOptionText: 'Button',                                                                               // 2903\n                                                                                                                       // 2904\n        /* linkValidation: [boolean]  (previously options.checkLinkFormat)                                             // 2905\n         * enables/disables check for common URL protocols on anchor links.                                            // 2906\n         */                                                                                                            // 2907\n        linkValidation: false,                                                                                         // 2908\n                                                                                                                       // 2909\n        /* placeholderText: [string]  (previously options.anchorInputPlaceholder)                                      // 2910\n         * text to be shown as placeholder of the anchor input.                                                        // 2911\n         */                                                                                                            // 2912\n        placeholderText: 'Paste or type a link',                                                                       // 2913\n                                                                                                                       // 2914\n        /* targetCheckbox: [boolean]  (previously options.anchorTarget)                                                // 2915\n         * enables/disables displaying a \"Open in new window\" checkbox, which when checked                             // 2916\n         * changes the `target` attribute of the created link.                                                         // 2917\n         */                                                                                                            // 2918\n        targetCheckbox: false,                                                                                         // 2919\n                                                                                                                       // 2920\n        /* targetCheckboxText: [string]  (previously options.anchorInputCheckboxLabel)                                 // 2921\n         * text to be shown in the checkbox enabled via the __targetCheckbox__ option.                                 // 2922\n         */                                                                                                            // 2923\n        targetCheckboxText: 'Open in new window',                                                                      // 2924\n                                                                                                                       // 2925\n        // Options for the Button base class                                                                           // 2926\n        name: 'anchor',                                                                                                // 2927\n        action: 'createLink',                                                                                          // 2928\n        aria: 'link',                                                                                                  // 2929\n        tagNames: ['a'],                                                                                               // 2930\n        contentDefault: '<b>#</b>',                                                                                    // 2931\n        contentFA: '<i class=\"fa fa-link\"></i>',                                                                       // 2932\n                                                                                                                       // 2933\n        init: function () {                                                                                            // 2934\n            FormExtension.prototype.init.apply(this, arguments);                                                       // 2935\n                                                                                                                       // 2936\n            this.subscribe('editableKeydown', this.handleKeydown.bind(this));                                          // 2937\n        },                                                                                                             // 2938\n                                                                                                                       // 2939\n        // Called when the button the toolbar is clicked                                                               // 2940\n        // Overrides ButtonExtension.handleClick                                                                       // 2941\n        handleClick: function (event) {                                                                                // 2942\n            event.preventDefault();                                                                                    // 2943\n            event.stopPropagation();                                                                                   // 2944\n                                                                                                                       // 2945\n            var selectedParentElement = Selection.getSelectedParentElement(Selection.getSelectionRange(this.document)),\n                firstTextNode = Util.getFirstTextNode(selectedParentElement);                                          // 2947\n                                                                                                                       // 2948\n            if (Util.getClosestTag(firstTextNode, 'a')) {                                                              // 2949\n                return this.execAction('unlink');                                                                      // 2950\n            }                                                                                                          // 2951\n                                                                                                                       // 2952\n            if (!this.isDisplayed()) {                                                                                 // 2953\n                this.showForm();                                                                                       // 2954\n            }                                                                                                          // 2955\n                                                                                                                       // 2956\n            return false;                                                                                              // 2957\n        },                                                                                                             // 2958\n                                                                                                                       // 2959\n        // Called when user hits the defined shortcut (CTRL / COMMAND + K)                                             // 2960\n        handleKeydown: function (event) {                                                                              // 2961\n            if (Util.isKey(event, Util.keyCode.K) && Util.isMetaCtrlKey(event) && !event.shiftKey) {                   // 2962\n                this.handleClick(event);                                                                               // 2963\n            }                                                                                                          // 2964\n        },                                                                                                             // 2965\n                                                                                                                       // 2966\n        // Called by medium-editor to append form to the toolbar                                                       // 2967\n        getForm: function () {                                                                                         // 2968\n            if (!this.form) {                                                                                          // 2969\n                this.form = this.createForm();                                                                         // 2970\n            }                                                                                                          // 2971\n            return this.form;                                                                                          // 2972\n        },                                                                                                             // 2973\n                                                                                                                       // 2974\n        getTemplate: function () {                                                                                     // 2975\n            var template = [                                                                                           // 2976\n                '<input type=\"text\" class=\"medium-editor-toolbar-input\" placeholder=\"', this.placeholderText, '\">'     // 2977\n            ];                                                                                                         // 2978\n                                                                                                                       // 2979\n            template.push(                                                                                             // 2980\n                '<a href=\"#\" class=\"medium-editor-toolbar-save\">',                                                     // 2981\n                this.getEditorOption('buttonLabels') === 'fontawesome' ? '<i class=\"fa fa-check\"></i>' : this.formSaveLabel,\n                '</a>'                                                                                                 // 2983\n            );                                                                                                         // 2984\n                                                                                                                       // 2985\n            template.push('<a href=\"#\" class=\"medium-editor-toolbar-close\">',                                          // 2986\n                this.getEditorOption('buttonLabels') === 'fontawesome' ? '<i class=\"fa fa-times\"></i>' : this.formCloseLabel,\n                '</a>');                                                                                               // 2988\n                                                                                                                       // 2989\n            // both of these options are slightly moot with the ability to                                             // 2990\n            // override the various form buildup/serialize functions.                                                  // 2991\n                                                                                                                       // 2992\n            if (this.targetCheckbox) {                                                                                 // 2993\n                // fixme: ideally, this targetCheckboxText would be a formLabel too,                                   // 2994\n                // figure out how to deprecate? also consider `fa-` icon default implcations.                          // 2995\n                template.push(                                                                                         // 2996\n                    '<input type=\"checkbox\" class=\"medium-editor-toolbar-anchor-target\">',                             // 2997\n                    '<label>',                                                                                         // 2998\n                    this.targetCheckboxText,                                                                           // 2999\n                    '</label>'                                                                                         // 3000\n                );                                                                                                     // 3001\n            }                                                                                                          // 3002\n                                                                                                                       // 3003\n            if (this.customClassOption) {                                                                              // 3004\n                // fixme: expose this `Button` text as a formLabel property, too                                       // 3005\n                // and provide similar access to a `fa-` icon default.                                                 // 3006\n                template.push(                                                                                         // 3007\n                    '<input type=\"checkbox\" class=\"medium-editor-toolbar-anchor-button\">',                             // 3008\n                    '<label>',                                                                                         // 3009\n                    this.customClassOptionText,                                                                        // 3010\n                    '</label>'                                                                                         // 3011\n                );                                                                                                     // 3012\n            }                                                                                                          // 3013\n                                                                                                                       // 3014\n            return template.join('');                                                                                  // 3015\n                                                                                                                       // 3016\n        },                                                                                                             // 3017\n                                                                                                                       // 3018\n        // Used by medium-editor when the default toolbar is to be displayed                                           // 3019\n        isDisplayed: function () {                                                                                     // 3020\n            return this.getForm().style.display === 'block';                                                           // 3021\n        },                                                                                                             // 3022\n                                                                                                                       // 3023\n        hideForm: function () {                                                                                        // 3024\n            this.getForm().style.display = 'none';                                                                     // 3025\n            this.getInput().value = '';                                                                                // 3026\n        },                                                                                                             // 3027\n                                                                                                                       // 3028\n        showForm: function (linkValue) {                                                                               // 3029\n            var input = this.getInput();                                                                               // 3030\n                                                                                                                       // 3031\n            this.base.saveSelection();                                                                                 // 3032\n            this.hideToolbarDefaultActions();                                                                          // 3033\n            this.getForm().style.display = 'block';                                                                    // 3034\n            this.setToolbarPosition();                                                                                 // 3035\n                                                                                                                       // 3036\n            input.value = linkValue || '';                                                                             // 3037\n            input.focus();                                                                                             // 3038\n        },                                                                                                             // 3039\n                                                                                                                       // 3040\n        // Called by core when tearing down medium-editor (destroy)                                                    // 3041\n        destroy: function () {                                                                                         // 3042\n            if (!this.form) {                                                                                          // 3043\n                return false;                                                                                          // 3044\n            }                                                                                                          // 3045\n                                                                                                                       // 3046\n            if (this.form.parentNode) {                                                                                // 3047\n                this.form.parentNode.removeChild(this.form);                                                           // 3048\n            }                                                                                                          // 3049\n                                                                                                                       // 3050\n            delete this.form;                                                                                          // 3051\n        },                                                                                                             // 3052\n                                                                                                                       // 3053\n        // core methods                                                                                                // 3054\n                                                                                                                       // 3055\n        getFormOpts: function () {                                                                                     // 3056\n            // no notion of private functions? wanted `_getFormOpts`                                                   // 3057\n            var targetCheckbox = this.getForm().querySelector('.medium-editor-toolbar-anchor-target'),                 // 3058\n                buttonCheckbox = this.getForm().querySelector('.medium-editor-toolbar-anchor-button'),                 // 3059\n                opts = {                                                                                               // 3060\n                    url: this.getInput().value                                                                         // 3061\n                };                                                                                                     // 3062\n                                                                                                                       // 3063\n            if (this.linkValidation) {                                                                                 // 3064\n                opts.url = this.checkLinkFormat(opts.url);                                                             // 3065\n            }                                                                                                          // 3066\n                                                                                                                       // 3067\n            opts.target = '_self';                                                                                     // 3068\n            if (targetCheckbox && targetCheckbox.checked) {                                                            // 3069\n                opts.target = '_blank';                                                                                // 3070\n            }                                                                                                          // 3071\n                                                                                                                       // 3072\n            if (buttonCheckbox && buttonCheckbox.checked) {                                                            // 3073\n                opts.buttonClass = this.customClassOption;                                                             // 3074\n            }                                                                                                          // 3075\n                                                                                                                       // 3076\n            return opts;                                                                                               // 3077\n        },                                                                                                             // 3078\n                                                                                                                       // 3079\n        doFormSave: function () {                                                                                      // 3080\n            var opts = this.getFormOpts();                                                                             // 3081\n            this.completeFormSave(opts);                                                                               // 3082\n        },                                                                                                             // 3083\n                                                                                                                       // 3084\n        completeFormSave: function (opts) {                                                                            // 3085\n            this.base.restoreSelection();                                                                              // 3086\n            this.execAction(this.action, opts);                                                                        // 3087\n            this.base.checkSelection();                                                                                // 3088\n        },                                                                                                             // 3089\n                                                                                                                       // 3090\n        checkLinkFormat: function (value) {                                                                            // 3091\n            var re = /^(https?|ftps?|rtmpt?):\\/\\/|mailto:/;                                                            // 3092\n            return (re.test(value) ? '' : 'http://') + value;                                                          // 3093\n        },                                                                                                             // 3094\n                                                                                                                       // 3095\n        doFormCancel: function () {                                                                                    // 3096\n            this.base.restoreSelection();                                                                              // 3097\n            this.base.checkSelection();                                                                                // 3098\n        },                                                                                                             // 3099\n                                                                                                                       // 3100\n        // form creation and event handling                                                                            // 3101\n        attachFormEvents: function (form) {                                                                            // 3102\n            var close = form.querySelector('.medium-editor-toolbar-close'),                                            // 3103\n                save = form.querySelector('.medium-editor-toolbar-save'),                                              // 3104\n                input = form.querySelector('.medium-editor-toolbar-input');                                            // 3105\n                                                                                                                       // 3106\n            // Handle clicks on the form itself                                                                        // 3107\n            this.on(form, 'click', this.handleFormClick.bind(this));                                                   // 3108\n                                                                                                                       // 3109\n            // Handle typing in the textbox                                                                            // 3110\n            this.on(input, 'keyup', this.handleTextboxKeyup.bind(this));                                               // 3111\n                                                                                                                       // 3112\n            // Handle close button clicks                                                                              // 3113\n            this.on(close, 'click', this.handleCloseClick.bind(this));                                                 // 3114\n                                                                                                                       // 3115\n            // Handle save button clicks (capture)                                                                     // 3116\n            this.on(save, 'click', this.handleSaveClick.bind(this), true);                                             // 3117\n                                                                                                                       // 3118\n        },                                                                                                             // 3119\n                                                                                                                       // 3120\n        createForm: function () {                                                                                      // 3121\n            var doc = this.document,                                                                                   // 3122\n                form = doc.createElement('div');                                                                       // 3123\n                                                                                                                       // 3124\n            // Anchor Form (div)                                                                                       // 3125\n            form.className = 'medium-editor-toolbar-form';                                                             // 3126\n            form.id = 'medium-editor-toolbar-form-anchor-' + this.getEditorId();                                       // 3127\n            form.innerHTML = this.getTemplate();                                                                       // 3128\n            this.attachFormEvents(form);                                                                               // 3129\n                                                                                                                       // 3130\n            return form;                                                                                               // 3131\n        },                                                                                                             // 3132\n                                                                                                                       // 3133\n        getInput: function () {                                                                                        // 3134\n            return this.getForm().querySelector('input.medium-editor-toolbar-input');                                  // 3135\n        },                                                                                                             // 3136\n                                                                                                                       // 3137\n        handleTextboxKeyup: function (event) {                                                                         // 3138\n            // For ENTER -> create the anchor                                                                          // 3139\n            if (event.keyCode === Util.keyCode.ENTER) {                                                                // 3140\n                event.preventDefault();                                                                                // 3141\n                this.doFormSave();                                                                                     // 3142\n                return;                                                                                                // 3143\n            }                                                                                                          // 3144\n                                                                                                                       // 3145\n            // For ESCAPE -> close the form                                                                            // 3146\n            if (event.keyCode === Util.keyCode.ESCAPE) {                                                               // 3147\n                event.preventDefault();                                                                                // 3148\n                this.doFormCancel();                                                                                   // 3149\n            }                                                                                                          // 3150\n        },                                                                                                             // 3151\n                                                                                                                       // 3152\n        handleFormClick: function (event) {                                                                            // 3153\n            // make sure not to hide form when clicking inside the form                                                // 3154\n            event.stopPropagation();                                                                                   // 3155\n        },                                                                                                             // 3156\n                                                                                                                       // 3157\n        handleSaveClick: function (event) {                                                                            // 3158\n            // Clicking Save -> create the anchor                                                                      // 3159\n            event.preventDefault();                                                                                    // 3160\n            this.doFormSave();                                                                                         // 3161\n        },                                                                                                             // 3162\n                                                                                                                       // 3163\n        handleCloseClick: function (event) {                                                                           // 3164\n            // Click Close -> close the form                                                                           // 3165\n            event.preventDefault();                                                                                    // 3166\n            this.doFormCancel();                                                                                       // 3167\n        }                                                                                                              // 3168\n    });                                                                                                                // 3169\n}());                                                                                                                  // 3170\nvar AnchorPreview;                                                                                                     // 3171\n(function () {                                                                                                         // 3172\n    'use strict';                                                                                                      // 3173\n                                                                                                                       // 3174\n    /*global Util, Extension */                                                                                        // 3175\n                                                                                                                       // 3176\n    AnchorPreview = Extension.extend({                                                                                 // 3177\n        name: 'anchor-preview',                                                                                        // 3178\n                                                                                                                       // 3179\n        // Anchor Preview Options                                                                                      // 3180\n                                                                                                                       // 3181\n        /* hideDelay: [number]  (previously options.anchorPreviewHideDelay)                                            // 3182\n         * time in milliseconds to show the anchor tag preview after the mouse has left the anchor tag.                // 3183\n         */                                                                                                            // 3184\n        hideDelay: 500,                                                                                                // 3185\n                                                                                                                       // 3186\n        /* previewValueSelector: [string]                                                                              // 3187\n         * the default selector to locate where to put the activeAnchor value in the preview                           // 3188\n         */                                                                                                            // 3189\n        previewValueSelector: 'a',                                                                                     // 3190\n                                                                                                                       // 3191\n        init: function () {                                                                                            // 3192\n            this.anchorPreview = this.createPreview();                                                                 // 3193\n                                                                                                                       // 3194\n            this.getEditorOption('elementsContainer').appendChild(this.anchorPreview);                                 // 3195\n                                                                                                                       // 3196\n            this.attachToEditables();                                                                                  // 3197\n        },                                                                                                             // 3198\n                                                                                                                       // 3199\n        getPreviewElement: function () {                                                                               // 3200\n            return this.anchorPreview;                                                                                 // 3201\n        },                                                                                                             // 3202\n                                                                                                                       // 3203\n        createPreview: function () {                                                                                   // 3204\n            var el = this.document.createElement('div');                                                               // 3205\n                                                                                                                       // 3206\n            el.id = 'medium-editor-anchor-preview-' + this.getEditorId();                                              // 3207\n            el.className = 'medium-editor-anchor-preview';                                                             // 3208\n            el.innerHTML = this.getTemplate();                                                                         // 3209\n                                                                                                                       // 3210\n            this.on(el, 'click', this.handleClick.bind(this));                                                         // 3211\n                                                                                                                       // 3212\n            return el;                                                                                                 // 3213\n        },                                                                                                             // 3214\n                                                                                                                       // 3215\n        getTemplate: function () {                                                                                     // 3216\n            return '<div class=\"medium-editor-toolbar-anchor-preview\" id=\"medium-editor-toolbar-anchor-preview\">' +    // 3217\n                '    <a class=\"medium-editor-toolbar-anchor-preview-inner\"></a>' +                                     // 3218\n                '</div>';                                                                                              // 3219\n        },                                                                                                             // 3220\n                                                                                                                       // 3221\n        destroy: function () {                                                                                         // 3222\n            if (this.anchorPreview) {                                                                                  // 3223\n                if (this.anchorPreview.parentNode) {                                                                   // 3224\n                    this.anchorPreview.parentNode.removeChild(this.anchorPreview);                                     // 3225\n                }                                                                                                      // 3226\n                delete this.anchorPreview;                                                                             // 3227\n            }                                                                                                          // 3228\n        },                                                                                                             // 3229\n                                                                                                                       // 3230\n        hidePreview: function () {                                                                                     // 3231\n            this.anchorPreview.classList.remove('medium-editor-anchor-preview-active');                                // 3232\n            this.activeAnchor = null;                                                                                  // 3233\n        },                                                                                                             // 3234\n                                                                                                                       // 3235\n        showPreview: function (anchorEl) {                                                                             // 3236\n            if (this.anchorPreview.classList.contains('medium-editor-anchor-preview-active') ||                        // 3237\n                    anchorEl.getAttribute('data-disable-preview')) {                                                   // 3238\n                return true;                                                                                           // 3239\n            }                                                                                                          // 3240\n                                                                                                                       // 3241\n            if (this.previewValueSelector) {                                                                           // 3242\n                this.anchorPreview.querySelector(this.previewValueSelector).textContent = anchorEl.attributes.href.value;\n                this.anchorPreview.querySelector(this.previewValueSelector).href = anchorEl.attributes.href.value;     // 3244\n            }                                                                                                          // 3245\n                                                                                                                       // 3246\n            this.anchorPreview.classList.add('medium-toolbar-arrow-over');                                             // 3247\n            this.anchorPreview.classList.remove('medium-toolbar-arrow-under');                                         // 3248\n                                                                                                                       // 3249\n            if (!this.anchorPreview.classList.contains('medium-editor-anchor-preview-active')) {                       // 3250\n                this.anchorPreview.classList.add('medium-editor-anchor-preview-active');                               // 3251\n            }                                                                                                          // 3252\n                                                                                                                       // 3253\n            this.activeAnchor = anchorEl;                                                                              // 3254\n                                                                                                                       // 3255\n            this.positionPreview();                                                                                    // 3256\n            this.attachPreviewHandlers();                                                                              // 3257\n                                                                                                                       // 3258\n            return this;                                                                                               // 3259\n        },                                                                                                             // 3260\n                                                                                                                       // 3261\n        positionPreview: function (activeAnchor) {                                                                     // 3262\n            activeAnchor = activeAnchor || this.activeAnchor;                                                          // 3263\n            var buttonHeight = this.anchorPreview.offsetHeight,                                                        // 3264\n                boundary = activeAnchor.getBoundingClientRect(),                                                       // 3265\n                middleBoundary = (boundary.left + boundary.right) / 2,                                                 // 3266\n                diffLeft = this.diffLeft,                                                                              // 3267\n                diffTop = this.diffTop,                                                                                // 3268\n                halfOffsetWidth,                                                                                       // 3269\n                defaultLeft;                                                                                           // 3270\n                                                                                                                       // 3271\n            halfOffsetWidth = this.anchorPreview.offsetWidth / 2;                                                      // 3272\n            var toolbarExtension = this.base.getExtensionByName('toolbar');                                            // 3273\n            if (toolbarExtension) {                                                                                    // 3274\n                diffLeft = toolbarExtension.diffLeft;                                                                  // 3275\n                diffTop = toolbarExtension.diffTop;                                                                    // 3276\n            }                                                                                                          // 3277\n            defaultLeft = diffLeft - halfOffsetWidth;                                                                  // 3278\n                                                                                                                       // 3279\n            this.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - diffTop + this.window.pageYOffset - this.anchorPreview.offsetHeight) + 'px';\n            if (middleBoundary < halfOffsetWidth) {                                                                    // 3281\n                this.anchorPreview.style.left = defaultLeft + halfOffsetWidth + 'px';                                  // 3282\n            } else if ((this.window.innerWidth - middleBoundary) < halfOffsetWidth) {                                  // 3283\n                this.anchorPreview.style.left = this.window.innerWidth + defaultLeft - halfOffsetWidth + 'px';         // 3284\n            } else {                                                                                                   // 3285\n                this.anchorPreview.style.left = defaultLeft + middleBoundary + 'px';                                   // 3286\n            }                                                                                                          // 3287\n        },                                                                                                             // 3288\n                                                                                                                       // 3289\n        attachToEditables: function () {                                                                               // 3290\n            this.subscribe('editableMouseover', this.handleEditableMouseover.bind(this));                              // 3291\n        },                                                                                                             // 3292\n                                                                                                                       // 3293\n        handleClick: function (event) {                                                                                // 3294\n            var anchorExtension = this.base.getExtensionByName('anchor'),                                              // 3295\n                activeAnchor = this.activeAnchor;                                                                      // 3296\n                                                                                                                       // 3297\n            if (anchorExtension && activeAnchor) {                                                                     // 3298\n                event.preventDefault();                                                                                // 3299\n                                                                                                                       // 3300\n                this.base.selectElement(this.activeAnchor);                                                            // 3301\n                                                                                                                       // 3302\n                // Using setTimeout + delay because:                                                                   // 3303\n                // We may actually be displaying the anchor form, which should be controlled by delay                  // 3304\n                this.base.delay(function () {                                                                          // 3305\n                    if (activeAnchor) {                                                                                // 3306\n                        anchorExtension.showForm(activeAnchor.attributes.href.value);                                  // 3307\n                        activeAnchor = null;                                                                           // 3308\n                    }                                                                                                  // 3309\n                }.bind(this));                                                                                         // 3310\n            }                                                                                                          // 3311\n                                                                                                                       // 3312\n            this.hidePreview();                                                                                        // 3313\n        },                                                                                                             // 3314\n                                                                                                                       // 3315\n        handleAnchorMouseout: function () {                                                                            // 3316\n            this.anchorToPreview = null;                                                                               // 3317\n            this.off(this.activeAnchor, 'mouseout', this.instanceHandleAnchorMouseout);                                // 3318\n            this.instanceHandleAnchorMouseout = null;                                                                  // 3319\n        },                                                                                                             // 3320\n                                                                                                                       // 3321\n        handleEditableMouseover: function (event) {                                                                    // 3322\n            var target = Util.getClosestTag(event.target, 'a');                                                        // 3323\n                                                                                                                       // 3324\n            if (false === target) {                                                                                    // 3325\n                return;                                                                                                // 3326\n            }                                                                                                          // 3327\n                                                                                                                       // 3328\n            // Detect empty href attributes                                                                            // 3329\n            // The browser will make href=\"\" or href=\"#top\"                                                            // 3330\n            // into absolute urls when accessed as event.targed.href, so check the html                                // 3331\n            if (!/href=[\"']\\S+[\"']/.test(target.outerHTML) || /href=[\"']#\\S+[\"']/.test(target.outerHTML)) {            // 3332\n                return true;                                                                                           // 3333\n            }                                                                                                          // 3334\n                                                                                                                       // 3335\n            // only show when toolbar is not present                                                                   // 3336\n            var toolbar = this.base.getExtensionByName('toolbar');                                                     // 3337\n            if (toolbar && toolbar.isDisplayed && toolbar.isDisplayed()) {                                             // 3338\n                return true;                                                                                           // 3339\n            }                                                                                                          // 3340\n                                                                                                                       // 3341\n            // detach handler for other anchor in case we hovered multiple anchors quickly                             // 3342\n            if (this.activeAnchor && this.activeAnchor !== target) {                                                   // 3343\n                this.detachPreviewHandlers();                                                                          // 3344\n            }                                                                                                          // 3345\n                                                                                                                       // 3346\n            this.anchorToPreview = target;                                                                             // 3347\n                                                                                                                       // 3348\n            this.instanceHandleAnchorMouseout = this.handleAnchorMouseout.bind(this);                                  // 3349\n            this.on(this.anchorToPreview, 'mouseout', this.instanceHandleAnchorMouseout);                              // 3350\n            // Using setTimeout + delay because:                                                                       // 3351\n            // - We're going to show the anchor preview according to the configured delay                              // 3352\n            //   if the mouse has not left the anchor tag in that time                                                 // 3353\n            this.base.delay(function () {                                                                              // 3354\n                if (this.anchorToPreview) {                                                                            // 3355\n                    this.showPreview(this.anchorToPreview);                                                            // 3356\n                }                                                                                                      // 3357\n            }.bind(this));                                                                                             // 3358\n        },                                                                                                             // 3359\n                                                                                                                       // 3360\n        handlePreviewMouseover: function () {                                                                          // 3361\n            this.lastOver = (new Date()).getTime();                                                                    // 3362\n            this.hovering = true;                                                                                      // 3363\n        },                                                                                                             // 3364\n                                                                                                                       // 3365\n        handlePreviewMouseout: function (event) {                                                                      // 3366\n            if (!event.relatedTarget || !/anchor-preview/.test(event.relatedTarget.className)) {                       // 3367\n                this.hovering = false;                                                                                 // 3368\n            }                                                                                                          // 3369\n        },                                                                                                             // 3370\n                                                                                                                       // 3371\n        updatePreview: function () {                                                                                   // 3372\n            if (this.hovering) {                                                                                       // 3373\n                return true;                                                                                           // 3374\n            }                                                                                                          // 3375\n            var durr = (new Date()).getTime() - this.lastOver;                                                         // 3376\n            if (durr > this.hideDelay) {                                                                               // 3377\n                // hide the preview 1/2 second after mouse leaves the link                                             // 3378\n                this.detachPreviewHandlers();                                                                          // 3379\n            }                                                                                                          // 3380\n        },                                                                                                             // 3381\n                                                                                                                       // 3382\n        detachPreviewHandlers: function () {                                                                           // 3383\n            // cleanup                                                                                                 // 3384\n            clearInterval(this.intervalTimer);                                                                         // 3385\n            if (this.instanceHandlePreviewMouseover) {                                                                 // 3386\n                this.off(this.anchorPreview, 'mouseover', this.instanceHandlePreviewMouseover);                        // 3387\n                this.off(this.anchorPreview, 'mouseout', this.instanceHandlePreviewMouseout);                          // 3388\n                if (this.activeAnchor) {                                                                               // 3389\n                    this.off(this.activeAnchor, 'mouseover', this.instanceHandlePreviewMouseover);                     // 3390\n                    this.off(this.activeAnchor, 'mouseout', this.instanceHandlePreviewMouseout);                       // 3391\n                }                                                                                                      // 3392\n            }                                                                                                          // 3393\n                                                                                                                       // 3394\n            this.hidePreview();                                                                                        // 3395\n                                                                                                                       // 3396\n            this.hovering = this.instanceHandlePreviewMouseover = this.instanceHandlePreviewMouseout = null;           // 3397\n        },                                                                                                             // 3398\n                                                                                                                       // 3399\n        // TODO: break up method and extract out handlers                                                              // 3400\n        attachPreviewHandlers: function () {                                                                           // 3401\n            this.lastOver = (new Date()).getTime();                                                                    // 3402\n            this.hovering = true;                                                                                      // 3403\n                                                                                                                       // 3404\n            this.instanceHandlePreviewMouseover = this.handlePreviewMouseover.bind(this);                              // 3405\n            this.instanceHandlePreviewMouseout = this.handlePreviewMouseout.bind(this);                                // 3406\n                                                                                                                       // 3407\n            this.intervalTimer = setInterval(this.updatePreview.bind(this), 200);                                      // 3408\n                                                                                                                       // 3409\n            this.on(this.anchorPreview, 'mouseover', this.instanceHandlePreviewMouseover);                             // 3410\n            this.on(this.anchorPreview, 'mouseout', this.instanceHandlePreviewMouseout);                               // 3411\n            this.on(this.activeAnchor, 'mouseover', this.instanceHandlePreviewMouseover);                              // 3412\n            this.on(this.activeAnchor, 'mouseout', this.instanceHandlePreviewMouseout);                                // 3413\n        }                                                                                                              // 3414\n    });                                                                                                                // 3415\n}());                                                                                                                  // 3416\n                                                                                                                       // 3417\nvar AutoLink,                                                                                                          // 3418\n    WHITESPACE_CHARS,                                                                                                  // 3419\n    KNOWN_TLDS_FRAGMENT,                                                                                               // 3420\n    LINK_REGEXP_TEXT;                                                                                                  // 3421\n                                                                                                                       // 3422\nWHITESPACE_CHARS = [' ', '\\t', '\\n', '\\r', '\\u00A0', '\\u2000', '\\u2001', '\\u2002', '\\u2003',                           // 3423\n                                    '\\u2028', '\\u2029'];                                                               // 3424\nKNOWN_TLDS_FRAGMENT = 'com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|' +\n    'xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|' +\n    'bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|' +\n    'fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|' +\n    'is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|' +\n    'mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|' +\n    'pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|' +\n    'tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw';              // 3432\nLINK_REGEXP_TEXT =                                                                                                     // 3433\n    '(' +                                                                                                              // 3434\n    // Version of Gruber URL Regexp optimized for JS: http://stackoverflow.com/a/17733640                              // 3435\n    '((?:(https?://|ftps?://|nntp://)|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.](' + KNOWN_TLDS_FRAGMENT + ')\\\\\\/)\\\\S+(?:[^\\\\s`!\\\\[\\\\]{};:\\'\\\".,?\\u00AB\\u00BB\\u201C\\u201D\\u2018\\u2019]))' +\n    // Addition to above Regexp to support bare domains/one level subdomains with common non-i18n TLDs and without www prefix:\n    ')|(([a-z0-9\\\\-]+\\\\.)?[a-z0-9\\\\-]+\\\\.(' + KNOWN_TLDS_FRAGMENT + '))';                                              // 3438\n                                                                                                                       // 3439\n(function () {                                                                                                         // 3440\n    'use strict';                                                                                                      // 3441\n                                                                                                                       // 3442\n    var KNOWN_TLDS_REGEXP = new RegExp('^(' + KNOWN_TLDS_FRAGMENT + ')$', 'i');                                        // 3443\n                                                                                                                       // 3444\n    function nodeIsNotInsideAnchorTag(node) {                                                                          // 3445\n        return !Util.getClosestTag(node, 'a');                                                                         // 3446\n    }                                                                                                                  // 3447\n                                                                                                                       // 3448\n    AutoLink = Extension.extend({                                                                                      // 3449\n        init: function () {                                                                                            // 3450\n            Extension.prototype.init.apply(this, arguments);                                                           // 3451\n                                                                                                                       // 3452\n            this.disableEventHandling = false;                                                                         // 3453\n            this.subscribe('editableKeypress', this.onKeypress.bind(this));                                            // 3454\n            this.subscribe('editableBlur', this.onBlur.bind(this));                                                    // 3455\n            // MS IE has it's own auto-URL detect feature but ours is better in some ways. Be consistent.              // 3456\n            this.document.execCommand('AutoUrlDetect', false, false);                                                  // 3457\n        },                                                                                                             // 3458\n                                                                                                                       // 3459\n        destroy: function () {                                                                                         // 3460\n            // Turn AutoUrlDetect back on                                                                              // 3461\n            if (this.document.queryCommandSupported('AutoUrlDetect')) {                                                // 3462\n                this.document.execCommand('AutoUrlDetect', false, true);                                               // 3463\n            }                                                                                                          // 3464\n        },                                                                                                             // 3465\n                                                                                                                       // 3466\n        onBlur: function (blurEvent, editable) {                                                                       // 3467\n            this.performLinking(editable);                                                                             // 3468\n        },                                                                                                             // 3469\n                                                                                                                       // 3470\n        onKeypress: function (keyPressEvent) {                                                                         // 3471\n            if (this.disableEventHandling) {                                                                           // 3472\n                return;                                                                                                // 3473\n            }                                                                                                          // 3474\n                                                                                                                       // 3475\n            if (Util.isKey(keyPressEvent, [Util.keyCode.SPACE, Util.keyCode.ENTER])) {                                 // 3476\n                clearTimeout(this.performLinkingTimeout);                                                              // 3477\n                // Saving/restoring the selection in the middle of a keypress doesn't work well...                     // 3478\n                this.performLinkingTimeout = setTimeout(function () {                                                  // 3479\n                    try {                                                                                              // 3480\n                        var sel = this.base.exportSelection();                                                         // 3481\n                        if (this.performLinking(keyPressEvent.target)) {                                               // 3482\n                            // pass true for favorLaterSelectionAnchor - this is needed for links at the end of a      // 3483\n                            // paragraph in MS IE, or MS IE causes the link to be deleted right after adding it.       // 3484\n                            this.base.importSelection(sel, true);                                                      // 3485\n                        }                                                                                              // 3486\n                    } catch (e) {                                                                                      // 3487\n                        if (window.console) {                                                                          // 3488\n                            window.console.error('Failed to perform linking', e);                                      // 3489\n                        }                                                                                              // 3490\n                        this.disableEventHandling = true;                                                              // 3491\n                    }                                                                                                  // 3492\n                }.bind(this), 0);                                                                                      // 3493\n            }                                                                                                          // 3494\n        },                                                                                                             // 3495\n                                                                                                                       // 3496\n        performLinking: function (contenteditable) {                                                                   // 3497\n            // Perform linking on a paragraph level basis as otherwise the detection can wrongly find the end          // 3498\n            // of one paragraph and the beginning of another paragraph to constitute a link, such as a paragraph ending\n            // \"link.\" and the next paragraph beginning with \"my\" is interpreted into \"link.my\" and the code tries to create\n            // a link across paragraphs - which doesn't work and is terrible.                                          // 3501\n            // (Medium deletes the spaces/returns between P tags so the textContent ends up without paragraph spacing) // 3502\n            var paragraphs = contenteditable.querySelectorAll('p'),                                                    // 3503\n                documentModified = false;                                                                              // 3504\n            if (paragraphs.length === 0) {                                                                             // 3505\n                paragraphs = [contenteditable];                                                                        // 3506\n            }                                                                                                          // 3507\n            for (var i = 0; i < paragraphs.length; i++) {                                                              // 3508\n                documentModified = this.removeObsoleteAutoLinkSpans(paragraphs[i]) || documentModified;                // 3509\n                documentModified = this.performLinkingWithinElement(paragraphs[i]) || documentModified;                // 3510\n            }                                                                                                          // 3511\n            return documentModified;                                                                                   // 3512\n        },                                                                                                             // 3513\n                                                                                                                       // 3514\n        removeObsoleteAutoLinkSpans: function (element) {                                                              // 3515\n            var spans = element.querySelectorAll('span[data-auto-link=\"true\"]'),                                       // 3516\n                documentModified = false;                                                                              // 3517\n                                                                                                                       // 3518\n            for (var i = 0; i < spans.length; i++) {                                                                   // 3519\n                var textContent = spans[i].textContent;                                                                // 3520\n                if (textContent.indexOf('://') === -1) {                                                               // 3521\n                    textContent = Util.ensureUrlHasProtocol(textContent);                                              // 3522\n                }                                                                                                      // 3523\n                if (spans[i].getAttribute('data-href') !== textContent && nodeIsNotInsideAnchorTag(spans[i])) {        // 3524\n                    documentModified = true;                                                                           // 3525\n                    var trimmedTextContent = textContent.replace(/\\s+$/, '');                                          // 3526\n                    if (spans[i].getAttribute('data-href') === trimmedTextContent) {                                   // 3527\n                        var charactersTrimmed = textContent.length - trimmedTextContent.length,                        // 3528\n                            subtree = Util.splitOffDOMTree(spans[i], this.splitTextBeforeEnd(spans[i], charactersTrimmed));\n                        spans[i].parentNode.insertBefore(subtree, spans[i].nextSibling);                               // 3530\n                    } else {                                                                                           // 3531\n                        // Some editing has happened to the span, so just remove it entirely. The user can put it back // 3532\n                        // around just the href content if they need to prevent it from linking                        // 3533\n                        Util.unwrap(spans[i], this.document);                                                          // 3534\n                    }                                                                                                  // 3535\n                }                                                                                                      // 3536\n            }                                                                                                          // 3537\n            return documentModified;                                                                                   // 3538\n        },                                                                                                             // 3539\n                                                                                                                       // 3540\n        splitTextBeforeEnd: function (element, characterCount) {                                                       // 3541\n            var treeWalker = this.document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null, false),               // 3542\n                lastChildNotExhausted = true;                                                                          // 3543\n                                                                                                                       // 3544\n            // Start the tree walker at the last descendant of the span                                                // 3545\n            while (lastChildNotExhausted) {                                                                            // 3546\n                lastChildNotExhausted = treeWalker.lastChild() !== null;                                               // 3547\n            }                                                                                                          // 3548\n                                                                                                                       // 3549\n            var currentNode,                                                                                           // 3550\n                currentNodeValue,                                                                                      // 3551\n                previousNode;                                                                                          // 3552\n            while (characterCount > 0 && previousNode !== null) {                                                      // 3553\n                currentNode = treeWalker.currentNode;                                                                  // 3554\n                currentNodeValue = currentNode.nodeValue;                                                              // 3555\n                if (currentNodeValue.length > characterCount) {                                                        // 3556\n                    previousNode = currentNode.splitText(currentNodeValue.length - characterCount);                    // 3557\n                    characterCount = 0;                                                                                // 3558\n                } else {                                                                                               // 3559\n                    previousNode = treeWalker.previousNode();                                                          // 3560\n                    characterCount -= currentNodeValue.length;                                                         // 3561\n                }                                                                                                      // 3562\n            }                                                                                                          // 3563\n            return previousNode;                                                                                       // 3564\n        },                                                                                                             // 3565\n                                                                                                                       // 3566\n        performLinkingWithinElement: function (element) {                                                              // 3567\n            var matches = this.findLinkableText(element),                                                              // 3568\n                linkCreated = false;                                                                                   // 3569\n                                                                                                                       // 3570\n            for (var matchIndex = 0; matchIndex < matches.length; matchIndex++) {                                      // 3571\n                var matchingTextNodes = Util.findOrCreateMatchingTextNodes(this.document, element,                     // 3572\n                        matches[matchIndex]);                                                                          // 3573\n                if (this.shouldNotLink(matchingTextNodes)) {                                                           // 3574\n                    continue;                                                                                          // 3575\n                }                                                                                                      // 3576\n                this.createAutoLink(matchingTextNodes, matches[matchIndex].href);                                      // 3577\n            }                                                                                                          // 3578\n            return linkCreated;                                                                                        // 3579\n        },                                                                                                             // 3580\n                                                                                                                       // 3581\n        shouldNotLink: function (textNodes) {                                                                          // 3582\n            var shouldNotLink = false;                                                                                 // 3583\n            for (var i = 0; i < textNodes.length && shouldNotLink === false; i++) {                                    // 3584\n                // Do not link if the text node is either inside an anchor or inside span[data-auto-link]              // 3585\n                shouldNotLink = !!Util.traverseUp(textNodes[i], function (node) {                                      // 3586\n                    return node.nodeName.toLowerCase() === 'a' ||                                                      // 3587\n                        (node.getAttribute && node.getAttribute('data-auto-link') === 'true');                         // 3588\n                });                                                                                                    // 3589\n            }                                                                                                          // 3590\n            return shouldNotLink;                                                                                      // 3591\n        },                                                                                                             // 3592\n                                                                                                                       // 3593\n        findLinkableText: function (contenteditable) {                                                                 // 3594\n            var linkRegExp = new RegExp(LINK_REGEXP_TEXT, 'gi'),                                                       // 3595\n                textContent = contenteditable.textContent,                                                             // 3596\n                match = null,                                                                                          // 3597\n                matches = [];                                                                                          // 3598\n                                                                                                                       // 3599\n            while ((match = linkRegExp.exec(textContent)) !== null) {                                                  // 3600\n                var matchOk = true,                                                                                    // 3601\n                    matchEnd = match.index + match[0].length;                                                          // 3602\n                // If the regexp detected something as a link that has text immediately preceding/following it, bail out.\n                matchOk = (match.index === 0 || WHITESPACE_CHARS.indexOf(textContent[match.index - 1]) !== -1) &&      // 3604\n                    (matchEnd === textContent.length || WHITESPACE_CHARS.indexOf(textContent[matchEnd]) !== -1);       // 3605\n                // If the regexp detected a bare domain that doesn't use one of our expected TLDs, bail out.           // 3606\n                matchOk = matchOk && (match[0].indexOf('/') !== -1 ||                                                  // 3607\n                    KNOWN_TLDS_REGEXP.test(match[0].split('.').pop().split('?').shift()));                             // 3608\n                                                                                                                       // 3609\n                if (matchOk) {                                                                                         // 3610\n                    matches.push({                                                                                     // 3611\n                        href: match[0],                                                                                // 3612\n                        start: match.index,                                                                            // 3613\n                        end: matchEnd                                                                                  // 3614\n                    });                                                                                                // 3615\n                }                                                                                                      // 3616\n            }                                                                                                          // 3617\n            return matches;                                                                                            // 3618\n        },                                                                                                             // 3619\n                                                                                                                       // 3620\n        createAutoLink: function (textNodes, href) {                                                                   // 3621\n            href = Util.ensureUrlHasProtocol(href);                                                                    // 3622\n            var anchor = Util.createLink(this.document, textNodes, href),                                              // 3623\n                span = this.document.createElement('span');                                                            // 3624\n            span.setAttribute('data-auto-link', 'true');                                                               // 3625\n            span.setAttribute('data-href', href);                                                                      // 3626\n            anchor.insertBefore(span, anchor.firstChild);                                                              // 3627\n            while (anchor.childNodes.length > 1) {                                                                     // 3628\n                span.appendChild(anchor.childNodes[1]);                                                                // 3629\n            }                                                                                                          // 3630\n        }                                                                                                              // 3631\n                                                                                                                       // 3632\n    });                                                                                                                // 3633\n}());                                                                                                                  // 3634\nvar ImageDragging;                                                                                                     // 3635\n                                                                                                                       // 3636\n(function () {                                                                                                         // 3637\n    'use strict';                                                                                                      // 3638\n                                                                                                                       // 3639\n    ImageDragging = Extension.extend({                                                                                 // 3640\n        init: function () {                                                                                            // 3641\n            Extension.prototype.init.apply(this, arguments);                                                           // 3642\n                                                                                                                       // 3643\n            this.subscribe('editableDrag', this.handleDrag.bind(this));                                                // 3644\n            this.subscribe('editableDrop', this.handleDrop.bind(this));                                                // 3645\n        },                                                                                                             // 3646\n                                                                                                                       // 3647\n        handleDrag: function (event) {                                                                                 // 3648\n            var className = 'medium-editor-dragover';                                                                  // 3649\n            event.preventDefault();                                                                                    // 3650\n            event.dataTransfer.dropEffect = 'copy';                                                                    // 3651\n                                                                                                                       // 3652\n            if (event.type === 'dragover') {                                                                           // 3653\n                event.target.classList.add(className);                                                                 // 3654\n            } else if (event.type === 'dragleave') {                                                                   // 3655\n                event.target.classList.remove(className);                                                              // 3656\n            }                                                                                                          // 3657\n        },                                                                                                             // 3658\n                                                                                                                       // 3659\n        handleDrop: function (event) {                                                                                 // 3660\n            var className = 'medium-editor-dragover',                                                                  // 3661\n                files;                                                                                                 // 3662\n            event.preventDefault();                                                                                    // 3663\n            event.stopPropagation();                                                                                   // 3664\n                                                                                                                       // 3665\n            // IE9 does not support the File API, so prevent file from opening in a new window                         // 3666\n            // but also don't try to actually get the file                                                             // 3667\n            if (event.dataTransfer.files) {                                                                            // 3668\n                files = Array.prototype.slice.call(event.dataTransfer.files, 0);                                       // 3669\n                files.some(function (file) {                                                                           // 3670\n                    if (file.type.match('image')) {                                                                    // 3671\n                        var fileReader, id;                                                                            // 3672\n                        fileReader = new FileReader();                                                                 // 3673\n                        fileReader.readAsDataURL(file);                                                                // 3674\n                                                                                                                       // 3675\n                        id = 'medium-img-' + (+new Date());                                                            // 3676\n                        Util.insertHTMLCommand(this.document, '<img class=\"medium-editor-image-loading\" id=\"' + id + '\" />');\n                                                                                                                       // 3678\n                        fileReader.onload = function () {                                                              // 3679\n                            var img = this.document.getElementById(id);                                                // 3680\n                            if (img) {                                                                                 // 3681\n                                img.removeAttribute('id');                                                             // 3682\n                                img.removeAttribute('class');                                                          // 3683\n                                img.src = fileReader.result;                                                           // 3684\n                            }                                                                                          // 3685\n                        }.bind(this);                                                                                  // 3686\n                    }                                                                                                  // 3687\n                }.bind(this));                                                                                         // 3688\n            }                                                                                                          // 3689\n            event.target.classList.remove(className);                                                                  // 3690\n        }                                                                                                              // 3691\n    });                                                                                                                // 3692\n}());                                                                                                                  // 3693\n                                                                                                                       // 3694\nvar KeyboardCommands;                                                                                                  // 3695\n(function () {                                                                                                         // 3696\n    'use strict';                                                                                                      // 3697\n                                                                                                                       // 3698\n    /*global Extension, Util */                                                                                        // 3699\n                                                                                                                       // 3700\n    KeyboardCommands = Extension.extend({                                                                              // 3701\n        name: 'keyboard-commands',                                                                                     // 3702\n                                                                                                                       // 3703\n        /* KeyboardCommands Options */                                                                                 // 3704\n                                                                                                                       // 3705\n        /* commands: [Array]                                                                                           // 3706\n         * Array of objects describing each command and the combination of keys that will trigger it                   // 3707\n         * Required for each object:                                                                                   // 3708\n         *   command [String] (argument passed to editor.execAction())                                                 // 3709\n         *   key [String] (keyboard character that triggers this command)                                              // 3710\n         *   meta [boolean] (whether the ctrl/meta key has to be active or inactive)                                   // 3711\n         *   shift [boolean] (whether the shift key has to be active or inactive)                                      // 3712\n         */                                                                                                            // 3713\n        commands: [                                                                                                    // 3714\n            {                                                                                                          // 3715\n                command: 'bold',                                                                                       // 3716\n                key: 'B',                                                                                              // 3717\n                meta: true,                                                                                            // 3718\n                shift: false                                                                                           // 3719\n            },                                                                                                         // 3720\n            {                                                                                                          // 3721\n                command: 'italic',                                                                                     // 3722\n                key: 'I',                                                                                              // 3723\n                meta: true,                                                                                            // 3724\n                shift: false                                                                                           // 3725\n            },                                                                                                         // 3726\n            {                                                                                                          // 3727\n                command: 'underline',                                                                                  // 3728\n                key: 'U',                                                                                              // 3729\n                meta: true,                                                                                            // 3730\n                shift: false                                                                                           // 3731\n            }                                                                                                          // 3732\n        ],                                                                                                             // 3733\n                                                                                                                       // 3734\n        init: function () {                                                                                            // 3735\n            Extension.prototype.init.apply(this, arguments);                                                           // 3736\n                                                                                                                       // 3737\n            this.subscribe('editableKeydown', this.handleKeydown.bind(this));                                          // 3738\n            this.keys = {};                                                                                            // 3739\n            this.commands.forEach(function (command) {                                                                 // 3740\n                var keyCode = command.key.charCodeAt(0);                                                               // 3741\n                if (!this.keys[keyCode]) {                                                                             // 3742\n                    this.keys[keyCode] = [];                                                                           // 3743\n                }                                                                                                      // 3744\n                this.keys[keyCode].push(command);                                                                      // 3745\n            }, this);                                                                                                  // 3746\n        },                                                                                                             // 3747\n                                                                                                                       // 3748\n        handleKeydown: function (event) {                                                                              // 3749\n            var keyCode = Util.getKeyCode(event);                                                                      // 3750\n            if (!this.keys[keyCode]) {                                                                                 // 3751\n                return;                                                                                                // 3752\n            }                                                                                                          // 3753\n                                                                                                                       // 3754\n            var isMeta = Util.isMetaCtrlKey(event),                                                                    // 3755\n                isShift = !!event.shiftKey;                                                                            // 3756\n                                                                                                                       // 3757\n            this.keys[keyCode].forEach(function (data) {                                                               // 3758\n                if (data.meta === isMeta &&                                                                            // 3759\n                    data.shift === isShift) {                                                                          // 3760\n                    event.preventDefault();                                                                            // 3761\n                    event.stopPropagation();                                                                           // 3762\n                                                                                                                       // 3763\n                    // command can be false so the shortcurt is just disabled                                          // 3764\n                    if (false !== data.command) {                                                                      // 3765\n                        this.execAction(data.command);                                                                 // 3766\n                    }                                                                                                  // 3767\n                }                                                                                                      // 3768\n            }, this);                                                                                                  // 3769\n        }                                                                                                              // 3770\n    });                                                                                                                // 3771\n}());                                                                                                                  // 3772\n                                                                                                                       // 3773\nvar FontSizeForm;                                                                                                      // 3774\n(function () {                                                                                                         // 3775\n    'use strict';                                                                                                      // 3776\n                                                                                                                       // 3777\n    /*global FormExtension, Selection */                                                                               // 3778\n                                                                                                                       // 3779\n    FontSizeForm = FormExtension.extend({                                                                              // 3780\n                                                                                                                       // 3781\n        name: 'fontsize',                                                                                              // 3782\n        action: 'fontSize',                                                                                            // 3783\n        aria: 'increase/decrease font size',                                                                           // 3784\n        contentDefault: '&#xB1;', // ±                                                                                 // 3785\n        contentFA: '<i class=\"fa fa-text-height\"></i>',                                                                // 3786\n                                                                                                                       // 3787\n        init: function () {                                                                                            // 3788\n            FormExtension.prototype.init.apply(this, arguments);                                                       // 3789\n        },                                                                                                             // 3790\n                                                                                                                       // 3791\n        // Called when the button the toolbar is clicked                                                               // 3792\n        // Overrides ButtonExtension.handleClick                                                                       // 3793\n        handleClick: function (event) {                                                                                // 3794\n            event.preventDefault();                                                                                    // 3795\n            event.stopPropagation();                                                                                   // 3796\n                                                                                                                       // 3797\n            if (!this.isDisplayed()) {                                                                                 // 3798\n                // Get fontsize of current selection (convert to string since IE returns this as number)               // 3799\n                var fontSize = this.document.queryCommandValue('fontSize') + '';                                       // 3800\n                this.showForm(fontSize);                                                                               // 3801\n            }                                                                                                          // 3802\n                                                                                                                       // 3803\n            return false;                                                                                              // 3804\n        },                                                                                                             // 3805\n                                                                                                                       // 3806\n        // Called by medium-editor to append form to the toolbar                                                       // 3807\n        getForm: function () {                                                                                         // 3808\n            if (!this.form) {                                                                                          // 3809\n                this.form = this.createForm();                                                                         // 3810\n            }                                                                                                          // 3811\n            return this.form;                                                                                          // 3812\n        },                                                                                                             // 3813\n                                                                                                                       // 3814\n        // Used by medium-editor when the default toolbar is to be displayed                                           // 3815\n        isDisplayed: function () {                                                                                     // 3816\n            return this.getForm().style.display === 'block';                                                           // 3817\n        },                                                                                                             // 3818\n                                                                                                                       // 3819\n        hideForm: function () {                                                                                        // 3820\n            this.getForm().style.display = 'none';                                                                     // 3821\n            this.getInput().value = '';                                                                                // 3822\n        },                                                                                                             // 3823\n                                                                                                                       // 3824\n        showForm: function (fontSize) {                                                                                // 3825\n            var input = this.getInput();                                                                               // 3826\n                                                                                                                       // 3827\n            this.base.saveSelection();                                                                                 // 3828\n            this.hideToolbarDefaultActions();                                                                          // 3829\n            this.getForm().style.display = 'block';                                                                    // 3830\n            this.setToolbarPosition();                                                                                 // 3831\n                                                                                                                       // 3832\n            input.value = fontSize || '';                                                                              // 3833\n            input.focus();                                                                                             // 3834\n        },                                                                                                             // 3835\n                                                                                                                       // 3836\n        // Called by core when tearing down medium-editor (destroy)                                                    // 3837\n        destroy: function () {                                                                                         // 3838\n            if (!this.form) {                                                                                          // 3839\n                return false;                                                                                          // 3840\n            }                                                                                                          // 3841\n                                                                                                                       // 3842\n            if (this.form.parentNode) {                                                                                // 3843\n                this.form.parentNode.removeChild(this.form);                                                           // 3844\n            }                                                                                                          // 3845\n                                                                                                                       // 3846\n            delete this.form;                                                                                          // 3847\n        },                                                                                                             // 3848\n                                                                                                                       // 3849\n        // core methods                                                                                                // 3850\n                                                                                                                       // 3851\n        doFormSave: function () {                                                                                      // 3852\n            this.base.restoreSelection();                                                                              // 3853\n            this.base.checkSelection();                                                                                // 3854\n        },                                                                                                             // 3855\n                                                                                                                       // 3856\n        doFormCancel: function () {                                                                                    // 3857\n            this.base.restoreSelection();                                                                              // 3858\n            this.clearFontSize();                                                                                      // 3859\n            this.base.checkSelection();                                                                                // 3860\n        },                                                                                                             // 3861\n                                                                                                                       // 3862\n        // form creation and event handling                                                                            // 3863\n        createForm: function () {                                                                                      // 3864\n            var doc = this.document,                                                                                   // 3865\n                form = doc.createElement('div'),                                                                       // 3866\n                input = doc.createElement('input'),                                                                    // 3867\n                close = doc.createElement('a'),                                                                        // 3868\n                save = doc.createElement('a');                                                                         // 3869\n                                                                                                                       // 3870\n            // Font Size Form (div)                                                                                    // 3871\n            form.className = 'medium-editor-toolbar-form';                                                             // 3872\n            form.id = 'medium-editor-toolbar-form-fontsize-' + this.getEditorId();                                     // 3873\n                                                                                                                       // 3874\n            // Handle clicks on the form itself                                                                        // 3875\n            this.on(form, 'click', this.handleFormClick.bind(this));                                                   // 3876\n                                                                                                                       // 3877\n            // Add font size slider                                                                                    // 3878\n            input.setAttribute('type', 'range');                                                                       // 3879\n            input.setAttribute('min', '1');                                                                            // 3880\n            input.setAttribute('max', '7');                                                                            // 3881\n            input.className = 'medium-editor-toolbar-input';                                                           // 3882\n            form.appendChild(input);                                                                                   // 3883\n                                                                                                                       // 3884\n            // Handle typing in the textbox                                                                            // 3885\n            this.on(input, 'change', this.handleSliderChange.bind(this));                                              // 3886\n                                                                                                                       // 3887\n            // Add save buton                                                                                          // 3888\n            save.setAttribute('href', '#');                                                                            // 3889\n            save.className = 'medium-editor-toobar-save';                                                              // 3890\n            save.innerHTML = this.getEditorOption('buttonLabels') === 'fontawesome' ?                                  // 3891\n                             '<i class=\"fa fa-check\"></i>' :                                                           // 3892\n                             '&#10003;';                                                                               // 3893\n            form.appendChild(save);                                                                                    // 3894\n                                                                                                                       // 3895\n            // Handle save button clicks (capture)                                                                     // 3896\n            this.on(save, 'click', this.handleSaveClick.bind(this), true);                                             // 3897\n                                                                                                                       // 3898\n            // Add close button                                                                                        // 3899\n            close.setAttribute('href', '#');                                                                           // 3900\n            close.className = 'medium-editor-toobar-close';                                                            // 3901\n            close.innerHTML = this.getEditorOption('buttonLabels') === 'fontawesome' ?                                 // 3902\n                              '<i class=\"fa fa-times\"></i>' :                                                          // 3903\n                              '&times;';                                                                               // 3904\n            form.appendChild(close);                                                                                   // 3905\n                                                                                                                       // 3906\n            // Handle close button clicks                                                                              // 3907\n            this.on(close, 'click', this.handleCloseClick.bind(this));                                                 // 3908\n                                                                                                                       // 3909\n            return form;                                                                                               // 3910\n        },                                                                                                             // 3911\n                                                                                                                       // 3912\n        getInput: function () {                                                                                        // 3913\n            return this.getForm().querySelector('input.medium-editor-toolbar-input');                                  // 3914\n        },                                                                                                             // 3915\n                                                                                                                       // 3916\n        clearFontSize: function () {                                                                                   // 3917\n            Selection.getSelectedElements(this.document).forEach(function (el) {                                       // 3918\n                if (el.nodeName.toLowerCase() === 'font' && el.hasAttribute('size')) {                                 // 3919\n                    el.removeAttribute('size');                                                                        // 3920\n                }                                                                                                      // 3921\n            });                                                                                                        // 3922\n        },                                                                                                             // 3923\n                                                                                                                       // 3924\n        handleSliderChange: function () {                                                                              // 3925\n            var size = this.getInput().value;                                                                          // 3926\n            if (size === '4') {                                                                                        // 3927\n                this.clearFontSize();                                                                                  // 3928\n            } else {                                                                                                   // 3929\n                this.execAction('fontSize', { size: size });                                                           // 3930\n            }                                                                                                          // 3931\n        },                                                                                                             // 3932\n                                                                                                                       // 3933\n        handleFormClick: function (event) {                                                                            // 3934\n            // make sure not to hide form when clicking inside the form                                                // 3935\n            event.stopPropagation();                                                                                   // 3936\n        },                                                                                                             // 3937\n                                                                                                                       // 3938\n        handleSaveClick: function (event) {                                                                            // 3939\n            // Clicking Save -> create the font size                                                                   // 3940\n            event.preventDefault();                                                                                    // 3941\n            this.doFormSave();                                                                                         // 3942\n        },                                                                                                             // 3943\n                                                                                                                       // 3944\n        handleCloseClick: function (event) {                                                                           // 3945\n            // Click Close -> close the form                                                                           // 3946\n            event.preventDefault();                                                                                    // 3947\n            this.doFormCancel();                                                                                       // 3948\n        }                                                                                                              // 3949\n    });                                                                                                                // 3950\n}());                                                                                                                  // 3951\nvar PasteHandler;                                                                                                      // 3952\n                                                                                                                       // 3953\n(function () {                                                                                                         // 3954\n    'use strict';                                                                                                      // 3955\n    /*jslint regexp: true*/                                                                                            // 3956\n    /*                                                                                                                 // 3957\n        jslint does not allow character negation, because the negation                                                 // 3958\n        will not match any unicode characters. In the regexes in this                                                  // 3959\n        block, negation is used specifically to match the end of an html                                               // 3960\n        tag, and in fact unicode characters *should* be allowed.                                                       // 3961\n    */                                                                                                                 // 3962\n    function createReplacements() {                                                                                    // 3963\n        return [                                                                                                       // 3964\n                                                                                                                       // 3965\n            // replace two bogus tags that begin pastes from google docs                                               // 3966\n            [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), ''],                                                      // 3967\n            [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), ''],                                                                  // 3968\n                                                                                                                       // 3969\n             // un-html spaces and newlines inserted by OS X                                                           // 3970\n            [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), ' '],                                     // 3971\n            [new RegExp(/<br class=\"Apple-interchange-newline\">/g), '<br>'],                                           // 3972\n                                                                                                                       // 3973\n            // replace google docs italics+bold with a span to be replaced once the html is inserted                   // 3974\n            [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), '<span class=\"replace-with italic bold\">'],\n                                                                                                                       // 3976\n            // replace google docs italics with a span to be replaced once the html is inserted                        // 3977\n            [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), '<span class=\"replace-with italic\">'],                 // 3978\n                                                                                                                       // 3979\n            //[replace google docs bolds with a span to be replaced once the html is inserted                          // 3980\n            [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), '<span class=\"replace-with bold\">'],                    // 3981\n                                                                                                                       // 3982\n             // replace manually entered b/i/a tags with real ones                                                     // 3983\n            [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), '<$1$2>'],                                                          // 3984\n                                                                                                                       // 3985\n             // replace manually a tags with real ones, converting smart-quotes from google docs                       // 3986\n            [new RegExp(/&lt;a(?:(?!href).)+href=(?:&quot;|&rdquo;|&ldquo;|\"|“|”)(((?!&quot;|&rdquo;|&ldquo;|\"|“|”).)*)(?:&quot;|&rdquo;|&ldquo;|\"|“|”)(?:(?!&gt;).)*&gt;/gi), '<a href=\"$1\">'],\n                                                                                                                       // 3988\n            // Newlines between paragraphs in html have no syntactic value,                                            // 3989\n            // but then have a tendency to accidentally become additional paragraphs down the line                     // 3990\n            [new RegExp(/<\\/p>\\n+/gi), '</p>'],                                                                        // 3991\n            [new RegExp(/\\n+<p/gi), '<p'],                                                                             // 3992\n                                                                                                                       // 3993\n            // Microsoft Word makes these odd tags, like <o:p></o:p>                                                   // 3994\n            [new RegExp(/<\\/?o:[a-z]*>/gi), '']                                                                        // 3995\n        ];                                                                                                             // 3996\n    }                                                                                                                  // 3997\n    /*jslint regexp: false*/                                                                                           // 3998\n                                                                                                                       // 3999\n    PasteHandler = Extension.extend({                                                                                  // 4000\n        /* Paste Options */                                                                                            // 4001\n                                                                                                                       // 4002\n        /* forcePlainText: [boolean]                                                                                   // 4003\n         * Forces pasting as plain text.                                                                               // 4004\n         */                                                                                                            // 4005\n        forcePlainText: true,                                                                                          // 4006\n                                                                                                                       // 4007\n        /* cleanPastedHTML: [boolean]                                                                                  // 4008\n         * cleans pasted content from different sources, like google docs etc.                                         // 4009\n         */                                                                                                            // 4010\n        cleanPastedHTML: false,                                                                                        // 4011\n                                                                                                                       // 4012\n        /* cleanReplacements: [Array]                                                                                  // 4013\n         * custom pairs (2 element arrays) of RegExp and replacement text to use during paste when                     // 4014\n         * __forcePlainText__ or __cleanPastedHTML__ are `true` OR when calling `cleanPaste(text)` helper method.      // 4015\n         */                                                                                                            // 4016\n        cleanReplacements: [],                                                                                         // 4017\n                                                                                                                       // 4018\n        /* cleanAttrs:: [Array]                                                                                        // 4019\n         * list of element attributes to remove during paste when __cleanPastedHTML__ is `true` or when                // 4020\n         * calling `cleanPaste(text)` or `pasteHTML(html, options)` helper methods.                                    // 4021\n         */                                                                                                            // 4022\n        cleanAttrs: ['class', 'style', 'dir'],                                                                         // 4023\n                                                                                                                       // 4024\n        /* cleanTags: [Array]                                                                                          // 4025\n         * list of element tag names to remove during paste when __cleanPastedHTML__ is `true` or when                 // 4026\n         * calling `cleanPaste(text)` or `pasteHTML(html, options)` helper methods.                                    // 4027\n         */                                                                                                            // 4028\n        cleanTags: ['meta'],                                                                                           // 4029\n                                                                                                                       // 4030\n        init: function () {                                                                                            // 4031\n            Extension.prototype.init.apply(this, arguments);                                                           // 4032\n                                                                                                                       // 4033\n            if (this.forcePlainText || this.cleanPastedHTML) {                                                         // 4034\n                this.subscribe('editablePaste', this.handlePaste.bind(this));                                          // 4035\n            }                                                                                                          // 4036\n        },                                                                                                             // 4037\n                                                                                                                       // 4038\n        handlePaste: function (event, element) {                                                                       // 4039\n            var paragraphs,                                                                                            // 4040\n                html = '',                                                                                             // 4041\n                p,                                                                                                     // 4042\n                dataFormatHTML = 'text/html',                                                                          // 4043\n                dataFormatPlain = 'text/plain',                                                                        // 4044\n                pastedHTML,                                                                                            // 4045\n                pastedPlain;                                                                                           // 4046\n                                                                                                                       // 4047\n            if (this.window.clipboardData && event.clipboardData === undefined) {                                      // 4048\n                event.clipboardData = this.window.clipboardData;                                                       // 4049\n                // If window.clipboardData exists, but event.clipboardData doesn't exist,                              // 4050\n                // we're probably in IE. IE only has two possibilities for clipboard                                   // 4051\n                // data format: 'Text' and 'URL'.                                                                      // 4052\n                //                                                                                                     // 4053\n                // Of the two, we want 'Text':                                                                         // 4054\n                dataFormatHTML = 'Text';                                                                               // 4055\n                dataFormatPlain = 'Text';                                                                              // 4056\n            }                                                                                                          // 4057\n                                                                                                                       // 4058\n            if (event.clipboardData &&                                                                                 // 4059\n                    event.clipboardData.getData &&                                                                     // 4060\n                    !event.defaultPrevented) {                                                                         // 4061\n                event.preventDefault();                                                                                // 4062\n                                                                                                                       // 4063\n                pastedHTML = event.clipboardData.getData(dataFormatHTML);                                              // 4064\n                pastedPlain = event.clipboardData.getData(dataFormatPlain);                                            // 4065\n                                                                                                                       // 4066\n                if (this.cleanPastedHTML && pastedHTML) {                                                              // 4067\n                    return this.cleanPaste(pastedHTML);                                                                // 4068\n                }                                                                                                      // 4069\n                                                                                                                       // 4070\n                if (!(this.getEditorOption('disableReturn') || element.getAttribute('data-disable-return'))) {         // 4071\n                    paragraphs = pastedPlain.split(/[\\r\\n]+/g);                                                        // 4072\n                    // If there are no \\r\\n in data, don't wrap in <p>                                                 // 4073\n                    if (paragraphs.length > 1) {                                                                       // 4074\n                        for (p = 0; p < paragraphs.length; p += 1) {                                                   // 4075\n                            if (paragraphs[p] !== '') {                                                                // 4076\n                                html += '<p>' + Util.htmlEntities(paragraphs[p]) + '</p>';                             // 4077\n                            }                                                                                          // 4078\n                        }                                                                                              // 4079\n                    } else {                                                                                           // 4080\n                        html = Util.htmlEntities(paragraphs[0]);                                                       // 4081\n                    }                                                                                                  // 4082\n                } else {                                                                                               // 4083\n                    html = Util.htmlEntities(pastedPlain);                                                             // 4084\n                }                                                                                                      // 4085\n                Util.insertHTMLCommand(this.document, html);                                                           // 4086\n            }                                                                                                          // 4087\n        },                                                                                                             // 4088\n                                                                                                                       // 4089\n        cleanPaste: function (text) {                                                                                  // 4090\n            var i, elList, workEl,                                                                                     // 4091\n                el = Selection.getSelectionElement(this.window),                                                       // 4092\n                multiline = /<p|<br|<div/.test(text),                                                                  // 4093\n                replacements = createReplacements().concat(this.cleanReplacements || []);                              // 4094\n                                                                                                                       // 4095\n            for (i = 0; i < replacements.length; i += 1) {                                                             // 4096\n                text = text.replace(replacements[i][0], replacements[i][1]);                                           // 4097\n            }                                                                                                          // 4098\n                                                                                                                       // 4099\n            if (!multiline) {                                                                                          // 4100\n                return this.pasteHTML(text);                                                                           // 4101\n            }                                                                                                          // 4102\n                                                                                                                       // 4103\n            // double br's aren't converted to p tags, but we want paragraphs.                                         // 4104\n            elList = text.split('<br><br>');                                                                           // 4105\n                                                                                                                       // 4106\n            this.pasteHTML('<p>' + elList.join('</p><p>') + '</p>');                                                   // 4107\n                                                                                                                       // 4108\n            try {                                                                                                      // 4109\n                this.document.execCommand('insertText', false, '\\n');                                                  // 4110\n            } catch (ignore) { }                                                                                       // 4111\n                                                                                                                       // 4112\n            // block element cleanup                                                                                   // 4113\n            elList = el.querySelectorAll('a,p,div,br');                                                                // 4114\n            for (i = 0; i < elList.length; i += 1) {                                                                   // 4115\n                workEl = elList[i];                                                                                    // 4116\n                                                                                                                       // 4117\n                // Microsoft Word replaces some spaces with newlines.                                                  // 4118\n                // While newlines between block elements are meaningless, newlines within                              // 4119\n                // elements are sometimes actually spaces.                                                             // 4120\n                workEl.innerHTML = workEl.innerHTML.replace(/\\n/gi, ' ');                                              // 4121\n                                                                                                                       // 4122\n                switch (workEl.nodeName.toLowerCase()) {                                                               // 4123\n                    case 'p':                                                                                          // 4124\n                    case 'div':                                                                                        // 4125\n                        this.filterCommonBlocks(workEl);                                                               // 4126\n                        break;                                                                                         // 4127\n                    case 'br':                                                                                         // 4128\n                        this.filterLineBreak(workEl);                                                                  // 4129\n                        break;                                                                                         // 4130\n                }                                                                                                      // 4131\n            }                                                                                                          // 4132\n        },                                                                                                             // 4133\n                                                                                                                       // 4134\n        pasteHTML: function (html, options) {                                                                          // 4135\n            options = Util.defaults({}, options, {                                                                     // 4136\n                cleanAttrs: this.cleanAttrs,                                                                           // 4137\n                cleanTags: this.cleanTags                                                                              // 4138\n            });                                                                                                        // 4139\n                                                                                                                       // 4140\n            var elList, workEl, i, fragmentBody, pasteBlock = this.document.createDocumentFragment();                  // 4141\n                                                                                                                       // 4142\n            pasteBlock.appendChild(this.document.createElement('body'));                                               // 4143\n                                                                                                                       // 4144\n            fragmentBody = pasteBlock.querySelector('body');                                                           // 4145\n            fragmentBody.innerHTML = html;                                                                             // 4146\n                                                                                                                       // 4147\n            this.cleanupSpans(fragmentBody);                                                                           // 4148\n                                                                                                                       // 4149\n            elList = fragmentBody.querySelectorAll('*');                                                               // 4150\n                                                                                                                       // 4151\n            for (i = 0; i < elList.length; i += 1) {                                                                   // 4152\n                workEl = elList[i];                                                                                    // 4153\n                                                                                                                       // 4154\n                if ('a' === workEl.nodeName.toLowerCase() && this.getEditorOption('targetBlank')) {                    // 4155\n                    Util.setTargetBlank(workEl);                                                                       // 4156\n                }                                                                                                      // 4157\n                                                                                                                       // 4158\n                Util.cleanupAttrs(workEl, options.cleanAttrs);                                                         // 4159\n                Util.cleanupTags(workEl, options.cleanTags);                                                           // 4160\n            }                                                                                                          // 4161\n                                                                                                                       // 4162\n            Util.insertHTMLCommand(this.document, fragmentBody.innerHTML.replace(/&nbsp;/g, ' '));                     // 4163\n        },                                                                                                             // 4164\n                                                                                                                       // 4165\n        isCommonBlock: function (el) {                                                                                 // 4166\n            return (el && (el.nodeName.toLowerCase() === 'p' || el.nodeName.toLowerCase() === 'div'));                 // 4167\n        },                                                                                                             // 4168\n                                                                                                                       // 4169\n        filterCommonBlocks: function (el) {                                                                            // 4170\n            if (/^\\s*$/.test(el.textContent) && el.parentNode) {                                                       // 4171\n                el.parentNode.removeChild(el);                                                                         // 4172\n            }                                                                                                          // 4173\n        },                                                                                                             // 4174\n                                                                                                                       // 4175\n        filterLineBreak: function (el) {                                                                               // 4176\n            if (this.isCommonBlock(el.previousElementSibling)) {                                                       // 4177\n                // remove stray br's following common block elements                                                   // 4178\n                this.removeWithParent(el);                                                                             // 4179\n            } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n                // remove br's just inside open or close tags of a div/p                                               // 4181\n                this.removeWithParent(el);                                                                             // 4182\n            } else if (el.parentNode && el.parentNode.childElementCount === 1 && el.parentNode.textContent === '') {   // 4183\n                // and br's that are the only child of elements other than div/p                                       // 4184\n                this.removeWithParent(el);                                                                             // 4185\n            }                                                                                                          // 4186\n        },                                                                                                             // 4187\n                                                                                                                       // 4188\n        // remove an element, including its parent, if it is the only element within its parent                        // 4189\n        removeWithParent: function (el) {                                                                              // 4190\n            if (el && el.parentNode) {                                                                                 // 4191\n                if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {                               // 4192\n                    el.parentNode.parentNode.removeChild(el.parentNode);                                               // 4193\n                } else {                                                                                               // 4194\n                    el.parentNode.removeChild(el);                                                                     // 4195\n                }                                                                                                      // 4196\n            }                                                                                                          // 4197\n        },                                                                                                             // 4198\n                                                                                                                       // 4199\n        cleanupSpans: function (containerEl) {                                                                         // 4200\n            var i,                                                                                                     // 4201\n                el,                                                                                                    // 4202\n                newEl,                                                                                                 // 4203\n                spans = containerEl.querySelectorAll('.replace-with'),                                                 // 4204\n                isCEF = function (el) {                                                                                // 4205\n                    return (el && el.nodeName !== '#text' && el.getAttribute('contenteditable') === 'false');          // 4206\n                };                                                                                                     // 4207\n                                                                                                                       // 4208\n            for (i = 0; i < spans.length; i += 1) {                                                                    // 4209\n                el = spans[i];                                                                                         // 4210\n                newEl = this.document.createElement(el.classList.contains('bold') ? 'b' : 'i');                        // 4211\n                                                                                                                       // 4212\n                if (el.classList.contains('bold') && el.classList.contains('italic')) {                                // 4213\n                    // add an i tag as well if this has both italics and bold                                          // 4214\n                    newEl.innerHTML = '<i>' + el.innerHTML + '</i>';                                                   // 4215\n                } else {                                                                                               // 4216\n                    newEl.innerHTML = el.innerHTML;                                                                    // 4217\n                }                                                                                                      // 4218\n                el.parentNode.replaceChild(newEl, el);                                                                 // 4219\n            }                                                                                                          // 4220\n                                                                                                                       // 4221\n            spans = containerEl.querySelectorAll('span');                                                              // 4222\n            for (i = 0; i < spans.length; i += 1) {                                                                    // 4223\n                el = spans[i];                                                                                         // 4224\n                                                                                                                       // 4225\n                // bail if span is in contenteditable = false                                                          // 4226\n                if (Util.traverseUp(el, isCEF)) {                                                                      // 4227\n                    return false;                                                                                      // 4228\n                }                                                                                                      // 4229\n                                                                                                                       // 4230\n                // remove empty spans, replace others with their contents                                              // 4231\n                Util.unwrap(el, this.document);                                                                        // 4232\n            }                                                                                                          // 4233\n        }                                                                                                              // 4234\n    });                                                                                                                // 4235\n}());                                                                                                                  // 4236\n                                                                                                                       // 4237\nvar Placeholder;                                                                                                       // 4238\n                                                                                                                       // 4239\n(function () {                                                                                                         // 4240\n    'use strict';                                                                                                      // 4241\n                                                                                                                       // 4242\n    /*global Extension */                                                                                              // 4243\n                                                                                                                       // 4244\n    Placeholder = Extension.extend({                                                                                   // 4245\n        name: 'placeholder',                                                                                           // 4246\n                                                                                                                       // 4247\n        /* Placeholder Options */                                                                                      // 4248\n                                                                                                                       // 4249\n        /* text: [string]                                                                                              // 4250\n         * Text to display in the placeholder                                                                          // 4251\n         */                                                                                                            // 4252\n        text: 'Type your text',                                                                                        // 4253\n                                                                                                                       // 4254\n        /* hideOnClick: [boolean]                                                                                      // 4255\n         * Should we hide the placeholder on click (true) or when user starts typing (false)                           // 4256\n         */                                                                                                            // 4257\n        hideOnClick: true,                                                                                             // 4258\n                                                                                                                       // 4259\n        init: function () {                                                                                            // 4260\n            Extension.prototype.init.apply(this, arguments);                                                           // 4261\n                                                                                                                       // 4262\n            this.initPlaceholders();                                                                                   // 4263\n            this.attachEventHandlers();                                                                                // 4264\n        },                                                                                                             // 4265\n                                                                                                                       // 4266\n        initPlaceholders: function () {                                                                                // 4267\n            this.getEditorElements().forEach(function (el) {                                                           // 4268\n                if (!el.getAttribute('data-placeholder')) {                                                            // 4269\n                    el.setAttribute('data-placeholder', this.text);                                                    // 4270\n                }                                                                                                      // 4271\n                this.updatePlaceholder(el);                                                                            // 4272\n            }, this);                                                                                                  // 4273\n        },                                                                                                             // 4274\n                                                                                                                       // 4275\n        destroy: function () {                                                                                         // 4276\n            this.getEditorElements().forEach(function (el) {                                                           // 4277\n                if (el.getAttribute('data-placeholder') === this.text) {                                               // 4278\n                    el.removeAttribute('data-placeholder');                                                            // 4279\n                }                                                                                                      // 4280\n            }, this);                                                                                                  // 4281\n        },                                                                                                             // 4282\n                                                                                                                       // 4283\n        showPlaceholder: function (el) {                                                                               // 4284\n            if (el) {                                                                                                  // 4285\n                el.classList.add('medium-editor-placeholder');                                                         // 4286\n            }                                                                                                          // 4287\n        },                                                                                                             // 4288\n                                                                                                                       // 4289\n        hidePlaceholder: function (el) {                                                                               // 4290\n            if (el) {                                                                                                  // 4291\n                el.classList.remove('medium-editor-placeholder');                                                      // 4292\n            }                                                                                                          // 4293\n        },                                                                                                             // 4294\n                                                                                                                       // 4295\n        updatePlaceholder: function (el) {                                                                             // 4296\n            // if one of these element ('img, blockquote, ul, ol') are found inside the given element, we won't display the placeholder\n            if (!(el.querySelector('img, blockquote, ul, ol')) && el.textContent.replace(/^\\s+|\\s+$/g, '') === '') {   // 4298\n                return this.showPlaceholder(el);                                                                       // 4299\n            }                                                                                                          // 4300\n                                                                                                                       // 4301\n            this.hidePlaceholder(el);                                                                                  // 4302\n        },                                                                                                             // 4303\n                                                                                                                       // 4304\n        attachEventHandlers: function () {                                                                             // 4305\n            // Custom events                                                                                           // 4306\n            this.subscribe('blur', this.handleExternalInteraction.bind(this));                                         // 4307\n                                                                                                                       // 4308\n            // Check placeholder on blur                                                                               // 4309\n            this.subscribe('editableBlur', this.handleBlur.bind(this));                                                // 4310\n                                                                                                                       // 4311\n            // if we don't want the placeholder to be removed on click but when user start typing                      // 4312\n            if (this.hideOnClick) {                                                                                    // 4313\n                this.subscribe('editableClick', this.handleHidePlaceholderEvent.bind(this));                           // 4314\n            } else {                                                                                                   // 4315\n                this.subscribe('editableKeyup', this.handleBlur.bind(this));                                           // 4316\n            }                                                                                                          // 4317\n                                                                                                                       // 4318\n            // Events where we always hide the placeholder                                                             // 4319\n            this.subscribe('editableKeypress', this.handleHidePlaceholderEvent.bind(this));                            // 4320\n            this.subscribe('editablePaste', this.handleHidePlaceholderEvent.bind(this));                               // 4321\n        },                                                                                                             // 4322\n                                                                                                                       // 4323\n        handleHidePlaceholderEvent: function (event, element) {                                                        // 4324\n            // Events where we hide the placeholder                                                                    // 4325\n            this.hidePlaceholder(element);                                                                             // 4326\n        },                                                                                                             // 4327\n                                                                                                                       // 4328\n        handleBlur: function (event, element) {                                                                        // 4329\n            // Update placeholder for element that lost focus                                                          // 4330\n            this.updatePlaceholder(element);                                                                           // 4331\n        },                                                                                                             // 4332\n                                                                                                                       // 4333\n        handleExternalInteraction: function () {                                                                       // 4334\n            // Update all placeholders                                                                                 // 4335\n            this.initPlaceholders();                                                                                   // 4336\n        }                                                                                                              // 4337\n    });                                                                                                                // 4338\n}());                                                                                                                  // 4339\n                                                                                                                       // 4340\nvar Toolbar;                                                                                                           // 4341\n(function () {                                                                                                         // 4342\n    'use strict';                                                                                                      // 4343\n                                                                                                                       // 4344\n    /*global Util, Selection, Extension */                                                                             // 4345\n                                                                                                                       // 4346\n    Toolbar = Extension.extend({                                                                                       // 4347\n        name: 'toolbar',                                                                                               // 4348\n                                                                                                                       // 4349\n        /* Toolbar Options */                                                                                          // 4350\n                                                                                                                       // 4351\n        /* align: ['left'|'center'|'right']                                                                            // 4352\n         * When the __static__ option is true, this aligns the static toolbar                                          // 4353\n         * relative to the medium-editor element.                                                                      // 4354\n         */                                                                                                            // 4355\n        align: 'center',                                                                                               // 4356\n                                                                                                                       // 4357\n        /* allowMultiParagraphSelection: [boolean]                                                                     // 4358\n         * enables/disables whether the toolbar should be displayed when                                               // 4359\n         * selecting multiple paragraphs/block elements                                                                // 4360\n         */                                                                                                            // 4361\n        allowMultiParagraphSelection: true,                                                                            // 4362\n                                                                                                                       // 4363\n        /* buttons: [Array]                                                                                            // 4364\n         * the names of the set of buttons to display on the toolbar.                                                  // 4365\n         */                                                                                                            // 4366\n        buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],                                       // 4367\n                                                                                                                       // 4368\n        /* diffLeft: [Number]                                                                                          // 4369\n         * value in pixels to be added to the X axis positioning of the toolbar.                                       // 4370\n         */                                                                                                            // 4371\n        diffLeft: 0,                                                                                                   // 4372\n                                                                                                                       // 4373\n        /* diffTop: [Number]                                                                                           // 4374\n         * value in pixels to be added to the Y axis positioning of the toolbar.                                       // 4375\n         */                                                                                                            // 4376\n        diffTop: -10,                                                                                                  // 4377\n                                                                                                                       // 4378\n        /* firstButtonClass: [string]                                                                                  // 4379\n         * CSS class added to the first button in the toolbar.                                                         // 4380\n         */                                                                                                            // 4381\n        firstButtonClass: 'medium-editor-button-first',                                                                // 4382\n                                                                                                                       // 4383\n        /* lastButtonClass: [string]                                                                                   // 4384\n         * CSS class added to the last button in the toolbar.                                                          // 4385\n         */                                                                                                            // 4386\n        lastButtonClass: 'medium-editor-button-last',                                                                  // 4387\n                                                                                                                       // 4388\n        /* standardizeSelectionStart: [boolean]                                                                        // 4389\n         * enables/disables standardizing how the beginning of a range is decided                                      // 4390\n         * between browsers whenever the selected text is analyzed for updating toolbar buttons status.                // 4391\n         */                                                                                                            // 4392\n        standardizeSelectionStart: false,                                                                              // 4393\n                                                                                                                       // 4394\n        /* static: [boolean]                                                                                           // 4395\n         * enable/disable the toolbar always displaying in the same location                                           // 4396\n         * relative to the medium-editor element.                                                                      // 4397\n         */                                                                                                            // 4398\n        static: false,                                                                                                 // 4399\n                                                                                                                       // 4400\n        /* sticky: [boolean]                                                                                           // 4401\n         * When the __static__ option is true, this enables/disables the toolbar                                       // 4402\n         * \"sticking\" to the viewport and staying visible on the screen while                                          // 4403\n         * the page scrolls.                                                                                           // 4404\n         */                                                                                                            // 4405\n        sticky: false,                                                                                                 // 4406\n                                                                                                                       // 4407\n        /* updateOnEmptySelection: [boolean]                                                                           // 4408\n         * When the __static__ option is true, this enables/disables updating                                          // 4409\n         * the state of the toolbar buttons even when the selection is collapsed                                       // 4410\n         * (there is no selection, just a cursor).                                                                     // 4411\n         */                                                                                                            // 4412\n        updateOnEmptySelection: false,                                                                                 // 4413\n                                                                                                                       // 4414\n        init: function () {                                                                                            // 4415\n            Extension.prototype.init.apply(this, arguments);                                                           // 4416\n                                                                                                                       // 4417\n            this.initThrottledMethods();                                                                               // 4418\n            this.getEditorOption('elementsContainer').appendChild(this.getToolbarElement());                           // 4419\n        },                                                                                                             // 4420\n                                                                                                                       // 4421\n        // Helper method to execute method for every extension, but ignoring the toolbar extension                     // 4422\n        forEachExtension: function (iterator, context) {                                                               // 4423\n            return this.base.extensions.forEach(function (command) {                                                   // 4424\n                if (command === this) {                                                                                // 4425\n                    return;                                                                                            // 4426\n                }                                                                                                      // 4427\n                return iterator.apply(context || this, arguments);                                                     // 4428\n            }, this);                                                                                                  // 4429\n        },                                                                                                             // 4430\n                                                                                                                       // 4431\n        // Toolbar creation/deletion                                                                                   // 4432\n                                                                                                                       // 4433\n        createToolbar: function () {                                                                                   // 4434\n            var toolbar = this.document.createElement('div');                                                          // 4435\n                                                                                                                       // 4436\n            toolbar.id = 'medium-editor-toolbar-' + this.getEditorId();                                                // 4437\n            toolbar.className = 'medium-editor-toolbar';                                                               // 4438\n                                                                                                                       // 4439\n            if (this.static) {                                                                                         // 4440\n                toolbar.className += ' static-toolbar';                                                                // 4441\n            } else {                                                                                                   // 4442\n                toolbar.className += ' medium-editor-stalker-toolbar';                                                 // 4443\n            }                                                                                                          // 4444\n                                                                                                                       // 4445\n            toolbar.appendChild(this.createToolbarButtons());                                                          // 4446\n                                                                                                                       // 4447\n            // Add any forms that extensions may have                                                                  // 4448\n            this.forEachExtension(function (extension) {                                                               // 4449\n                if (extension.hasForm) {                                                                               // 4450\n                    toolbar.appendChild(extension.getForm());                                                          // 4451\n                }                                                                                                      // 4452\n            });                                                                                                        // 4453\n                                                                                                                       // 4454\n            this.attachEventHandlers();                                                                                // 4455\n                                                                                                                       // 4456\n            return toolbar;                                                                                            // 4457\n        },                                                                                                             // 4458\n                                                                                                                       // 4459\n        createToolbarButtons: function () {                                                                            // 4460\n            var ul = this.document.createElement('ul'),                                                                // 4461\n                li,                                                                                                    // 4462\n                btn,                                                                                                   // 4463\n                buttons,                                                                                               // 4464\n                extension,                                                                                             // 4465\n                buttonName,                                                                                            // 4466\n                buttonOpts;                                                                                            // 4467\n                                                                                                                       // 4468\n            ul.id = 'medium-editor-toolbar-actions' + this.getEditorId();                                              // 4469\n            ul.className = 'medium-editor-toolbar-actions';                                                            // 4470\n            ul.style.display = 'block';                                                                                // 4471\n                                                                                                                       // 4472\n            this.buttons.forEach(function (button) {                                                                   // 4473\n                if (typeof button === 'string') {                                                                      // 4474\n                    buttonName = button;                                                                               // 4475\n                    buttonOpts = null;                                                                                 // 4476\n                } else {                                                                                               // 4477\n                    buttonName = button.name;                                                                          // 4478\n                    buttonOpts = button;                                                                               // 4479\n                }                                                                                                      // 4480\n                                                                                                                       // 4481\n                // If the button already exists as an extension, it'll be returned                                     // 4482\n                // othwerise it'll create the default built-in button                                                  // 4483\n                extension = this.base.addBuiltInExtension(buttonName, buttonOpts);                                     // 4484\n                                                                                                                       // 4485\n                if (extension && typeof extension.getButton === 'function') {                                          // 4486\n                    btn = extension.getButton(this.base);                                                              // 4487\n                    li = this.document.createElement('li');                                                            // 4488\n                    if (Util.isElement(btn)) {                                                                         // 4489\n                        li.appendChild(btn);                                                                           // 4490\n                    } else {                                                                                           // 4491\n                        li.innerHTML = btn;                                                                            // 4492\n                    }                                                                                                  // 4493\n                    ul.appendChild(li);                                                                                // 4494\n                }                                                                                                      // 4495\n            }, this);                                                                                                  // 4496\n                                                                                                                       // 4497\n            buttons = ul.querySelectorAll('button');                                                                   // 4498\n            if (buttons.length > 0) {                                                                                  // 4499\n                buttons[0].classList.add(this.firstButtonClass);                                                       // 4500\n                buttons[buttons.length - 1].classList.add(this.lastButtonClass);                                       // 4501\n            }                                                                                                          // 4502\n                                                                                                                       // 4503\n            return ul;                                                                                                 // 4504\n        },                                                                                                             // 4505\n                                                                                                                       // 4506\n        destroy: function () {                                                                                         // 4507\n            if (this.toolbar) {                                                                                        // 4508\n                if (this.toolbar.parentNode) {                                                                         // 4509\n                    this.toolbar.parentNode.removeChild(this.toolbar);                                                 // 4510\n                }                                                                                                      // 4511\n                delete this.toolbar;                                                                                   // 4512\n            }                                                                                                          // 4513\n        },                                                                                                             // 4514\n                                                                                                                       // 4515\n        // Toolbar accessors                                                                                           // 4516\n                                                                                                                       // 4517\n        getToolbarElement: function () {                                                                               // 4518\n            if (!this.toolbar) {                                                                                       // 4519\n                this.toolbar = this.createToolbar();                                                                   // 4520\n            }                                                                                                          // 4521\n                                                                                                                       // 4522\n            return this.toolbar;                                                                                       // 4523\n        },                                                                                                             // 4524\n                                                                                                                       // 4525\n        getToolbarActionsElement: function () {                                                                        // 4526\n            return this.getToolbarElement().querySelector('.medium-editor-toolbar-actions');                           // 4527\n        },                                                                                                             // 4528\n                                                                                                                       // 4529\n        // Toolbar event handlers                                                                                      // 4530\n                                                                                                                       // 4531\n        initThrottledMethods: function () {                                                                            // 4532\n            // throttledPositionToolbar is throttled because:                                                          // 4533\n            // - It will be called when the browser is resizing, which can fire many times very quickly                // 4534\n            // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\n            this.throttledPositionToolbar = Util.throttle(function () {                                                // 4536\n                if (this.base.isActive) {                                                                              // 4537\n                    this.positionToolbarIfShown();                                                                     // 4538\n                }                                                                                                      // 4539\n            }.bind(this));                                                                                             // 4540\n        },                                                                                                             // 4541\n                                                                                                                       // 4542\n        attachEventHandlers: function () {                                                                             // 4543\n            // MediumEditor custom events for when user beings and ends interaction with a contenteditable and its elements\n            this.subscribe('blur', this.handleBlur.bind(this));                                                        // 4545\n            this.subscribe('focus', this.handleFocus.bind(this));                                                      // 4546\n                                                                                                                       // 4547\n            // Updating the state of the toolbar as things change                                                      // 4548\n            this.subscribe('editableClick', this.handleEditableClick.bind(this));                                      // 4549\n            this.subscribe('editableKeyup', this.handleEditableKeyup.bind(this));                                      // 4550\n                                                                                                                       // 4551\n            // Handle mouseup on document for updating the selection in the toolbar                                    // 4552\n            this.on(this.document.documentElement, 'mouseup', this.handleDocumentMouseup.bind(this));                  // 4553\n                                                                                                                       // 4554\n            // Add a scroll event for sticky toolbar                                                                   // 4555\n            if (this.static && this.sticky) {                                                                          // 4556\n                // On scroll (capture), re-position the toolbar                                                        // 4557\n                this.on(this.window, 'scroll', this.handleWindowScroll.bind(this), true);                              // 4558\n            }                                                                                                          // 4559\n                                                                                                                       // 4560\n            // On resize, re-position the toolbar                                                                      // 4561\n            this.on(this.window, 'resize', this.handleWindowResize.bind(this));                                        // 4562\n        },                                                                                                             // 4563\n                                                                                                                       // 4564\n        handleWindowScroll: function () {                                                                              // 4565\n            this.positionToolbarIfShown();                                                                             // 4566\n        },                                                                                                             // 4567\n                                                                                                                       // 4568\n        handleWindowResize: function () {                                                                              // 4569\n            this.throttledPositionToolbar();                                                                           // 4570\n        },                                                                                                             // 4571\n                                                                                                                       // 4572\n        handleDocumentMouseup: function (event) {                                                                      // 4573\n            // Do not trigger checkState when mouseup fires over the toolbar                                           // 4574\n            if (event &&                                                                                               // 4575\n                    event.target &&                                                                                    // 4576\n                    Util.isDescendant(this.getToolbarElement(), event.target)) {                                       // 4577\n                return false;                                                                                          // 4578\n            }                                                                                                          // 4579\n            this.checkState();                                                                                         // 4580\n        },                                                                                                             // 4581\n                                                                                                                       // 4582\n        handleEditableClick: function () {                                                                             // 4583\n            // Delay the call to checkState to handle bug where selection is empty                                     // 4584\n            // immediately after clicking inside a pre-existing selection                                              // 4585\n            setTimeout(function () {                                                                                   // 4586\n                this.checkState();                                                                                     // 4587\n            }.bind(this), 0);                                                                                          // 4588\n        },                                                                                                             // 4589\n                                                                                                                       // 4590\n        handleEditableKeyup: function () {                                                                             // 4591\n            this.checkState();                                                                                         // 4592\n        },                                                                                                             // 4593\n                                                                                                                       // 4594\n        handleBlur: function () {                                                                                      // 4595\n            // Kill any previously delayed calls to hide the toolbar                                                   // 4596\n            clearTimeout(this.hideTimeout);                                                                            // 4597\n                                                                                                                       // 4598\n            // Blur may fire even if we have a selection, so we want to prevent any delayed showToolbar                // 4599\n            // calls from happening in this specific case                                                              // 4600\n            clearTimeout(this.delayShowTimeout);                                                                       // 4601\n                                                                                                                       // 4602\n            // Delay the call to hideToolbar to handle bug with multiple editors on the page at once                   // 4603\n            this.hideTimeout = setTimeout(function () {                                                                // 4604\n                this.hideToolbar();                                                                                    // 4605\n            }.bind(this), 1);                                                                                          // 4606\n        },                                                                                                             // 4607\n                                                                                                                       // 4608\n        handleFocus: function () {                                                                                     // 4609\n            this.checkState();                                                                                         // 4610\n        },                                                                                                             // 4611\n                                                                                                                       // 4612\n        // Hiding/showing toolbar                                                                                      // 4613\n                                                                                                                       // 4614\n        isDisplayed: function () {                                                                                     // 4615\n            return this.getToolbarElement().classList.contains('medium-editor-toolbar-active');                        // 4616\n        },                                                                                                             // 4617\n                                                                                                                       // 4618\n        showToolbar: function () {                                                                                     // 4619\n            clearTimeout(this.hideTimeout);                                                                            // 4620\n            if (!this.isDisplayed()) {                                                                                 // 4621\n                this.getToolbarElement().classList.add('medium-editor-toolbar-active');                                // 4622\n                this.trigger('showToolbar', {}, this.base.getFocusedElement());                                        // 4623\n            }                                                                                                          // 4624\n        },                                                                                                             // 4625\n                                                                                                                       // 4626\n        hideToolbar: function () {                                                                                     // 4627\n            if (this.isDisplayed()) {                                                                                  // 4628\n                this.getToolbarElement().classList.remove('medium-editor-toolbar-active');                             // 4629\n                this.trigger('hideToolbar', {}, this.base.getFocusedElement());                                        // 4630\n            }                                                                                                          // 4631\n        },                                                                                                             // 4632\n                                                                                                                       // 4633\n        isToolbarDefaultActionsDisplayed: function () {                                                                // 4634\n            return this.getToolbarActionsElement().style.display === 'block';                                          // 4635\n        },                                                                                                             // 4636\n                                                                                                                       // 4637\n        hideToolbarDefaultActions: function () {                                                                       // 4638\n            if (this.isToolbarDefaultActionsDisplayed()) {                                                             // 4639\n                this.getToolbarActionsElement().style.display = 'none';                                                // 4640\n            }                                                                                                          // 4641\n        },                                                                                                             // 4642\n                                                                                                                       // 4643\n        showToolbarDefaultActions: function () {                                                                       // 4644\n            this.hideExtensionForms();                                                                                 // 4645\n                                                                                                                       // 4646\n            if (!this.isToolbarDefaultActionsDisplayed()) {                                                            // 4647\n                this.getToolbarActionsElement().style.display = 'block';                                               // 4648\n            }                                                                                                          // 4649\n                                                                                                                       // 4650\n            // Using setTimeout + options.delay because:                                                               // 4651\n            // We will actually be displaying the toolbar, which should be controlled by options.delay                 // 4652\n            this.delayShowTimeout = this.base.delay(function () {                                                      // 4653\n                this.showToolbar();                                                                                    // 4654\n            }.bind(this));                                                                                             // 4655\n        },                                                                                                             // 4656\n                                                                                                                       // 4657\n        hideExtensionForms: function () {                                                                              // 4658\n            // Hide all extension forms                                                                                // 4659\n            this.forEachExtension(function (extension) {                                                               // 4660\n                if (extension.hasForm && extension.isDisplayed()) {                                                    // 4661\n                    extension.hideForm();                                                                              // 4662\n                }                                                                                                      // 4663\n            });                                                                                                        // 4664\n        },                                                                                                             // 4665\n                                                                                                                       // 4666\n        // Responding to changes in user selection                                                                     // 4667\n                                                                                                                       // 4668\n        // Checks for existance of multiple block elements in the current selection                                    // 4669\n        multipleBlockElementsSelected: function () {                                                                   // 4670\n            var regexEmptyHTMLTags = /<[^\\/>][^>]*><\\/[^>]+>/gim, // http://stackoverflow.com/questions/3129738/remove-empty-tags-using-regex\n                regexBlockElements = new RegExp('<(' + Util.blockContainerElementNames.join('|') + ')[^>]*>', 'g'),    // 4672\n                selectionHTML = Selection.getSelectionHtml(this.document).replace(regexEmptyHTMLTags, ''), // Filter out empty blocks from selection\n                hasMultiParagraphs = selectionHTML.match(regexBlockElements); // Find how many block elements are within the html\n                                                                                                                       // 4675\n            return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;                                              // 4676\n        },                                                                                                             // 4677\n                                                                                                                       // 4678\n        modifySelection: function () {                                                                                 // 4679\n            var selection = this.window.getSelection(),                                                                // 4680\n                selectionRange = selection.getRangeAt(0);                                                              // 4681\n                                                                                                                       // 4682\n            /*                                                                                                         // 4683\n            * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start                    // 4684\n            * will be at the very end of an element.  In other browsers, the selectionRange start                      // 4685\n            * would instead be at the very beginning of an element that actually has content.                          // 4686\n            * example:                                                                                                 // 4687\n            *   <span>foo</span><span>bar</span>                                                                       // 4688\n            *                                                                                                          // 4689\n            * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning         // 4690\n            * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start            // 4691\n            * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any             // 4692\n            * properties on the 'bar' span, they won't be reflected accurately in the toolbar                          // 4693\n            * (ie 'Bold' button wouldn't be active)                                                                    // 4694\n            *                                                                                                          // 4695\n            * So, for cases where the selectionRange start is at the end of an element/node, find the next             // 4696\n            * adjacent text node that actually has content in it, and move the selectionRange start there.             // 4697\n            */                                                                                                         // 4698\n            if (this.standardizeSelectionStart &&                                                                      // 4699\n                    selectionRange.startContainer.nodeValue &&                                                         // 4700\n                    (selectionRange.startOffset === selectionRange.startContainer.nodeValue.length)) {                 // 4701\n                var adjacentNode = Util.findAdjacentTextNodeWithContent(Selection.getSelectionElement(this.window), selectionRange.startContainer, this.document);\n                if (adjacentNode) {                                                                                    // 4703\n                    var offset = 0;                                                                                    // 4704\n                    while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {                             // 4705\n                        offset = offset + 1;                                                                           // 4706\n                    }                                                                                                  // 4707\n                    selectionRange = Selection.select(this.document, adjacentNode, offset,                             // 4708\n                        selectionRange.endContainer, selectionRange.offset);                                           // 4709\n                }                                                                                                      // 4710\n            }                                                                                                          // 4711\n        },                                                                                                             // 4712\n                                                                                                                       // 4713\n        checkState: function () {                                                                                      // 4714\n            if (this.base.preventSelectionUpdates) {                                                                   // 4715\n                return;                                                                                                // 4716\n            }                                                                                                          // 4717\n                                                                                                                       // 4718\n            // If no editable has focus OR selection is inside contenteditable = false                                 // 4719\n            // hide toolbar                                                                                            // 4720\n            if (!this.base.getFocusedElement() ||                                                                      // 4721\n                    Selection.selectionInContentEditableFalse(this.window)) {                                          // 4722\n                return this.hideToolbar();                                                                             // 4723\n            }                                                                                                          // 4724\n                                                                                                                       // 4725\n            // If there's no selection element, selection element doesn't belong to this editor                        // 4726\n            // or toolbar is disabled for this selection element                                                       // 4727\n            // hide toolbar                                                                                            // 4728\n            var selectionElement = Selection.getSelectionElement(this.window);                                         // 4729\n            if (!selectionElement ||                                                                                   // 4730\n                    this.getEditorElements().indexOf(selectionElement) === -1 ||                                       // 4731\n                    selectionElement.getAttribute('data-disable-toolbar')) {                                           // 4732\n                return this.hideToolbar();                                                                             // 4733\n            }                                                                                                          // 4734\n                                                                                                                       // 4735\n            // Now we know there's a focused editable with a selection                                                 // 4736\n                                                                                                                       // 4737\n            // If the updateOnEmptySelection option is true, show the toolbar                                          // 4738\n            if (this.updateOnEmptySelection && this.static) {                                                          // 4739\n                return this.showAndUpdateToolbar();                                                                    // 4740\n            }                                                                                                          // 4741\n                                                                                                                       // 4742\n            // If we don't have a 'valid' selection -> hide toolbar                                                    // 4743\n            if (this.window.getSelection().toString().trim() === '' ||                                                 // 4744\n                (this.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected())) {               // 4745\n                return this.hideToolbar();                                                                             // 4746\n            }                                                                                                          // 4747\n                                                                                                                       // 4748\n            this.showAndUpdateToolbar();                                                                               // 4749\n        },                                                                                                             // 4750\n                                                                                                                       // 4751\n        // Updating the toolbar                                                                                        // 4752\n                                                                                                                       // 4753\n        showAndUpdateToolbar: function () {                                                                            // 4754\n            this.modifySelection();                                                                                    // 4755\n            this.setToolbarButtonStates();                                                                             // 4756\n            this.trigger('positionToolbar', {}, this.base.getFocusedElement());                                        // 4757\n            this.showToolbarDefaultActions();                                                                          // 4758\n            this.setToolbarPosition();                                                                                 // 4759\n        },                                                                                                             // 4760\n                                                                                                                       // 4761\n        setToolbarButtonStates: function () {                                                                          // 4762\n            this.forEachExtension(function (extension) {                                                               // 4763\n                if (typeof extension.isActive === 'function' &&                                                        // 4764\n                    typeof extension.setInactive === 'function') {                                                     // 4765\n                    extension.setInactive();                                                                           // 4766\n                }                                                                                                      // 4767\n            });                                                                                                        // 4768\n                                                                                                                       // 4769\n            this.checkActiveButtons();                                                                                 // 4770\n        },                                                                                                             // 4771\n                                                                                                                       // 4772\n        checkActiveButtons: function () {                                                                              // 4773\n            var manualStateChecks = [],                                                                                // 4774\n                queryState = null,                                                                                     // 4775\n                selectionRange = Selection.getSelectionRange(this.document),                                           // 4776\n                parentNode,                                                                                            // 4777\n                updateExtensionState = function (extension) {                                                          // 4778\n                    if (typeof extension.checkState === 'function') {                                                  // 4779\n                        extension.checkState(parentNode);                                                              // 4780\n                    } else if (typeof extension.isActive === 'function' &&                                             // 4781\n                               typeof extension.isAlreadyApplied === 'function' &&                                     // 4782\n                               typeof extension.setActive === 'function') {                                            // 4783\n                        if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {                         // 4784\n                            extension.setActive();                                                                     // 4785\n                        }                                                                                              // 4786\n                    }                                                                                                  // 4787\n                };                                                                                                     // 4788\n                                                                                                                       // 4789\n            if (!selectionRange) {                                                                                     // 4790\n                return;                                                                                                // 4791\n            }                                                                                                          // 4792\n                                                                                                                       // 4793\n            // Loop through all extensions                                                                             // 4794\n            this.forEachExtension(function (extension) {                                                               // 4795\n                // For those extensions where we can use document.queryCommandState(), do so                           // 4796\n                if (typeof extension.queryCommandState === 'function') {                                               // 4797\n                    queryState = extension.queryCommandState();                                                        // 4798\n                    // If queryCommandState returns a valid value, we can trust the browser                            // 4799\n                    // and don't need to do our manual checks                                                          // 4800\n                    if (queryState !== null) {                                                                         // 4801\n                        if (queryState && typeof extension.setActive === 'function') {                                 // 4802\n                            extension.setActive();                                                                     // 4803\n                        }                                                                                              // 4804\n                        return;                                                                                        // 4805\n                    }                                                                                                  // 4806\n                }                                                                                                      // 4807\n                // We can't use queryCommandState for this extension, so add to manualStateChecks                      // 4808\n                manualStateChecks.push(extension);                                                                     // 4809\n            });                                                                                                        // 4810\n                                                                                                                       // 4811\n            parentNode = Selection.getSelectedParentElement(selectionRange);                                           // 4812\n                                                                                                                       // 4813\n            // Make sure the selection parent isn't outside of the contenteditable                                     // 4814\n            if (!this.getEditorElements().some(function (element) {                                                    // 4815\n                    return Util.isDescendant(element, parentNode, true);                                               // 4816\n                })) {                                                                                                  // 4817\n                return;                                                                                                // 4818\n            }                                                                                                          // 4819\n                                                                                                                       // 4820\n            // Climb up the DOM and do manual checks for whether a certain extension is currently enabled for this node\n            while (parentNode) {                                                                                       // 4822\n                manualStateChecks.forEach(updateExtensionState);                                                       // 4823\n                                                                                                                       // 4824\n                // we can abort the search upwards if we leave the contentEditable element                             // 4825\n                if (Util.isMediumEditorElement(parentNode)) {                                                          // 4826\n                    break;                                                                                             // 4827\n                }                                                                                                      // 4828\n                parentNode = parentNode.parentNode;                                                                    // 4829\n            }                                                                                                          // 4830\n        },                                                                                                             // 4831\n                                                                                                                       // 4832\n        // Positioning toolbar                                                                                         // 4833\n                                                                                                                       // 4834\n        positionToolbarIfShown: function () {                                                                          // 4835\n            if (this.isDisplayed()) {                                                                                  // 4836\n                this.setToolbarPosition();                                                                             // 4837\n            }                                                                                                          // 4838\n        },                                                                                                             // 4839\n                                                                                                                       // 4840\n        setToolbarPosition: function () {                                                                              // 4841\n            var container = this.base.getFocusedElement(),                                                             // 4842\n                selection = this.window.getSelection(),                                                                // 4843\n                anchorPreview;                                                                                         // 4844\n                                                                                                                       // 4845\n            // If there isn't a valid selection, bail                                                                  // 4846\n            if (!container) {                                                                                          // 4847\n                return this;                                                                                           // 4848\n            }                                                                                                          // 4849\n                                                                                                                       // 4850\n            if (this.static) {                                                                                         // 4851\n                this.showToolbar();                                                                                    // 4852\n                this.positionStaticToolbar(container);                                                                 // 4853\n            } else if (!selection.isCollapsed) {                                                                       // 4854\n                this.showToolbar();                                                                                    // 4855\n                this.positionToolbar(selection);                                                                       // 4856\n            }                                                                                                          // 4857\n                                                                                                                       // 4858\n            anchorPreview = this.base.getExtensionByName('anchor-preview');                                            // 4859\n                                                                                                                       // 4860\n            if (anchorPreview && typeof anchorPreview.hidePreview === 'function') {                                    // 4861\n                anchorPreview.hidePreview();                                                                           // 4862\n            }                                                                                                          // 4863\n        },                                                                                                             // 4864\n                                                                                                                       // 4865\n        positionStaticToolbar: function (container) {                                                                  // 4866\n            // position the toolbar at left 0, so we can get the real width of the toolbar                             // 4867\n            this.getToolbarElement().style.left = '0';                                                                 // 4868\n                                                                                                                       // 4869\n            // document.documentElement for IE 9                                                                       // 4870\n            var scrollTop = (this.document.documentElement && this.document.documentElement.scrollTop) || this.document.body.scrollTop,\n                windowWidth = this.window.innerWidth,                                                                  // 4872\n                toolbarElement = this.getToolbarElement(),                                                             // 4873\n                containerRect = container.getBoundingClientRect(),                                                     // 4874\n                containerTop = containerRect.top + scrollTop,                                                          // 4875\n                containerCenter = (containerRect.left + (containerRect.width / 2)),                                    // 4876\n                toolbarHeight = toolbarElement.offsetHeight,                                                           // 4877\n                toolbarWidth = toolbarElement.offsetWidth,                                                             // 4878\n                halfOffsetWidth = toolbarWidth / 2,                                                                    // 4879\n                targetLeft;                                                                                            // 4880\n                                                                                                                       // 4881\n            if (this.sticky) {                                                                                         // 4882\n                // If it's beyond the height of the editor, position it at the bottom of the editor                    // 4883\n                if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight)) {                             // 4884\n                    toolbarElement.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';         // 4885\n                    toolbarElement.classList.remove('medium-editor-sticky-toolbar');                                   // 4886\n                                                                                                                       // 4887\n                // Stick the toolbar to the top of the window                                                          // 4888\n                } else if (scrollTop > (containerTop - toolbarHeight)) {                                               // 4889\n                    toolbarElement.classList.add('medium-editor-sticky-toolbar');                                      // 4890\n                    toolbarElement.style.top = '0px';                                                                  // 4891\n                                                                                                                       // 4892\n                // Normal static toolbar position                                                                      // 4893\n                } else {                                                                                               // 4894\n                    toolbarElement.classList.remove('medium-editor-sticky-toolbar');                                   // 4895\n                    toolbarElement.style.top = containerTop - toolbarHeight + 'px';                                    // 4896\n                }                                                                                                      // 4897\n            } else {                                                                                                   // 4898\n                toolbarElement.style.top = containerTop - toolbarHeight + 'px';                                        // 4899\n            }                                                                                                          // 4900\n                                                                                                                       // 4901\n            switch (this.align) {                                                                                      // 4902\n                case 'left':                                                                                           // 4903\n                    targetLeft = containerRect.left;                                                                   // 4904\n                    break;                                                                                             // 4905\n                                                                                                                       // 4906\n                case 'right':                                                                                          // 4907\n                    targetLeft = containerRect.right - toolbarWidth;                                                   // 4908\n                    break;                                                                                             // 4909\n                                                                                                                       // 4910\n                case 'center':                                                                                         // 4911\n                    targetLeft = containerCenter - halfOffsetWidth;                                                    // 4912\n                    break;                                                                                             // 4913\n            }                                                                                                          // 4914\n                                                                                                                       // 4915\n            if (targetLeft < 0) {                                                                                      // 4916\n                targetLeft = 0;                                                                                        // 4917\n            } else if ((targetLeft + toolbarWidth) > windowWidth) {                                                    // 4918\n                targetLeft = (windowWidth - Math.ceil(toolbarWidth) - 1);                                              // 4919\n            }                                                                                                          // 4920\n                                                                                                                       // 4921\n            toolbarElement.style.left = targetLeft + 'px';                                                             // 4922\n        },                                                                                                             // 4923\n                                                                                                                       // 4924\n        positionToolbar: function (selection) {                                                                        // 4925\n            // position the toolbar at left 0, so we can get the real width of the toolbar                             // 4926\n            this.getToolbarElement().style.left = '0';                                                                 // 4927\n                                                                                                                       // 4928\n            var windowWidth = this.window.innerWidth,                                                                  // 4929\n                range = selection.getRangeAt(0),                                                                       // 4930\n                boundary = range.getBoundingClientRect(),                                                              // 4931\n                middleBoundary = (boundary.left + boundary.right) / 2,                                                 // 4932\n                toolbarElement = this.getToolbarElement(),                                                             // 4933\n                toolbarHeight = toolbarElement.offsetHeight,                                                           // 4934\n                toolbarWidth = toolbarElement.offsetWidth,                                                             // 4935\n                halfOffsetWidth = toolbarWidth / 2,                                                                    // 4936\n                buttonHeight = 50,                                                                                     // 4937\n                defaultLeft = this.diffLeft - halfOffsetWidth;                                                         // 4938\n                                                                                                                       // 4939\n            if (boundary.top < buttonHeight) {                                                                         // 4940\n                toolbarElement.classList.add('medium-toolbar-arrow-over');                                             // 4941\n                toolbarElement.classList.remove('medium-toolbar-arrow-under');                                         // 4942\n                toolbarElement.style.top = buttonHeight + boundary.bottom - this.diffTop + this.window.pageYOffset - toolbarHeight + 'px';\n            } else {                                                                                                   // 4944\n                toolbarElement.classList.add('medium-toolbar-arrow-under');                                            // 4945\n                toolbarElement.classList.remove('medium-toolbar-arrow-over');                                          // 4946\n                toolbarElement.style.top = boundary.top + this.diffTop + this.window.pageYOffset - toolbarHeight + 'px';\n            }                                                                                                          // 4948\n                                                                                                                       // 4949\n            if (middleBoundary < halfOffsetWidth) {                                                                    // 4950\n                toolbarElement.style.left = defaultLeft + halfOffsetWidth + 'px';                                      // 4951\n            } else if ((windowWidth - middleBoundary) < halfOffsetWidth) {                                             // 4952\n                toolbarElement.style.left = windowWidth + defaultLeft - halfOffsetWidth + 'px';                        // 4953\n            } else {                                                                                                   // 4954\n                toolbarElement.style.left = defaultLeft + middleBoundary + 'px';                                       // 4955\n            }                                                                                                          // 4956\n        }                                                                                                              // 4957\n    });                                                                                                                // 4958\n}());                                                                                                                  // 4959\n                                                                                                                       // 4960\nvar extensionDefaults;                                                                                                 // 4961\n(function () {                                                                                                         // 4962\n    // for now this is empty because nothing interally uses an Extension default.                                      // 4963\n    // as they are converted, provide them here.                                                                       // 4964\n    extensionDefaults = {                                                                                              // 4965\n        button: Button,                                                                                                // 4966\n        form: FormExtension,                                                                                           // 4967\n                                                                                                                       // 4968\n        anchor: AnchorForm,                                                                                            // 4969\n        anchorPreview: AnchorPreview,                                                                                  // 4970\n        autoLink: AutoLink,                                                                                            // 4971\n        fontSize: FontSizeForm,                                                                                        // 4972\n        imageDragging: ImageDragging,                                                                                  // 4973\n        keyboardCommands: KeyboardCommands,                                                                            // 4974\n        paste: PasteHandler,                                                                                           // 4975\n        placeholder: Placeholder,                                                                                      // 4976\n        toolbar: Toolbar                                                                                               // 4977\n    };                                                                                                                 // 4978\n})();                                                                                                                  // 4979\n                                                                                                                       // 4980\nfunction MediumEditor(elements, options) {                                                                             // 4981\n    'use strict';                                                                                                      // 4982\n    return this.init(elements, options);                                                                               // 4983\n}                                                                                                                      // 4984\n                                                                                                                       // 4985\n(function () {                                                                                                         // 4986\n    'use strict';                                                                                                      // 4987\n                                                                                                                       // 4988\n    // Event handlers that shouldn't be exposed externally                                                             // 4989\n                                                                                                                       // 4990\n    function handleDisabledEnterKeydown(event, element) {                                                              // 4991\n        if (this.options.disableReturn || element.getAttribute('data-disable-return')) {                               // 4992\n            event.preventDefault();                                                                                    // 4993\n        } else if (this.options.disableDoubleReturn || element.getAttribute('data-disable-double-return')) {           // 4994\n            var node = Selection.getSelectionStart(this.options.ownerDocument);                                        // 4995\n                                                                                                                       // 4996\n            // if current text selection is empty OR previous sibling text is empty                                    // 4997\n            if ((node && node.textContent.trim() === '') ||                                                            // 4998\n                (node.previousElementSibling && node.previousElementSibling.textContent.trim() === '')) {              // 4999\n                event.preventDefault();                                                                                // 5000\n            }                                                                                                          // 5001\n        }                                                                                                              // 5002\n    }                                                                                                                  // 5003\n                                                                                                                       // 5004\n    function handleTabKeydown(event) {                                                                                 // 5005\n        // Override tab only for pre nodes                                                                             // 5006\n        var node = Selection.getSelectionStart(this.options.ownerDocument),                                            // 5007\n            tag = node && node.nodeName.toLowerCase();                                                                 // 5008\n                                                                                                                       // 5009\n        if (tag === 'pre') {                                                                                           // 5010\n            event.preventDefault();                                                                                    // 5011\n            Util.insertHTMLCommand(this.options.ownerDocument, '    ');                                                // 5012\n        }                                                                                                              // 5013\n                                                                                                                       // 5014\n        // Tab to indent list structures!                                                                              // 5015\n        if (Util.isListItem(node)) {                                                                                   // 5016\n            event.preventDefault();                                                                                    // 5017\n                                                                                                                       // 5018\n            // If Shift is down, outdent, otherwise indent                                                             // 5019\n            if (event.shiftKey) {                                                                                      // 5020\n                this.options.ownerDocument.execCommand('outdent', false, null);                                        // 5021\n            } else {                                                                                                   // 5022\n                this.options.ownerDocument.execCommand('indent', false, null);                                         // 5023\n            }                                                                                                          // 5024\n        }                                                                                                              // 5025\n    }                                                                                                                  // 5026\n                                                                                                                       // 5027\n    function handleBlockDeleteKeydowns(event) {                                                                        // 5028\n        var p, node = Selection.getSelectionStart(this.options.ownerDocument),                                         // 5029\n            tagName = node.nodeName.toLowerCase(),                                                                     // 5030\n            isEmpty = /^(\\s+|<br\\/?>)?$/i,                                                                             // 5031\n            isHeader = /h\\d/i;                                                                                         // 5032\n                                                                                                                       // 5033\n        if (Util.isKey(event, [Util.keyCode.BACKSPACE, Util.keyCode.ENTER]) &&                                         // 5034\n                // has a preceeding sibling                                                                            // 5035\n                node.previousElementSibling &&                                                                         // 5036\n                // in a header                                                                                         // 5037\n                isHeader.test(tagName) &&                                                                              // 5038\n                // at the very end of the block                                                                        // 5039\n                Selection.getCaretOffsets(node).left === 0) {                                                          // 5040\n            if (Util.isKey(event, Util.keyCode.BACKSPACE) && isEmpty.test(node.previousElementSibling.innerHTML)) {    // 5041\n                // backspacing the begining of a header into an empty previous element will                            // 5042\n                // change the tagName of the current node to prevent one                                               // 5043\n                // instead delete previous node and cancel the event.                                                  // 5044\n                node.previousElementSibling.parentNode.removeChild(node.previousElementSibling);                       // 5045\n                event.preventDefault();                                                                                // 5046\n            } else if (Util.isKey(event, Util.keyCode.ENTER)) {                                                        // 5047\n                // hitting return in the begining of a header will create empty header elements before the current one // 5048\n                // instead, make \"<p><br></p>\" element, which are what happens if you hit return in an empty paragraph // 5049\n                p = this.options.ownerDocument.createElement('p');                                                     // 5050\n                p.innerHTML = '<br>';                                                                                  // 5051\n                node.previousElementSibling.parentNode.insertBefore(p, node);                                          // 5052\n                event.preventDefault();                                                                                // 5053\n            }                                                                                                          // 5054\n        } else if (Util.isKey(event, Util.keyCode.DELETE) &&                                                           // 5055\n                    // between two sibling elements                                                                    // 5056\n                    node.nextElementSibling &&                                                                         // 5057\n                    node.previousElementSibling &&                                                                     // 5058\n                    // not in a header                                                                                 // 5059\n                    !isHeader.test(tagName) &&                                                                         // 5060\n                    // in an empty tag                                                                                 // 5061\n                    isEmpty.test(node.innerHTML) &&                                                                    // 5062\n                    // when the next tag *is* a header                                                                 // 5063\n                    isHeader.test(node.nextElementSibling.nodeName.toLowerCase())) {                                   // 5064\n            // hitting delete in an empty element preceding a header, ex:                                              // 5065\n            //  <p>[CURSOR]</p><h1>Header</h1>                                                                         // 5066\n            // Will cause the h1 to become a paragraph.                                                                // 5067\n            // Instead, delete the paragraph node and move the cursor to the begining of the h1                        // 5068\n                                                                                                                       // 5069\n            // remove node and move cursor to start of header                                                          // 5070\n            Selection.moveCursor(this.options.ownerDocument, node.nextElementSibling);                                 // 5071\n                                                                                                                       // 5072\n            node.previousElementSibling.parentNode.removeChild(node);                                                  // 5073\n                                                                                                                       // 5074\n            event.preventDefault();                                                                                    // 5075\n        } else if (Util.isKey(event, Util.keyCode.BACKSPACE) &&                                                        // 5076\n                tagName === 'li' &&                                                                                    // 5077\n                // hitting backspace inside an empty li                                                                // 5078\n                isEmpty.test(node.innerHTML) &&                                                                        // 5079\n                // is first element (no preceeding siblings)                                                           // 5080\n                !node.previousElementSibling &&                                                                        // 5081\n                // parent also does not have a sibling                                                                 // 5082\n                !node.parentElement.previousElementSibling &&                                                          // 5083\n                // is not the only li in a list                                                                        // 5084\n                node.nextElementSibling &&                                                                             // 5085\n                node.nextElementSibling.nodeName.toLowerCase() === 'li') {                                             // 5086\n            // backspacing in an empty first list element in the first list (with more elements) ex:                   // 5087\n            //  <ul><li>[CURSOR]</li><li>List Item 2</li></ul>                                                         // 5088\n            // will remove the first <li> but add some extra element before (varies based on browser)                  // 5089\n            // Instead, this will:                                                                                     // 5090\n            // 1) remove the list element                                                                              // 5091\n            // 2) create a paragraph before the list                                                                   // 5092\n            // 3) move the cursor into the paragraph                                                                   // 5093\n                                                                                                                       // 5094\n            // create a paragraph before the list                                                                      // 5095\n            p = this.options.ownerDocument.createElement('p');                                                         // 5096\n            p.innerHTML = '<br>';                                                                                      // 5097\n            node.parentElement.parentElement.insertBefore(p, node.parentElement);                                      // 5098\n                                                                                                                       // 5099\n            // move the cursor into the new paragraph                                                                  // 5100\n            Selection.moveCursor(this.options.ownerDocument, p);                                                       // 5101\n                                                                                                                       // 5102\n            // remove the list element                                                                                 // 5103\n            node.parentElement.removeChild(node);                                                                      // 5104\n                                                                                                                       // 5105\n            event.preventDefault();                                                                                    // 5106\n        }                                                                                                              // 5107\n    }                                                                                                                  // 5108\n                                                                                                                       // 5109\n    function handleKeyup(event) {                                                                                      // 5110\n        var node = Selection.getSelectionStart(this.options.ownerDocument),                                            // 5111\n            tagName;                                                                                                   // 5112\n                                                                                                                       // 5113\n        if (!node) {                                                                                                   // 5114\n            return;                                                                                                    // 5115\n        }                                                                                                              // 5116\n                                                                                                                       // 5117\n        if (Util.isMediumEditorElement(node) && node.children.length === 0) {                                          // 5118\n            this.options.ownerDocument.execCommand('formatBlock', false, 'p');                                         // 5119\n        }                                                                                                              // 5120\n                                                                                                                       // 5121\n        if (Util.isKey(event, Util.keyCode.ENTER) && !Util.isListItem(node)) {                                         // 5122\n            tagName = node.nodeName.toLowerCase();                                                                     // 5123\n            // For anchor tags, unlink                                                                                 // 5124\n            if (tagName === 'a') {                                                                                     // 5125\n                this.options.ownerDocument.execCommand('unlink', false, null);                                         // 5126\n            } else if (!event.shiftKey && !event.ctrlKey) {                                                            // 5127\n                // only format block if this is not a header tag                                                       // 5128\n                if (!/h\\d/.test(tagName)) {                                                                            // 5129\n                    this.options.ownerDocument.execCommand('formatBlock', false, 'p');                                 // 5130\n                }                                                                                                      // 5131\n            }                                                                                                          // 5132\n        }                                                                                                              // 5133\n    }                                                                                                                  // 5134\n                                                                                                                       // 5135\n    // Internal helper methods which shouldn't be exposed externally                                                   // 5136\n                                                                                                                       // 5137\n    function addToEditors(win) {                                                                                       // 5138\n        if (!win._mediumEditors) {                                                                                     // 5139\n            // To avoid breaking users who are assuming that the unique id on                                          // 5140\n            // medium-editor elements will start at 1, inserting a 'null' in the                                       // 5141\n            // array so the unique-id can always map to the index of the editor instance                               // 5142\n            win._mediumEditors = [null];                                                                               // 5143\n        }                                                                                                              // 5144\n                                                                                                                       // 5145\n        // If this already has a unique id, re-use it                                                                  // 5146\n        if (!this.id) {                                                                                                // 5147\n            this.id = win._mediumEditors.length;                                                                       // 5148\n        }                                                                                                              // 5149\n                                                                                                                       // 5150\n        win._mediumEditors[this.id] = this;                                                                            // 5151\n    }                                                                                                                  // 5152\n                                                                                                                       // 5153\n    function removeFromEditors(win) {                                                                                  // 5154\n        if (!win._mediumEditors || !win._mediumEditors[this.id]) {                                                     // 5155\n            return;                                                                                                    // 5156\n        }                                                                                                              // 5157\n                                                                                                                       // 5158\n        /* Setting the instance to null in the array instead of deleting it allows:                                    // 5159\n         * 1) Each instance to preserve its own unique-id, even after being destroyed                                  // 5160\n         *    and initialized again                                                                                    // 5161\n         * 2) The unique-id to always correspond to an index in the array of medium-editor                             // 5162\n         *    instances. Thus, we will be able to look at a contenteditable, and determine                             // 5163\n         *    which instance it belongs to, by indexing into the global array.                                         // 5164\n         */                                                                                                            // 5165\n        win._mediumEditors[this.id] = null;                                                                            // 5166\n    }                                                                                                                  // 5167\n                                                                                                                       // 5168\n    function createElementsArray(selector) {                                                                           // 5169\n        if (!selector) {                                                                                               // 5170\n            selector = [];                                                                                             // 5171\n        }                                                                                                              // 5172\n        // If string, use as query selector                                                                            // 5173\n        if (typeof selector === 'string') {                                                                            // 5174\n            selector = this.options.ownerDocument.querySelectorAll(selector);                                          // 5175\n        }                                                                                                              // 5176\n        // If element, put into array                                                                                  // 5177\n        if (Util.isElement(selector)) {                                                                                // 5178\n            selector = [selector];                                                                                     // 5179\n        }                                                                                                              // 5180\n        // Convert NodeList (or other array like object) into an array                                                 // 5181\n        var elements = Array.prototype.slice.apply(selector);                                                          // 5182\n                                                                                                                       // 5183\n        // Loop through elements and convert textarea's into divs                                                      // 5184\n        this.elements = [];                                                                                            // 5185\n        elements.forEach(function (element, index) {                                                                   // 5186\n            if (element.nodeName.toLowerCase() === 'textarea') {                                                       // 5187\n                this.elements.push(createContentEditable.call(this, element, index));                                  // 5188\n            } else {                                                                                                   // 5189\n                this.elements.push(element);                                                                           // 5190\n            }                                                                                                          // 5191\n        }, this);                                                                                                      // 5192\n    }                                                                                                                  // 5193\n                                                                                                                       // 5194\n    function setExtensionDefaults(extension, defaults) {                                                               // 5195\n        Object.keys(defaults).forEach(function (prop) {                                                                // 5196\n            if (extension[prop] === undefined) {                                                                       // 5197\n                extension[prop] = defaults[prop];                                                                      // 5198\n            }                                                                                                          // 5199\n        });                                                                                                            // 5200\n        return extension;                                                                                              // 5201\n    }                                                                                                                  // 5202\n                                                                                                                       // 5203\n    function initExtension(extension, name, instance) {                                                                // 5204\n        var extensionDefaults = {                                                                                      // 5205\n            'window': instance.options.contentWindow,                                                                  // 5206\n            'document': instance.options.ownerDocument,                                                                // 5207\n            'base': instance                                                                                           // 5208\n        };                                                                                                             // 5209\n                                                                                                                       // 5210\n        // Add default options into the extension                                                                      // 5211\n        extension = setExtensionDefaults(extension, extensionDefaults);                                                // 5212\n                                                                                                                       // 5213\n        // Call init on the extension                                                                                  // 5214\n        if (typeof extension.init === 'function') {                                                                    // 5215\n            extension.init();                                                                                          // 5216\n        }                                                                                                              // 5217\n                                                                                                                       // 5218\n        // Set extension name (if not already set)                                                                     // 5219\n        if (!extension.name) {                                                                                         // 5220\n            extension.name = name;                                                                                     // 5221\n        }                                                                                                              // 5222\n        return extension;                                                                                              // 5223\n    }                                                                                                                  // 5224\n                                                                                                                       // 5225\n    function isToolbarEnabled() {                                                                                      // 5226\n        // If any of the elements don't have the toolbar disabled                                                      // 5227\n        // We need a toolbar                                                                                           // 5228\n        if (this.elements.every(function (element) {                                                                   // 5229\n                return !!element.getAttribute('data-disable-toolbar');                                                 // 5230\n            })) {                                                                                                      // 5231\n            return false;                                                                                              // 5232\n        }                                                                                                              // 5233\n                                                                                                                       // 5234\n        return this.options.toolbar !== false;                                                                         // 5235\n    }                                                                                                                  // 5236\n                                                                                                                       // 5237\n    function isAnchorPreviewEnabled() {                                                                                // 5238\n        // If toolbar is disabled, don't add                                                                           // 5239\n        if (!isToolbarEnabled.call(this)) {                                                                            // 5240\n            return false;                                                                                              // 5241\n        }                                                                                                              // 5242\n                                                                                                                       // 5243\n        return this.options.anchorPreview !== false;                                                                   // 5244\n    }                                                                                                                  // 5245\n                                                                                                                       // 5246\n    function isPlaceholderEnabled() {                                                                                  // 5247\n        return this.options.placeholder !== false;                                                                     // 5248\n    }                                                                                                                  // 5249\n                                                                                                                       // 5250\n    function isAutoLinkEnabled() {                                                                                     // 5251\n        return this.options.autoLink !== false;                                                                        // 5252\n    }                                                                                                                  // 5253\n                                                                                                                       // 5254\n    function isImageDraggingEnabled() {                                                                                // 5255\n        return this.options.imageDragging !== false;                                                                   // 5256\n    }                                                                                                                  // 5257\n                                                                                                                       // 5258\n    function isKeyboardCommandsEnabled() {                                                                             // 5259\n        return this.options.keyboardCommands !== false;                                                                // 5260\n    }                                                                                                                  // 5261\n                                                                                                                       // 5262\n    function createContentEditable(textarea, id) {                                                                     // 5263\n        var div = this.options.ownerDocument.createElement('div'),                                                     // 5264\n            uniqueId = 'medium-editor-' + Date.now() + '-' + id,                                                       // 5265\n            attributesToClone = [                                                                                      // 5266\n                'data-disable-editing',                                                                                // 5267\n                'data-disable-toolbar',                                                                                // 5268\n                'data-placeholder',                                                                                    // 5269\n                'data-disable-return',                                                                                 // 5270\n                'data-disable-double-return',                                                                          // 5271\n                'data-disable-preview',                                                                                // 5272\n                'spellcheck'                                                                                           // 5273\n            ];                                                                                                         // 5274\n                                                                                                                       // 5275\n        div.className = textarea.className;                                                                            // 5276\n        div.id = uniqueId;                                                                                             // 5277\n        div.innerHTML = textarea.value;                                                                                // 5278\n        div.setAttribute('medium-editor-textarea-id', id);                                                             // 5279\n        attributesToClone.forEach(function (attr) {                                                                    // 5280\n            if (textarea.hasAttribute(attr)) {                                                                         // 5281\n                div.setAttribute(attr, textarea.getAttribute(attr));                                                   // 5282\n            }                                                                                                          // 5283\n        });                                                                                                            // 5284\n                                                                                                                       // 5285\n        textarea.classList.add('medium-editor-hidden');                                                                // 5286\n        textarea.setAttribute('medium-editor-textarea-id', id);                                                        // 5287\n        textarea.parentNode.insertBefore(                                                                              // 5288\n            div,                                                                                                       // 5289\n            textarea                                                                                                   // 5290\n        );                                                                                                             // 5291\n                                                                                                                       // 5292\n        return div;                                                                                                    // 5293\n    }                                                                                                                  // 5294\n                                                                                                                       // 5295\n    function initElements() {                                                                                          // 5296\n        this.elements.forEach(function (element, index) {                                                              // 5297\n            if (!this.options.disableEditing && !element.getAttribute('data-disable-editing')) {                       // 5298\n                element.setAttribute('contentEditable', true);                                                         // 5299\n                element.setAttribute('spellcheck', this.options.spellcheck);                                           // 5300\n            }                                                                                                          // 5301\n            element.setAttribute('data-medium-editor-element', true);                                                  // 5302\n            element.setAttribute('role', 'textbox');                                                                   // 5303\n            element.setAttribute('aria-multiline', true);                                                              // 5304\n            element.setAttribute('medium-editor-index', index);                                                        // 5305\n                                                                                                                       // 5306\n            if (element.hasAttribute('medium-editor-textarea-id')) {                                                   // 5307\n                this.on(element, 'input', function (event) {                                                           // 5308\n                    var target = event.target,                                                                         // 5309\n                        textarea = target.parentNode.querySelector('textarea[medium-editor-textarea-id=\"' + target.getAttribute('medium-editor-textarea-id') + '\"]');\n                    if (textarea) {                                                                                    // 5311\n                        textarea.value = this.serialize()[target.id].value;                                            // 5312\n                    }                                                                                                  // 5313\n                }.bind(this));                                                                                         // 5314\n            }                                                                                                          // 5315\n        }, this);                                                                                                      // 5316\n    }                                                                                                                  // 5317\n                                                                                                                       // 5318\n    function attachHandlers() {                                                                                        // 5319\n        var i;                                                                                                         // 5320\n                                                                                                                       // 5321\n        // attach to tabs                                                                                              // 5322\n        this.subscribe('editableKeydownTab', handleTabKeydown.bind(this));                                             // 5323\n                                                                                                                       // 5324\n        // Bind keys which can create or destroy a block element: backspace, delete, return                            // 5325\n        this.subscribe('editableKeydownDelete', handleBlockDeleteKeydowns.bind(this));                                 // 5326\n        this.subscribe('editableKeydownEnter', handleBlockDeleteKeydowns.bind(this));                                  // 5327\n                                                                                                                       // 5328\n        // disabling return or double return                                                                           // 5329\n        if (this.options.disableReturn || this.options.disableDoubleReturn) {                                          // 5330\n            this.subscribe('editableKeydownEnter', handleDisabledEnterKeydown.bind(this));                             // 5331\n        } else {                                                                                                       // 5332\n            for (i = 0; i < this.elements.length; i += 1) {                                                            // 5333\n                if (this.elements[i].getAttribute('data-disable-return') || this.elements[i].getAttribute('data-disable-double-return')) {\n                    this.subscribe('editableKeydownEnter', handleDisabledEnterKeydown.bind(this));                     // 5335\n                    break;                                                                                             // 5336\n                }                                                                                                      // 5337\n            }                                                                                                          // 5338\n        }                                                                                                              // 5339\n                                                                                                                       // 5340\n        // if we're not disabling return, add a handler to help handle cleanup                                         // 5341\n        // for certain cases when enter is pressed                                                                     // 5342\n        if (!this.options.disableReturn) {                                                                             // 5343\n            this.elements.forEach(function (element) {                                                                 // 5344\n                if (!element.getAttribute('data-disable-return')) {                                                    // 5345\n                    this.on(element, 'keyup', handleKeyup.bind(this));                                                 // 5346\n                }                                                                                                      // 5347\n            }, this);                                                                                                  // 5348\n        }                                                                                                              // 5349\n    }                                                                                                                  // 5350\n                                                                                                                       // 5351\n    function initExtensions() {                                                                                        // 5352\n                                                                                                                       // 5353\n        this.extensions = [];                                                                                          // 5354\n                                                                                                                       // 5355\n        // Passed in extensions                                                                                        // 5356\n        Object.keys(this.options.extensions).forEach(function (name) {                                                 // 5357\n            // Always save the toolbar extension for last                                                              // 5358\n            if (name !== 'toolbar' && this.options.extensions[name]) {                                                 // 5359\n                this.extensions.push(initExtension(this.options.extensions[name], name, this));                        // 5360\n            }                                                                                                          // 5361\n        }, this);                                                                                                      // 5362\n                                                                                                                       // 5363\n        // Built-in extensions                                                                                         // 5364\n        var builtIns = {                                                                                               // 5365\n            paste: true,                                                                                               // 5366\n            anchorPreview: isAnchorPreviewEnabled.call(this),                                                          // 5367\n            autoLink: isAutoLinkEnabled.call(this),                                                                    // 5368\n            imageDragging: isImageDraggingEnabled.call(this),                                                          // 5369\n            keyboardCommands: isKeyboardCommandsEnabled.call(this),                                                    // 5370\n            placeholder: isPlaceholderEnabled.call(this)                                                               // 5371\n        };                                                                                                             // 5372\n        Object.keys(builtIns).forEach(function (name) {                                                                // 5373\n            if (builtIns[name]) {                                                                                      // 5374\n                this.addBuiltInExtension(name);                                                                        // 5375\n            }                                                                                                          // 5376\n        }, this);                                                                                                      // 5377\n                                                                                                                       // 5378\n        // Users can pass in a custom toolbar extension                                                                // 5379\n        // so check for that first and if it's not present                                                             // 5380\n        // just create the default toolbar                                                                             // 5381\n        var toolbarExtension = this.options.extensions['toolbar'];                                                     // 5382\n        if (!toolbarExtension && isToolbarEnabled.call(this)) {                                                        // 5383\n            // Backwards compatability                                                                                 // 5384\n            var toolbarOptions = Util.extend({}, this.options.toolbar, {                                               // 5385\n                allowMultiParagraphSelection: this.options.allowMultiParagraphSelection // deprecated                  // 5386\n            });                                                                                                        // 5387\n            toolbarExtension = new MediumEditor.extensions.toolbar(toolbarOptions);                                    // 5388\n        }                                                                                                              // 5389\n                                                                                                                       // 5390\n        // If the toolbar is not disabled, so we actually have an extension                                            // 5391\n        // initialize it and add it to the extensions array                                                            // 5392\n        if (toolbarExtension) {                                                                                        // 5393\n            this.extensions.push(initExtension(toolbarExtension, 'toolbar', this));                                    // 5394\n        }                                                                                                              // 5395\n    }                                                                                                                  // 5396\n                                                                                                                       // 5397\n    function mergeOptions(defaults, options) {                                                                         // 5398\n        var deprecatedProperties = [                                                                                   // 5399\n            ['allowMultiParagraphSelection', 'toolbar.allowMultiParagraphSelection']                                   // 5400\n        ];                                                                                                             // 5401\n        // warn about using deprecated properties                                                                      // 5402\n        if (options) {                                                                                                 // 5403\n            deprecatedProperties.forEach(function (pair) {                                                             // 5404\n                if (options.hasOwnProperty(pair[0]) && options[pair[0]] !== undefined) {                               // 5405\n                    Util.deprecated(pair[0], pair[1], 'v6.0.0');                                                       // 5406\n                }                                                                                                      // 5407\n            });                                                                                                        // 5408\n        }                                                                                                              // 5409\n                                                                                                                       // 5410\n        return Util.defaults({}, options, defaults);                                                                   // 5411\n    }                                                                                                                  // 5412\n                                                                                                                       // 5413\n    function execActionInternal(action, opts) {                                                                        // 5414\n        /*jslint regexp: true*/                                                                                        // 5415\n        var appendAction = /^append-(.+)$/gi,                                                                          // 5416\n            justifyAction = /justify([A-Za-z]*)$/g, /* Detecting if is justifyCenter|Right|Left */                     // 5417\n            match;                                                                                                     // 5418\n        /*jslint regexp: false*/                                                                                       // 5419\n                                                                                                                       // 5420\n        // Actions starting with 'append-' should attempt to format a block of text ('formatBlock') using a specific   // 5421\n        // type of block element (ie append-blockquote, append-h1, append-pre, etc.)                                   // 5422\n        match = appendAction.exec(action);                                                                             // 5423\n        if (match) {                                                                                                   // 5424\n            return Util.execFormatBlock(this.options.ownerDocument, match[1]);                                         // 5425\n        }                                                                                                              // 5426\n                                                                                                                       // 5427\n        if (action === 'fontSize') {                                                                                   // 5428\n            return this.options.ownerDocument.execCommand('fontSize', false, opts.size);                               // 5429\n        }                                                                                                              // 5430\n                                                                                                                       // 5431\n        if (action === 'createLink') {                                                                                 // 5432\n            return this.createLink(opts);                                                                              // 5433\n        }                                                                                                              // 5434\n                                                                                                                       // 5435\n        if (action === 'image') {                                                                                      // 5436\n            return this.options.ownerDocument.execCommand('insertImage', false, this.options.contentWindow.getSelection());\n        }                                                                                                              // 5438\n                                                                                                                       // 5439\n        /* Issue: https://github.com/yabwe/medium-editor/issues/595                                                    // 5440\n         * If the action is to justify the text */                                                                     // 5441\n        if (justifyAction.exec(action)) {                                                                              // 5442\n            var result = this.options.ownerDocument.execCommand(action, false, null),                                  // 5443\n                parentNode = Selection.getSelectedParentElement(Selection.getSelectionRange(this.options.ownerDocument));\n            if (parentNode) {                                                                                          // 5445\n                cleanupJustifyDivFragments.call(this, Util.getTopBlockContainer(parentNode));                          // 5446\n            }                                                                                                          // 5447\n                                                                                                                       // 5448\n            return result;                                                                                             // 5449\n        }                                                                                                              // 5450\n                                                                                                                       // 5451\n        return this.options.ownerDocument.execCommand(action, false, null);                                            // 5452\n    }                                                                                                                  // 5453\n                                                                                                                       // 5454\n    /* If we've just justified text within a container block                                                           // 5455\n     * Chrome may have removed <br> elements and instead wrapped lines in <div> elements                               // 5456\n     * with a text-align property.  If so, we want to fix this                                                         // 5457\n     */                                                                                                                // 5458\n    function cleanupJustifyDivFragments(blockContainer) {                                                              // 5459\n        if (!blockContainer) {                                                                                         // 5460\n            return;                                                                                                    // 5461\n        }                                                                                                              // 5462\n                                                                                                                       // 5463\n        var textAlign,                                                                                                 // 5464\n            childDivs = Array.prototype.slice.call(blockContainer.childNodes).filter(function (element) {              // 5465\n                var isDiv = element.nodeName.toLowerCase() === 'div';                                                  // 5466\n                if (isDiv && !textAlign) {                                                                             // 5467\n                    textAlign = element.style.textAlign;                                                               // 5468\n                }                                                                                                      // 5469\n                return isDiv;                                                                                          // 5470\n            });                                                                                                        // 5471\n                                                                                                                       // 5472\n        /* If we found child <div> elements with text-align style attributes                                           // 5473\n         * we should fix this by:                                                                                      // 5474\n         *                                                                                                             // 5475\n         * 1) Unwrapping each <div> which has a text-align style                                                       // 5476\n         * 2) Insert a <br> element after each set of 'unwrapped' div children                                         // 5477\n         * 3) Set the text-align style of the parent block element                                                     // 5478\n         */                                                                                                            // 5479\n        if (childDivs.length) {                                                                                        // 5480\n            // Since we're mucking with the HTML, preserve selection                                                   // 5481\n            this.saveSelection();                                                                                      // 5482\n            childDivs.forEach(function (div) {                                                                         // 5483\n                if (div.style.textAlign === textAlign) {                                                               // 5484\n                    var lastChild = div.lastChild;                                                                     // 5485\n                    if (lastChild) {                                                                                   // 5486\n                        // Instead of a div, extract the child elements and add a <br>                                 // 5487\n                        Util.unwrap(div, this.options.ownerDocument);                                                  // 5488\n                        var br = this.options.ownerDocument.createElement('BR');                                       // 5489\n                        lastChild.parentNode.insertBefore(br, lastChild.nextSibling);                                  // 5490\n                    }                                                                                                  // 5491\n                }                                                                                                      // 5492\n            }, this);                                                                                                  // 5493\n            blockContainer.style.textAlign = textAlign;                                                                // 5494\n            // We're done, so restore selection                                                                        // 5495\n            this.restoreSelection();                                                                                   // 5496\n        }                                                                                                              // 5497\n    }                                                                                                                  // 5498\n                                                                                                                       // 5499\n    MediumEditor.Extension = Extension;                                                                                // 5500\n                                                                                                                       // 5501\n    MediumEditor.extensions = extensionDefaults;                                                                       // 5502\n    MediumEditor.util = Util;                                                                                          // 5503\n    MediumEditor.selection = Selection;                                                                                // 5504\n                                                                                                                       // 5505\n    MediumEditor.prototype = {                                                                                         // 5506\n        defaults: editorDefaults,                                                                                      // 5507\n                                                                                                                       // 5508\n        // NOT DOCUMENTED - exposed for backwards compatability                                                        // 5509\n        init: function (elements, options) {                                                                           // 5510\n            this.options = mergeOptions.call(this, this.defaults, options);                                            // 5511\n            this.origElements = elements;                                                                              // 5512\n                                                                                                                       // 5513\n            if (!this.options.elementsContainer) {                                                                     // 5514\n                this.options.elementsContainer = this.options.ownerDocument.body;                                      // 5515\n            }                                                                                                          // 5516\n                                                                                                                       // 5517\n            return this.setup();                                                                                       // 5518\n        },                                                                                                             // 5519\n                                                                                                                       // 5520\n        setup: function () {                                                                                           // 5521\n            if (this.isActive) {                                                                                       // 5522\n                return;                                                                                                // 5523\n            }                                                                                                          // 5524\n                                                                                                                       // 5525\n            createElementsArray.call(this, this.origElements);                                                         // 5526\n                                                                                                                       // 5527\n            if (this.elements.length === 0) {                                                                          // 5528\n                return;                                                                                                // 5529\n            }                                                                                                          // 5530\n                                                                                                                       // 5531\n            this.isActive = true;                                                                                      // 5532\n            addToEditors.call(this, this.options.contentWindow);                                                       // 5533\n                                                                                                                       // 5534\n            this.events = new Events(this);                                                                            // 5535\n                                                                                                                       // 5536\n            // Call initialization helpers                                                                             // 5537\n            initElements.call(this);                                                                                   // 5538\n            initExtensions.call(this);                                                                                 // 5539\n            attachHandlers.call(this);                                                                                 // 5540\n        },                                                                                                             // 5541\n                                                                                                                       // 5542\n        destroy: function () {                                                                                         // 5543\n            if (!this.isActive) {                                                                                      // 5544\n                return;                                                                                                // 5545\n            }                                                                                                          // 5546\n                                                                                                                       // 5547\n            this.isActive = false;                                                                                     // 5548\n                                                                                                                       // 5549\n            this.extensions.forEach(function (extension) {                                                             // 5550\n                if (typeof extension.destroy === 'function') {                                                         // 5551\n                    extension.destroy();                                                                               // 5552\n                }                                                                                                      // 5553\n            }, this);                                                                                                  // 5554\n                                                                                                                       // 5555\n            this.events.destroy();                                                                                     // 5556\n                                                                                                                       // 5557\n            this.elements.forEach(function (element) {                                                                 // 5558\n                // Reset elements content, fix for issue where after editor destroyed the red underlines on spelling errors are left\n                if (this.options.spellcheck) {                                                                         // 5560\n                    element.innerHTML = element.innerHTML;                                                             // 5561\n                }                                                                                                      // 5562\n                                                                                                                       // 5563\n                // cleanup extra added attributes                                                                      // 5564\n                element.removeAttribute('contentEditable');                                                            // 5565\n                element.removeAttribute('spellcheck');                                                                 // 5566\n                element.removeAttribute('data-medium-editor-element');                                                 // 5567\n                element.removeAttribute('role');                                                                       // 5568\n                element.removeAttribute('aria-multiline');                                                             // 5569\n                element.removeAttribute('medium-editor-index');                                                        // 5570\n                                                                                                                       // 5571\n                // Remove any elements created for textareas                                                           // 5572\n                if (element.hasAttribute('medium-editor-textarea-id')) {                                               // 5573\n                    var textarea = element.parentNode.querySelector('textarea[medium-editor-textarea-id=\"' + element.getAttribute('medium-editor-textarea-id') + '\"]');\n                    if (textarea) {                                                                                    // 5575\n                        // Un-hide the textarea                                                                        // 5576\n                        textarea.classList.remove('medium-editor-hidden');                                             // 5577\n                    }                                                                                                  // 5578\n                    if (element.parentNode) {                                                                          // 5579\n                        element.parentNode.removeChild(element);                                                       // 5580\n                    }                                                                                                  // 5581\n                }                                                                                                      // 5582\n            }, this);                                                                                                  // 5583\n            this.elements = [];                                                                                        // 5584\n                                                                                                                       // 5585\n            removeFromEditors.call(this, this.options.contentWindow);                                                  // 5586\n        },                                                                                                             // 5587\n                                                                                                                       // 5588\n        on: function (target, event, listener, useCapture) {                                                           // 5589\n            this.events.attachDOMEvent(target, event, listener, useCapture);                                           // 5590\n        },                                                                                                             // 5591\n                                                                                                                       // 5592\n        off: function (target, event, listener, useCapture) {                                                          // 5593\n            this.events.detachDOMEvent(target, event, listener, useCapture);                                           // 5594\n        },                                                                                                             // 5595\n                                                                                                                       // 5596\n        subscribe: function (event, listener) {                                                                        // 5597\n            this.events.attachCustomEvent(event, listener);                                                            // 5598\n        },                                                                                                             // 5599\n                                                                                                                       // 5600\n        unsubscribe: function (event, listener) {                                                                      // 5601\n            this.events.detachCustomEvent(event, listener);                                                            // 5602\n        },                                                                                                             // 5603\n                                                                                                                       // 5604\n        trigger: function (name, data, editable) {                                                                     // 5605\n            this.events.triggerCustomEvent(name, data, editable);                                                      // 5606\n        },                                                                                                             // 5607\n                                                                                                                       // 5608\n        delay: function (fn) {                                                                                         // 5609\n            var self = this;                                                                                           // 5610\n            return setTimeout(function () {                                                                            // 5611\n                if (self.isActive) {                                                                                   // 5612\n                    fn();                                                                                              // 5613\n                }                                                                                                      // 5614\n            }, this.options.delay);                                                                                    // 5615\n        },                                                                                                             // 5616\n                                                                                                                       // 5617\n        serialize: function () {                                                                                       // 5618\n            var i,                                                                                                     // 5619\n                elementid,                                                                                             // 5620\n                content = {};                                                                                          // 5621\n            for (i = 0; i < this.elements.length; i += 1) {                                                            // 5622\n                elementid = (this.elements[i].id !== '') ? this.elements[i].id : 'element-' + i;                       // 5623\n                content[elementid] = {                                                                                 // 5624\n                    value: this.elements[i].innerHTML.trim()                                                           // 5625\n                };                                                                                                     // 5626\n            }                                                                                                          // 5627\n            return content;                                                                                            // 5628\n        },                                                                                                             // 5629\n                                                                                                                       // 5630\n        getExtensionByName: function (name) {                                                                          // 5631\n            var extension;                                                                                             // 5632\n            if (this.extensions && this.extensions.length) {                                                           // 5633\n                this.extensions.some(function (ext) {                                                                  // 5634\n                    if (ext.name === name) {                                                                           // 5635\n                        extension = ext;                                                                               // 5636\n                        return true;                                                                                   // 5637\n                    }                                                                                                  // 5638\n                    return false;                                                                                      // 5639\n                });                                                                                                    // 5640\n            }                                                                                                          // 5641\n            return extension;                                                                                          // 5642\n        },                                                                                                             // 5643\n                                                                                                                       // 5644\n        /**                                                                                                            // 5645\n         * NOT DOCUMENTED - exposed as a helper for other extensions to use                                            // 5646\n         */                                                                                                            // 5647\n        addBuiltInExtension: function (name, opts) {                                                                   // 5648\n            var extension = this.getExtensionByName(name),                                                             // 5649\n                merged;                                                                                                // 5650\n            if (extension) {                                                                                           // 5651\n                return extension;                                                                                      // 5652\n            }                                                                                                          // 5653\n                                                                                                                       // 5654\n            switch (name) {                                                                                            // 5655\n                case 'anchor':                                                                                         // 5656\n                    merged = Util.extend({}, this.options.anchor, opts);                                               // 5657\n                    extension = new MediumEditor.extensions.anchor(merged);                                            // 5658\n                    break;                                                                                             // 5659\n                case 'anchorPreview':                                                                                  // 5660\n                    extension = new MediumEditor.extensions.anchorPreview(this.options.anchorPreview);                 // 5661\n                    break;                                                                                             // 5662\n                case 'autoLink':                                                                                       // 5663\n                    extension = new MediumEditor.extensions.autoLink();                                                // 5664\n                    break;                                                                                             // 5665\n                case 'fontsize':                                                                                       // 5666\n                    extension = new MediumEditor.extensions.fontSize(opts);                                            // 5667\n                    break;                                                                                             // 5668\n                case 'imageDragging':                                                                                  // 5669\n                    extension = new MediumEditor.extensions.imageDragging();                                           // 5670\n                    break;                                                                                             // 5671\n                case 'keyboardCommands':                                                                               // 5672\n                    extension = new MediumEditor.extensions.keyboardCommands(this.options.keyboardCommands);           // 5673\n                    break;                                                                                             // 5674\n                case 'paste':                                                                                          // 5675\n                    extension = new MediumEditor.extensions.paste(this.options.paste);                                 // 5676\n                    break;                                                                                             // 5677\n                case 'placeholder':                                                                                    // 5678\n                    extension = new MediumEditor.extensions.placeholder(this.options.placeholder);                     // 5679\n                    break;                                                                                             // 5680\n                default:                                                                                               // 5681\n                    // All of the built-in buttons for MediumEditor are extensions                                     // 5682\n                    // so check to see if the extension we're creating is a built-in button                            // 5683\n                    if (MediumEditor.extensions.button.isBuiltInButton(name)) {                                        // 5684\n                        if (opts) {                                                                                    // 5685\n                            merged = Util.defaults({}, opts, MediumEditor.extensions.button.prototype.defaults[name]); // 5686\n                            extension = new MediumEditor.extensions.button(merged);                                    // 5687\n                        } else {                                                                                       // 5688\n                            extension = new MediumEditor.extensions.button(name);                                      // 5689\n                        }                                                                                              // 5690\n                    }                                                                                                  // 5691\n            }                                                                                                          // 5692\n                                                                                                                       // 5693\n            if (extension) {                                                                                           // 5694\n                this.extensions.push(initExtension(extension, name, this));                                            // 5695\n            }                                                                                                          // 5696\n                                                                                                                       // 5697\n            return extension;                                                                                          // 5698\n        },                                                                                                             // 5699\n                                                                                                                       // 5700\n        stopSelectionUpdates: function () {                                                                            // 5701\n            this.preventSelectionUpdates = true;                                                                       // 5702\n        },                                                                                                             // 5703\n                                                                                                                       // 5704\n        startSelectionUpdates: function () {                                                                           // 5705\n            this.preventSelectionUpdates = false;                                                                      // 5706\n        },                                                                                                             // 5707\n                                                                                                                       // 5708\n        checkSelection: function () {                                                                                  // 5709\n            var toolbar = this.getExtensionByName('toolbar');                                                          // 5710\n            if (toolbar) {                                                                                             // 5711\n                toolbar.checkState();                                                                                  // 5712\n            }                                                                                                          // 5713\n            return this;                                                                                               // 5714\n        },                                                                                                             // 5715\n                                                                                                                       // 5716\n        // Wrapper around document.queryCommandState for checking whether an action has already                        // 5717\n        // been applied to the current selection                                                                       // 5718\n        queryCommandState: function (action) {                                                                         // 5719\n            var fullAction = /^full-(.+)$/gi,                                                                          // 5720\n                match,                                                                                                 // 5721\n                queryState = null;                                                                                     // 5722\n                                                                                                                       // 5723\n            // Actions starting with 'full-' need to be modified since this is a medium-editor concept                 // 5724\n            match = fullAction.exec(action);                                                                           // 5725\n            if (match) {                                                                                               // 5726\n                action = match[1];                                                                                     // 5727\n            }                                                                                                          // 5728\n                                                                                                                       // 5729\n            try {                                                                                                      // 5730\n                queryState = this.options.ownerDocument.queryCommandState(action);                                     // 5731\n            } catch (exc) {                                                                                            // 5732\n                queryState = null;                                                                                     // 5733\n            }                                                                                                          // 5734\n                                                                                                                       // 5735\n            return queryState;                                                                                         // 5736\n        },                                                                                                             // 5737\n                                                                                                                       // 5738\n        execAction: function (action, opts) {                                                                          // 5739\n            /*jslint regexp: true*/                                                                                    // 5740\n            var fullAction = /^full-(.+)$/gi,                                                                          // 5741\n                match,                                                                                                 // 5742\n                result;                                                                                                // 5743\n            /*jslint regexp: false*/                                                                                   // 5744\n                                                                                                                       // 5745\n            // Actions starting with 'full-' should be applied to to the entire contents of the editable element       // 5746\n            // (ie full-bold, full-append-pre, etc.)                                                                   // 5747\n            match = fullAction.exec(action);                                                                           // 5748\n            if (match) {                                                                                               // 5749\n                // Store the current selection to be restored after applying the action                                // 5750\n                this.saveSelection();                                                                                  // 5751\n                // Select all of the contents before calling the action                                                // 5752\n                this.selectAllContents();                                                                              // 5753\n                result = execActionInternal.call(this, match[1], opts);                                                // 5754\n                // Restore the previous selection                                                                      // 5755\n                this.restoreSelection();                                                                               // 5756\n            } else {                                                                                                   // 5757\n                result = execActionInternal.call(this, action, opts);                                                  // 5758\n            }                                                                                                          // 5759\n                                                                                                                       // 5760\n            // do some DOM clean-up for known browser issues after the action                                          // 5761\n            if (action === 'insertunorderedlist' || action === 'insertorderedlist') {                                  // 5762\n                Util.cleanListDOM(this.options.ownerDocument, this.getSelectedParentElement());                        // 5763\n            }                                                                                                          // 5764\n                                                                                                                       // 5765\n            this.checkSelection();                                                                                     // 5766\n            return result;                                                                                             // 5767\n        },                                                                                                             // 5768\n                                                                                                                       // 5769\n        getSelectedParentElement: function (range) {                                                                   // 5770\n            if (range === undefined) {                                                                                 // 5771\n                range = this.options.contentWindow.getSelection().getRangeAt(0);                                       // 5772\n            }                                                                                                          // 5773\n            return Selection.getSelectedParentElement(range);                                                          // 5774\n        },                                                                                                             // 5775\n                                                                                                                       // 5776\n        selectAllContents: function () {                                                                               // 5777\n            var currNode = Selection.getSelectionElement(this.options.contentWindow);                                  // 5778\n                                                                                                                       // 5779\n            if (currNode) {                                                                                            // 5780\n                // Move to the lowest descendant node that still selects all of the contents                           // 5781\n                while (currNode.children.length === 1) {                                                               // 5782\n                    currNode = currNode.children[0];                                                                   // 5783\n                }                                                                                                      // 5784\n                                                                                                                       // 5785\n                this.selectElement(currNode);                                                                          // 5786\n            }                                                                                                          // 5787\n        },                                                                                                             // 5788\n                                                                                                                       // 5789\n        selectElement: function (element) {                                                                            // 5790\n            Selection.selectNode(element, this.options.ownerDocument);                                                 // 5791\n                                                                                                                       // 5792\n            var selElement = Selection.getSelectionElement(this.options.contentWindow);                                // 5793\n            if (selElement) {                                                                                          // 5794\n                this.events.focusElement(selElement);                                                                  // 5795\n            }                                                                                                          // 5796\n        },                                                                                                             // 5797\n                                                                                                                       // 5798\n        getFocusedElement: function () {                                                                               // 5799\n            var focused;                                                                                               // 5800\n            this.elements.some(function (element) {                                                                    // 5801\n                // Find the element that has focus                                                                     // 5802\n                if (!focused && element.getAttribute('data-medium-focused')) {                                         // 5803\n                    focused = element;                                                                                 // 5804\n                }                                                                                                      // 5805\n                                                                                                                       // 5806\n                // bail if we found the element that had focus                                                         // 5807\n                return !!focused;                                                                                      // 5808\n            }, this);                                                                                                  // 5809\n                                                                                                                       // 5810\n            return focused;                                                                                            // 5811\n        },                                                                                                             // 5812\n                                                                                                                       // 5813\n        // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n        // Tim Down                                                                                                    // 5815\n        // TODO: move to selection.js and clean up old methods there                                                   // 5816\n        exportSelection: function () {                                                                                 // 5817\n            var selectionState = null,                                                                                 // 5818\n                selection = this.options.contentWindow.getSelection(),                                                 // 5819\n                range,                                                                                                 // 5820\n                preSelectionRange,                                                                                     // 5821\n                start,                                                                                                 // 5822\n                editableElementIndex = -1;                                                                             // 5823\n                                                                                                                       // 5824\n            if (selection.rangeCount > 0) {                                                                            // 5825\n                range = selection.getRangeAt(0);                                                                       // 5826\n                preSelectionRange = range.cloneRange();                                                                // 5827\n                                                                                                                       // 5828\n                // Find element current selection is inside                                                            // 5829\n                this.elements.some(function (el, index) {                                                              // 5830\n                    if (el === range.startContainer || Util.isDescendant(el, range.startContainer)) {                  // 5831\n                        editableElementIndex = index;                                                                  // 5832\n                        return true;                                                                                   // 5833\n                    }                                                                                                  // 5834\n                    return false;                                                                                      // 5835\n                });                                                                                                    // 5836\n                                                                                                                       // 5837\n                if (editableElementIndex > -1) {                                                                       // 5838\n                    preSelectionRange.selectNodeContents(this.elements[editableElementIndex]);                         // 5839\n                    preSelectionRange.setEnd(range.startContainer, range.startOffset);                                 // 5840\n                    start = preSelectionRange.toString().length;                                                       // 5841\n                                                                                                                       // 5842\n                    selectionState = {                                                                                 // 5843\n                        start: start,                                                                                  // 5844\n                        end: start + range.toString().length,                                                          // 5845\n                        editableElementIndex: editableElementIndex                                                     // 5846\n                    };                                                                                                 // 5847\n                    // If start = 0 there may still be an empty paragraph before it, but we don't care.                // 5848\n                    if (start !== 0) {                                                                                 // 5849\n                        var emptyBlocksIndex = Selection.getIndexRelativeToAdjacentEmptyBlocks(                        // 5850\n                                this.options.ownerDocument,                                                            // 5851\n                                this.elements[editableElementIndex],                                                   // 5852\n                                range.startContainer,                                                                  // 5853\n                                range.startOffset);                                                                    // 5854\n                        if (emptyBlocksIndex !== 0) {                                                                  // 5855\n                            selectionState.emptyBlocksIndex = emptyBlocksIndex;                                        // 5856\n                        }                                                                                              // 5857\n                    }                                                                                                  // 5858\n                }                                                                                                      // 5859\n            }                                                                                                          // 5860\n                                                                                                                       // 5861\n            if (selectionState !== null && selectionState.editableElementIndex === 0) {                                // 5862\n                delete selectionState.editableElementIndex;                                                            // 5863\n            }                                                                                                          // 5864\n                                                                                                                       // 5865\n            return selectionState;                                                                                     // 5866\n        },                                                                                                             // 5867\n                                                                                                                       // 5868\n        saveSelection: function () {                                                                                   // 5869\n            this.selectionState = this.exportSelection();                                                              // 5870\n        },                                                                                                             // 5871\n                                                                                                                       // 5872\n        // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n        // Tim Down                                                                                                    // 5874\n        // TODO: move to selection.js and clean up old methods there                                                   // 5875\n        //                                                                                                             // 5876\n        // {object} inSelectionState - the selection to import                                                         // 5877\n        // {boolean} [favorLaterSelectionAnchor] - defaults to false. If true, import the cursor immediately           // 5878\n        //      subsequent to an anchor tag if it would otherwise be placed right at the trailing edge inside the      // 5879\n        //      anchor. This cursor positioning, even though visually equivalent to the user, can affect behavior      // 5880\n        //      in MS IE.                                                                                              // 5881\n        importSelection: function (inSelectionState, favorLaterSelectionAnchor) {                                      // 5882\n            if (!inSelectionState) {                                                                                   // 5883\n                return;                                                                                                // 5884\n            }                                                                                                          // 5885\n                                                                                                                       // 5886\n            var editableElementIndex = inSelectionState.editableElementIndex === undefined ?                           // 5887\n                                                0 : inSelectionState.editableElementIndex,                             // 5888\n                selectionState = {                                                                                     // 5889\n                    editableElementIndex: editableElementIndex,                                                        // 5890\n                    start: inSelectionState.start,                                                                     // 5891\n                    end: inSelectionState.end                                                                          // 5892\n                },                                                                                                     // 5893\n                editableElement = this.elements[selectionState.editableElementIndex],                                  // 5894\n                charIndex = 0,                                                                                         // 5895\n                range = this.options.ownerDocument.createRange(),                                                      // 5896\n                nodeStack = [editableElement],                                                                         // 5897\n                node,                                                                                                  // 5898\n                foundStart = false,                                                                                    // 5899\n                stop = false,                                                                                          // 5900\n                i,                                                                                                     // 5901\n                sel,                                                                                                   // 5902\n                nextCharIndex;                                                                                         // 5903\n                                                                                                                       // 5904\n            range.setStart(editableElement, 0);                                                                        // 5905\n            range.collapse(true);                                                                                      // 5906\n                                                                                                                       // 5907\n            node = nodeStack.pop();                                                                                    // 5908\n            while (!stop && node) {                                                                                    // 5909\n                if (node.nodeType === 3) {                                                                             // 5910\n                    nextCharIndex = charIndex + node.length;                                                           // 5911\n                    if (!foundStart && selectionState.start >= charIndex && selectionState.start <= nextCharIndex) {   // 5912\n                        range.setStart(node, selectionState.start - charIndex);                                        // 5913\n                        foundStart = true;                                                                             // 5914\n                    }                                                                                                  // 5915\n                    if (foundStart && selectionState.end >= charIndex && selectionState.end <= nextCharIndex) {        // 5916\n                        range.setEnd(node, selectionState.end - charIndex);                                            // 5917\n                        stop = true;                                                                                   // 5918\n                    }                                                                                                  // 5919\n                    charIndex = nextCharIndex;                                                                         // 5920\n                } else {                                                                                               // 5921\n                    i = node.childNodes.length - 1;                                                                    // 5922\n                    while (i >= 0) {                                                                                   // 5923\n                        nodeStack.push(node.childNodes[i]);                                                            // 5924\n                        i -= 1;                                                                                        // 5925\n                    }                                                                                                  // 5926\n                }                                                                                                      // 5927\n                if (!stop) {                                                                                           // 5928\n                    node = nodeStack.pop();                                                                            // 5929\n                }                                                                                                      // 5930\n            }                                                                                                          // 5931\n                                                                                                                       // 5932\n            if (inSelectionState.emptyBlocksIndex && selectionState.end === nextCharIndex) {                           // 5933\n                var targetNode = Util.getTopBlockContainer(range.startContainer),                                      // 5934\n                    index = 0;                                                                                         // 5935\n                // Skip over empty blocks until we hit the block we want the selection to be in                        // 5936\n                while (index < inSelectionState.emptyBlocksIndex && targetNode.nextSibling) {                          // 5937\n                    targetNode = targetNode.nextSibling;                                                               // 5938\n                    index++;                                                                                           // 5939\n                    // If we find a non-empty block, ignore the emptyBlocksIndex and just put selection here           // 5940\n                    if (targetNode.textContent.length > 0) {                                                           // 5941\n                        break;                                                                                         // 5942\n                    }                                                                                                  // 5943\n                }                                                                                                      // 5944\n                                                                                                                       // 5945\n                // We're selecting a high-level block node, so make sure the cursor gets moved into the deepest        // 5946\n                // element at the beginning of the block                                                               // 5947\n                range.setStart(Util.getFirstSelectableLeafNode(targetNode), 0);                                        // 5948\n                range.collapse(true);                                                                                  // 5949\n            }                                                                                                          // 5950\n                                                                                                                       // 5951\n            // If the selection is right at the ending edge of a link, put it outside the anchor tag instead of inside.\n            if (favorLaterSelectionAnchor) {                                                                           // 5953\n                range = Selection.importSelectionMoveCursorPastAnchor(selectionState, range);                          // 5954\n            }                                                                                                          // 5955\n            sel = this.options.contentWindow.getSelection();                                                           // 5956\n            sel.removeAllRanges();                                                                                     // 5957\n            sel.addRange(range);                                                                                       // 5958\n        },                                                                                                             // 5959\n                                                                                                                       // 5960\n        restoreSelection: function () {                                                                                // 5961\n            this.importSelection(this.selectionState);                                                                 // 5962\n        },                                                                                                             // 5963\n                                                                                                                       // 5964\n        createLink: function (opts) {                                                                                  // 5965\n            var customEvent,                                                                                           // 5966\n                i;                                                                                                     // 5967\n                                                                                                                       // 5968\n            if (opts.url && opts.url.trim().length > 0) {                                                              // 5969\n                var currentSelection = this.options.contentWindow.getSelection();                                      // 5970\n                if (currentSelection) {                                                                                // 5971\n                    var exportedSelection,                                                                             // 5972\n                        startContainerParentElement,                                                                   // 5973\n                        endContainerParentElement,                                                                     // 5974\n                        textNodes;                                                                                     // 5975\n                                                                                                                       // 5976\n                    startContainerParentElement = Util.getClosestBlockContainer(                                       // 5977\n                        currentSelection.getRangeAt(0).startContainer);                                                // 5978\n                    endContainerParentElement = Util.getClosestBlockContainer(                                         // 5979\n                        currentSelection.getRangeAt(0).endContainer);                                                  // 5980\n                                                                                                                       // 5981\n                    if (startContainerParentElement === endContainerParentElement) {                                   // 5982\n                        var currentEditor = Selection.getSelectionElement(this.options.contentWindow),                 // 5983\n                            parentElement = (startContainerParentElement || currentEditor),                            // 5984\n                            fragment = this.options.ownerDocument.createDocumentFragment();                            // 5985\n                        exportedSelection = this.exportSelection();                                                    // 5986\n                        fragment.appendChild(parentElement.cloneNode(true));                                           // 5987\n                        if (currentEditor === parentElement) {                                                         // 5988\n                            // We have to avoid the editor itself being wiped out when it's the only block element,    // 5989\n                            // as our reference inside this.elements gets detached from the page when insertHTML runs. // 5990\n                            // If we just use [parentElement, 0] and [parentElement, parentElement.childNodes.length]  // 5991\n                            // as the range boundaries, this happens whenever parentElement === currentEditor.         // 5992\n                            // The tradeoff to this workaround is that a orphaned tag can sometimes be left behind at  // 5993\n                            // the end of the editor's content.                                                        // 5994\n                            // In Gecko:                                                                               // 5995\n                            // as an empty <strong></strong> if parentElement.lastChild is a <strong> tag.             // 5996\n                            // In WebKit:                                                                              // 5997\n                            // an invented <br /> tag at the end in the same situation                                 // 5998\n                                                                                                                       // 5999\n                            Selection.select(this.options.ownerDocument,                                               // 6000\n                                parentElement.firstChild, 0,                                                           // 6001\n                                parentElement.lastChild, parentElement.lastChild.nodeType === 3 ?                      // 6002\n                                parentElement.lastChild.nodeValue.length : parentElement.lastChild.childNodes.length); // 6003\n                        } else {                                                                                       // 6004\n                            Selection.select(this.options.ownerDocument,                                               // 6005\n                                parentElement, 0,                                                                      // 6006\n                                parentElement, parentElement.childNodes.length);                                       // 6007\n                        }                                                                                              // 6008\n                        var modifiedExportedSelection = this.exportSelection();                                        // 6009\n                                                                                                                       // 6010\n                        textNodes = Util.findOrCreateMatchingTextNodes(this.options.ownerDocument,                     // 6011\n                                fragment,                                                                              // 6012\n                                {                                                                                      // 6013\n                                    start: exportedSelection.start - modifiedExportedSelection.start,                  // 6014\n                                    end: exportedSelection.end - modifiedExportedSelection.start,                      // 6015\n                                    editableElementIndex: exportedSelection.editableElementIndex                       // 6016\n                                });                                                                                    // 6017\n                        // Creates the link in the document fragment                                                   // 6018\n                        Util.createLink(this.options.ownerDocument, textNodes, opts.url.trim());                       // 6019\n                        // Chrome trims the leading whitespaces when inserting HTML, which messes up restoring the selection.\n                        var leadingWhitespacesCount = (fragment.firstChild.innerHTML.match(/^\\s+/) || [''])[0].length; // 6021\n                        // Now move the created link back into the original document in a way to preserve undo/redo history\n                        Util.insertHTMLCommand(this.options.ownerDocument,                                             // 6023\n                            fragment.firstChild.innerHTML.replace(/^\\s+/, ''));                                        // 6024\n                        exportedSelection.start -= leadingWhitespacesCount;                                            // 6025\n                        exportedSelection.end -= leadingWhitespacesCount;                                              // 6026\n                        this.importSelection(exportedSelection);                                                       // 6027\n                    } else {                                                                                           // 6028\n                        this.options.ownerDocument.execCommand('createLink', false, opts.url);                         // 6029\n                    }                                                                                                  // 6030\n                    if (this.options.targetBlank || opts.target === '_blank') {                                        // 6031\n                        Util.setTargetBlank(Selection.getSelectionStart(this.options.ownerDocument), opts.url);        // 6032\n                    }                                                                                                  // 6033\n                                                                                                                       // 6034\n                    if (opts.buttonClass) {                                                                            // 6035\n                        Util.addClassToAnchors(Selection.getSelectionStart(this.options.ownerDocument), opts.buttonClass);\n                    }                                                                                                  // 6037\n                }                                                                                                      // 6038\n            }                                                                                                          // 6039\n                                                                                                                       // 6040\n            if (this.options.targetBlank || opts.target === '_blank' || opts.buttonClass) {                            // 6041\n                customEvent = this.options.ownerDocument.createEvent('HTMLEvents');                                    // 6042\n                customEvent.initEvent('input', true, true, this.options.contentWindow);                                // 6043\n                for (i = 0; i < this.elements.length; i += 1) {                                                        // 6044\n                    this.elements[i].dispatchEvent(customEvent);                                                       // 6045\n                }                                                                                                      // 6046\n            }                                                                                                          // 6047\n        },                                                                                                             // 6048\n                                                                                                                       // 6049\n        cleanPaste: function (text) {                                                                                  // 6050\n            this.getExtensionByName('paste').cleanPaste(text);                                                         // 6051\n        },                                                                                                             // 6052\n                                                                                                                       // 6053\n        pasteHTML: function (html, options) {                                                                          // 6054\n            this.getExtensionByName('paste').pasteHTML(html, options);                                                 // 6055\n        }                                                                                                              // 6056\n    };                                                                                                                 // 6057\n}());                                                                                                                  // 6058\n                                                                                                                       // 6059\nMediumEditor.parseVersionString = function (release) {                                                                 // 6060\n    var split = release.split('-'),                                                                                    // 6061\n        version = split[0].split('.'),                                                                                 // 6062\n        preRelease = (split.length > 1) ? split[1] : '';                                                               // 6063\n    return {                                                                                                           // 6064\n        major: parseInt(version[0], 10),                                                                               // 6065\n        minor: parseInt(version[1], 10),                                                                               // 6066\n        revision: parseInt(version[2], 10),                                                                            // 6067\n        preRelease: preRelease,                                                                                        // 6068\n        toString: function () {                                                                                        // 6069\n            return [version[0], version[1], version[2]].join('.') + (preRelease ? '-' + preRelease : '');              // 6070\n        }                                                                                                              // 6071\n    };                                                                                                                 // 6072\n};                                                                                                                     // 6073\n                                                                                                                       // 6074\nMediumEditor.version = MediumEditor.parseVersionString.call(this, ({                                                   // 6075\n    // grunt-bump looks for this:                                                                                      // 6076\n    'version': '5.2.0'                                                                                                 // 6077\n}).version);                                                                                                           // 6078\n                                                                                                                       // 6079\n    return MediumEditor;                                                                                               // 6080\n}()));                                                                                                                 // 6081\n                                                                                                                       // 6082\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mediumeditor:mediumeditor/meteor/export.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*global MediumEditor:true*/  // Meteor creates a file-scope global for exporting. This comment prevents a potential JSHint warning.\nMediumEditor = window.MediumEditor;                                                                                    // 2\ndelete window.MediumEditor;                                                                                            // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}